###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         04/Nov/2017  09:08:27 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\Source\SampleApp.c     #
#    Command line       =  -f C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\T #
#                          ools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ             #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\T #
#                          ools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO           #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\77564\Desktop\TENZ #
#                          ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp #
#                          \Source\SampleApp.c -D BUILD_ALL_DEVICES -D        #
#                          HOLD_AUTO_START -D LCD_SUPPORTED -D                #
#                          HAL_UART=FALSE -D ZTOOL_P1 -lC                     #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\DemoEB\List\  #
#                          -lA C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\DemoEB\Li #
#                          st\ --diag_suppress Pe001,Pa010 -o                 #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\DemoEB\Obj\   #
#                          -e --no_code_motion --debug --core=plain           #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\77564\Desktop\TEN #
#                          Z×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\ -I C:\Users\77564\Desktop\TENZ×é²¥+PM2 #
#                          5+CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\Source\ -I C:\Users\77564\Desktop\TENZ×é²¥+PM #
#                          25+CO+HCL\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\ZMain\TI2530DB\ -I                     #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\hal\include\ -I                       #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\hal\target\CC2530EB\ -I               #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\include\ -I                       #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\high_level\ -I                    #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\low_level\srf04\ -I               #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\low_level\srf04\single_chip\ -I   #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mt\ -I C:\Users\77564\Desktop\TENZ×é² #
#                          ¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\Components\osal\include\ -I  #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\services\saddr\ -I                    #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\services\sdata\ -I                    #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\af\ -I                          #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sapi\ -I                        #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sec\ -I                         #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sys\ -I                         #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\zdo\ -I                         #
#                          C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\zmac\ -I C:\Users\77564\Desktop\TENZ× #
#                          é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz  #
#                          --require_prototypes                               #
#    List file          =  C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\DemoEB\List\S #
#                          ampleApp.lst                                       #
#    Object file        =  C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\DemoEB\Obj\Sa #
#                          mpleApp.r51                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "hal_adc.h"
     75          //´Ë´¦ÓÃÓÚ´®¿Ú
     76          #include  "MT_UART.h"
     77          //ÎÂÊª¶È´«¸ÐÆ÷
     78          #include "dht11.h"
     79          //CÓïÑÔ±ê×¼¿â
     80          #include <string.h>
     81          #include <stdio.h>
     82          //GasSensor »ñÈ¡Êý¾ÝµÄÍ·ÎÄ¼þ
     83          #include "TGS813.h"
     84          #include "TGS822.h"
     85          
     86          //CO
     87          #include <CO.h>
     88          
     89          //PM2.5
     90          #include <PM25.h>
     91          /*********************************************************************
     92           * MACROS
     93           */
     94          
     95          
     96          #define AMS1117_3_ADC_VOL     3.28   //ºê¶¨ÒåAMS1117 3.3 ADC²Î¿¼µçÑ¹£¬¸ÃÖµ¿ÉÄÜÔÚ3.2-3.4¸¡¶¯
     97          //Èç¹û¶¨ÒåÁËchannel0»òÕßchannel1¸øÆøÌå´«¸ÐÆ÷£¬Ôò
     98          #if (defined Channel_0_For_TGS813) || (defined Channel_0_For_TGS822)
     99          #define Channel_0_GasSensor_Busy
    100          #endif
    101          #if (defined Channel_1_For_TGS813) || (defined Channel_1_For_TGS822)
    102          #define Channel_1_GasSensor_Busy
    103          #endif
    104          //Èç¹û¶à¸öÆøÌå´«¸ÐÆ÷Í¬Ê±Õ¼ÓÃÍ¬Ò»¸öchannel£¬ÔòÌáÊ¾
    105          #if (defined Channel_0_For_TGS813) && (defined Channel_0_For_TGS822)
    106          #error "Channel0 is just for one gas sensor.Check the micro!"
    107          #endif
    108          #if (defined Channel_1_For_TGS813) && (defined Channel_1_For_TGS822)
    109          #error "Channel1 is just for one gas sensor.Check the micro!"
    110          
    111          #endif
    112          #if (!defined Channel_0_GasSensor_Busy) && (!defined Channel_1_GasSensor_Busy)
    113          #warning "Do you want to use the Gas Sensor? if yes,please define it,if not please ignore this message."
                  ^
Warning[Pe1105]: #warning directive: "Do you want to use the Gas Sensor? if
          yes,please define it,if not please ignore this message."
    114          #endif
    115          
    116          // ÉèÖÃ²»Í¬´«¸ÐÆ÷µçÑ¹ãÐÖµ
    117          // TGS813
    118          #define TGS813_Safe 0.8
    119          #define TGS813_Mildly 1.2
    120          #define TGS813_Moderate 1.8
    121          #define TGS813_Severe 2.3
    122          // TGS822
    123          #define TGS822_Safe 0.8
    124          #define TGS822_Mildly 1.2
    125          #define TGS822_Moderate 1.8
    126          #define TGS822_Severe 2.3
    127          
    128          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          char contin=0;
   \                     contin:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    130          extern uint8 PM_data[6];

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 send_data_PM25[8];
   \                     send_data_PM25:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          uint8 send_data_CO[7];
   \                     send_data_CO:
   \   000000                DS 7
   \   000007                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 send_data_HCL[6];
   \                     send_data_HCL:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    134          /*********************************************************************
    135           * CONSTANTS
    136           */
    137          
    138          /*********************************************************************
    139           * TYPEDEFS
    140           */
    141          
    142          /*********************************************************************
    143           * GLOBAL VARIABLES
    144           */
    145          
    146          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    147          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
    148          {
    149            SAMPLEAPP_PERIODIC_CLUSTERID,
    150            SAMPLEAPP_FLASH_CLUSTERID
    151          };
    152          

   \                                 In  segment XDATA_ROM_C, align 1
    153          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    154          {
    155            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    156            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    157            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    158            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    159            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    160            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    161            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    162            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    163            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    164          };
    165          
    166          // This is the Endpoint/Interface description.  It is defined here, but
    167          // filled-in in SampleApp_Init().  Another way to go would be to fill
    168          // in the structure here and make it a "const" (in code space).  The
    169          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    171          
    172          /*********************************************************************
    173           * EXTERNAL VARIABLES
    174           */
    175          
    176          /*********************************************************************
    177           * EXTERNAL FUNCTIONS
    178           */
    179          
    180          /*********************************************************************
    181           * LOCAL VARIABLES
    182           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    184                                    // This variable will be received when
    185                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    187          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    191          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    193          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          afAddrType_t SampleApp_Point_To_Point_DstAddr;
   \                     SampleApp_Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    195          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          aps_Group_t SampleApp_Group;//·Ö×éÄÚÈÝ
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    197          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    200          
    201          
    202          //@huang
    203          //ÉèÖÃchannel0ºÍchannel1»ñÈ¡ÆøÌåÅ¨¶ÈÖ¸ÏòµÄº¯Êý
    204          #if (defined Channel_0_For_TGS813)
    205          int (*PointGetConcentrationForChannel_0)(float ,char ,unsigned char ) = TGS813GetConcentration;
    206          uint8 *GasSensorFlagForChannel_0 = &TGS813GasSen_Flag;
    207          #elif ((defined Channel_1_For_TGS813))
    208          int (*PointGetConcentrationForChannel_1)(float ,char ,unsigned char ) = TGS813GetConcentration;
    209          uint8 *GasSensorFlagForChannel_1 = &TGS813GasSen_Flag;
    210          #endif
    211          #if (defined Channel_0_For_TGS822)
    212          int (*PointGetConcentrationForChannel_0)(float ,char ,unsigned char ) = TGS822GetConcentration;
    213          uint8 *GasSensorFlagForChannel_0 = &TGS822GasSen_Flag;
    214          #elif (defined Channel_1_For_TGS822)
    215          int (*PointGetConcentrationForChannel_1)(float ,char ,unsigned char ) = TGS822GetConcentration;
    216          uint8 *GasSensorFlagForChannel_1 = &TGS822GasSen_Flag;
    217          #endif
    218          
    219          
    220          /*********************************************************************
    221           * LOCAL FUNCTIONS
    222           */
    223          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    224          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    225          void SampleApp_SendPeriodicMessage( void );
    226          void SampleApp_SendFlashMessage( uint16 flashTime );
    227          void SampleApp_SendPointMessage( void );
    228          
    229          //@huang
    230          void SampleAPP_SendGasSensorMessage(void);//×Ô¼º¶¨ÒåµÄÊý¾Ý·¢ËÍº¯Êý
    231          void GetChannel1ADC(void);
    232          void GetChannel2ADC(void);
    233          /*********************************************************************
    234           * NETWORK LAYER CALLBACKS
    235           */
    236          
    237          /*********************************************************************
    238           * PUBLIC FUNCTIONS
    239           */
    240          
    241          /*********************************************************************
    242           * @fn      SampleApp_Init
    243           *
    244           * @brief   Initialization function for the Generic App Task.
    245           *          This is called during initialization and should contain
    246           *          any application specific initialization (ie. hardware
    247           *          initialization/setup, table initialization, power up
    248           *          notificaiton ... ).
    249           *
    250           * @param   task_id - the ID assigned by OSAL.  This ID should be
    251           *                    used to send messages and set timers.
    252           *
    253           * @return  none
    254           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    255          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    256          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    257            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    258            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    259            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    260          
    261            MT_UartInit();                //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    262            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    263            HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0C         MOV     R4,#0xc
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay
    264            PM2_5Init();//³õÊ¼»¯PM2.5º¯Êý
   \   00002B                ; Setup parameters for call to function PM2_5Init
   \   00002B   12....       LCALL   ??PM2_5Init?relay
    265            HalAdcInit();                 //ADC²Î¿¼µçÑ¹³õÊ¼»¯£¨Ä¬ÈÏÎªÄÚ²¿²Î¿¼µçÑ¹£©
   \   00002E                ; Setup parameters for call to function HalAdcInit
   \   00002E   12....       LCALL   ??HalAdcInit?relay
    266            // Device hardware initialization can be added here or in main() (Zmain.c).
    267            // If the hardware is application specific - add it here.
    268            // If the hardware is other parts of the device add it in main().
    269          
    270           #if defined ( BUILD_ALL_DEVICES )
    271            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    272            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    273            // together - if they are - we will start up a coordinator. Otherwise,
    274            // the device will start as a router.
    275            if ( readCoordinatorJumper() )
   \   000031                ; Setup parameters for call to function readCoordinatorJumper
   \   000031   12....       LCALL   ??readCoordinatorJumper?relay
   \   000034   E9           MOV     A,R1
   \   000035   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000038   6003         JZ      ??SampleApp_Init_0
    276              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
   \   00003A   E4           CLR     A
   \   00003B   8002         SJMP    ??SampleApp_Init_1
    277            else
    278              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
   \                     ??SampleApp_Init_0:
   \   00003D   7401         MOV     A,#0x1
   \                     ??SampleApp_Init_1:
   \   00003F   F0           MOVX    @DPTR,A
    279          #endif // BUILD_ALL_DEVICES
    280          
    281          #if defined ( HOLD_AUTO_START )
    282            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    283            //  from starting the device and wait for the application to
    284            //  start the device.
    285            ZDOInitDevice(0);
   \   000040                ; Setup parameters for call to function ZDOInitDevice
   \   000040   7A00         MOV     R2,#0x0
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   ??ZDOInitDevice?relay
    286          #endif
    287          
    288            // Setup for the periodic message's destination address
    289            // Broadcast to everyone
    290            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000047   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00004A   740F         MOV     A,#0xf
   \   00004C   F0           MOVX    @DPTR,A
    291            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00004D   A3           INC     DPTR
   \   00004E   7414         MOV     A,#0x14
   \   000050   F0           MOVX    @DPTR,A
    292            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000051   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000054   74FF         MOV     A,#-0x1
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   F0           MOVX    @DPTR,A
    293          
    294            // Setup for the flash command's destination address - Group 1 //×é²¥ÉèÖÃ
    295            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000059   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
    296            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005F   A3           INC     DPTR
   \   000060   7414         MOV     A,#0x14
   \   000062   F0           MOVX    @DPTR,A
    297            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×é²¥ºÅ
   \   000063   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000066   7401         MOV     A,#0x1
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
    298            //µã²¥½á¹¹ÌåµÄ³õÊ¼»¯
    299             // Setup for the point command's destination address
    300            SampleApp_Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥
   \   00006C   90....       MOV     DPTR,#SampleApp_Point_To_Point_DstAddr + 8
   \   00006F   7402         MOV     A,#0x2
   \   000071   F0           MOVX    @DPTR,A
    301            SampleApp_Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000072   A3           INC     DPTR
   \   000073   7414         MOV     A,#0x14
   \   000075   F0           MOVX    @DPTR,A
    302            SampleApp_Point_To_Point_DstAddr.addr.shortAddr = 0x0000;           //0x0000 Ä¬ÈÏÊÇÐ­µ÷Æ÷µÄµØÖ·
   \   000076   90....       MOV     DPTR,#SampleApp_Point_To_Point_DstAddr
   \   000079   E4           CLR     A
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   F0           MOVX    @DPTR,A
    303            // Fill out the endpoint description.
    304            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00007D   90....       MOV     DPTR,#SampleApp_epDesc
   \   000080   7414         MOV     A,#0x14
   \   000082   F0           MOVX    @DPTR,A
    305            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000083   A3           INC     DPTR
   \   000084   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00008A   F0           MOVX    @DPTR,A
    306            SampleApp_epDesc.simpleDesc
    307                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00008B   A3           INC     DPTR
   \   00008C   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000092   F0           MOVX    @DPTR,A
    308            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000093   A3           INC     DPTR
   \   000094   E4           CLR     A
   \   000095   F0           MOVX    @DPTR,A
    309          
    310            // Register the endpoint description with the AF
    311            afRegister( &SampleApp_epDesc );
   \   000096                ; Setup parameters for call to function afRegister
   \   000096   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000098   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00009A   12....       LCALL   ??afRegister?relay
    312          
    313            // Register for all key events - This app will handle all key events
    314            RegisterForKeys( SampleApp_TaskID );
   \   00009D                ; Setup parameters for call to function RegisterForKeys
   \   00009D   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   12....       LCALL   ??RegisterForKeys?relay
    315          
    316            // By default, all devices start out in Group 1
    317            SampleApp_Group.ID = 0x0001;
   \   0000A5   90....       MOV     DPTR,#SampleApp_Group
   \   0000A8   7401         MOV     A,#0x1
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E4           CLR     A
   \   0000AD   F0           MOVX    @DPTR,A
    318            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   0000AE                ; Setup parameters for call to function osal_memcpy
   \   0000AE   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000B1   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000B4   F5..         MOV     ?V0 + 2,A
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BB   7C07         MOV     R4,#0x7
   \   0000BD   7D00         MOV     R5,#0x0
   \   0000BF   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000C1   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000C3   12....       LCALL   ??osal_memcpy?relay
   \   0000C6   7403         MOV     A,#0x3
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
    319            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000CB                ; Setup parameters for call to function aps_AddGroup
   \   0000CB   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000CD   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000CF   7914         MOV     R1,#0x14
   \   0000D1   12....       LCALL   ??aps_AddGroup?relay
    320          
    321          #if defined ( LCD_SUPPORTED )
    322            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000D4                ; Setup parameters for call to function HalLcdWriteString
   \   0000D4   7901         MOV     R1,#0x1
   \   0000D6   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000D8   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000DA   12....       LCALL   ??HalLcdWriteString?relay
    323          #endif
    324          
    325            //Èç¹ûÃ»ÓÐÊ¹ÓÃPA£¬ÔòÁÁµÆ£¨»òÕßÆäËû£©£¬Èç¹ûÊ¹ÓÃÁËPA£¬Ôò...
    326          #if defined (HAL_PA_LNA)
    327            HAL_TURN_ON_LED2();
   \   0000DD   C291         CLR     0x90.1
    328          #endif
    329          }
   \   0000DF   7F03         MOV     R7,#0x3
   \   0000E1   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000E4                REQUIRE _A_P1
    330          
    331          /*********************************************************************
    332           * @fn      SampleApp_ProcessEvent
    333           *
    334           * @brief   Generic Application Task event processor.  This function
    335           *          is called to process all events for the task.  Events
    336           *          include timers, messages and any other user defined events.
    337           *
    338           * @param   task_id  - The OSAL assigned task ID.
    339           * @param   events - events to process.  This is a bit map and can
    340           *                   contain more than one event.
    341           *
    342           * @return  none
    343           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    344          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    345          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    346            afIncomingMSGPacket_t *MSGpkt;
    347            (void)task_id;  // Intentionally unreferenced parameter
    348          
    349            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    350            {
    351              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    352              while ( MSGpkt )
    353              {
    354                switch ( MSGpkt->hdr.event )
    355                {
    356                  // Received when a key is pressed
    357                  case KEY_CHANGE:
    358                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    359                    break;
    360          
    361                  // Received when a messages is received (OTA) for this endpoint
    362                  case AF_INCOMING_MSG_CMD:
    363                    SampleApp_MessageMSGCB( MSGpkt );
    364                      //¹¤×÷Ö¸Ê¾µÆ
    365                     //HAL_TOGGLE_LED2();
    366                    break;
    367          
    368                  // Received whenever the device changes state in the network
    369                  case ZDO_STATE_CHANGE:
    370                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    371                    if ( //(SampleApp_NwkState == DEV_ZB_COORD)||       //Ð­µ÷Æ÷²»ÔÊÐí¶Ô×Ô¼ºµã²¥£¬Ö»ÔÊÐíÂ·ÓÉÆ÷ºÍÖÕ¶Ë¶ÔÐ­µ÷Æ÷µã²¥
    372                        (SampleApp_NwkState == DEV_ROUTER)
    373                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    374                    {
    375                      // Start sending the periodic message in a regular interval.
    376                      osal_start_timerEx( SampleApp_TaskID,                    //¸Ãº¯Êý¶¨Ê±´¥·¢ÊÂ¼þ
    377                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,        //²ÎÊýÒÀ´ÎÊÇ¡°ÈÎÎñID¡±
    378                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );  //¡°×¢²áÊÂ¼þ¡±¡°Ñ­»·Ê±¼ä¡±
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    379                    }
    380                    else
    381                    {
    382                      // Device is no longer in the network
    383                    }
    384                    break;
    385          
    386                  default:
    387                    break;
    388                }
    389          
    390                // Release the memory
    391                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    392          
    393                // Next - if one is available
    394                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    395              }
    396          
    397              // return unprocessed events
    398              return (events ^ SYS_EVENT_MSG);                        //·µ»ØÃ»ÓÐ´¦ÀíµÄÊÂ¼þ
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    399            }
    400          
    401            // Send a message out - This event is generated by a timer
    402            //  (setup in SampleApp_Init()).
    403            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    404            {
    405              // Send the periodic message
    406             // SampleApp_SendPeriodicMessage();
    407               SampleAPP_SendGasSensorMessage();      //·¢ËÍ´«¸ÐÆ÷Êý¾ÝµÄº¯Êý
   \   000086                ; Setup parameters for call to function SampleAPP_SendGasSensorMessage
   \   000086   12....       LCALL   ??SampleAPP_SendGasSensorMessage?relay
    408          //     GetChannel1ADC();
    409          //     GetChannel2ADC();
    410              // Setup to send message again in normal period (+ a little jitter)
    411              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    412                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    413          
    414              // return unprocessed events
    415              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    416            }
    417          
    418            // Discard unknown events
    419            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    420          }
    421          
    422          
    423          //@huang

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          void GetChannel1ADC(void)
   \                     GetChannel1ADC:
    425          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    426            uint16 ADC_RegData;
    427            uint8 ADC_Result_RAW[15];
    428            uint8 ADC_Result_ASCII[25];
    429            float ADC_Vol=0;
    430            uint8 i=0;
    431          
    432              //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
    433            ADC_RegData = HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);   //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
   \   00000A                ; Setup parameters for call to function HalAdcRead
   \   00000A   7A04         MOV     R2,#0x4
   \   00000C   7904         MOV     R1,#0x4
   \   00000E   12....       LCALL   ?Subroutine9 & 0xFFFF
    434            for(i=0;i<10;i++)
    435            {
    436              ADC_RegData += HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
    437              ADC_RegData >>=1;                                                    //³ýÒÔ2
   \                     ??CrossCallReturnLabel_15:
   \   000011                ; Setup parameters for call to function HalAdcRead
   \   000011   7A04         MOV     R2,#0x4
   \   000013   7904         MOV     R1,#0x4
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    438            }
   \                     ??CrossCallReturnLabel_6:
   \   000018   70F7         JNZ     ??CrossCallReturnLabel_15
    439           //ADC_Vol =  (float)ADC_RegData*3.3/8192 + GasSen_Wire_Compensation;     //»ñÈ¡µçÑ¹Öµ²¢²¹³¥  ²¹³¥µ¼ÏßÑ¹½µ
    440            ADC_Vol = (float)ADC_RegData*3.4/8192;
    441            sprintf(ADC_Result_ASCII,"P0.4:%.4fV",ADC_Vol);                         //½«µçÑ¹Öµ×ª»»ÎªASCII
                           ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   00001A                ; Setup parameters for call to function sprintf
   \   00001A   8E..         MOV     ?V0 + 0,R6
   \   00001C   8F..         MOV     ?V0 + 1,R7
   \   00001E   E4           CLR     A
   \   00001F   F5..         MOV     ?V0 + 2,A
   \   000021   F5..         MOV     ?V0 + 3,A
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?UL_TO_FLT
   \   000028   90....       MOV     DPTR,#__Constant_4059999a
   \   00002B   78..         MOV     R0,#?V0 + 4
   \   00002D   12....       LCALL   ?L_MOV_X
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   79..         MOV     R1,#?V0 + 4
   \   000034   12....       LCALL   ?FLT_MUL
   \   000037   90....       MOV     DPTR,#__Constant_39000000
   \   00003A   78..         MOV     R0,#?V0 + 4
   \   00003C   12....       LCALL   ?L_MOV_X
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   79..         MOV     R1,#?V0 + 4
   \   000043   12....       LCALL   ?FLT_MUL
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00004B   7C..         MOV     R4,#`?<Constant "P0.4:%.4fV">` & 0xff
   \   00004D   7D..         MOV     R5,#(`?<Constant "P0.4:%.4fV">` >> 8) & 0xff
   \   00004F                REQUIRE ?Subroutine0
   \   00004F                ; // Fall through to label ?Subroutine0
    442            HalUARTWrite(0,ADC_Result_ASCII,strlen(ADC_Result_ASCII));             //½«µçÑ¹Öµ´òÓ¡³öÀ´
                                                          ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

    uint8 ADC_Result_RAW[15];
          ^
"C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",427  Warning[Pe177]: 
          variable "ADC_Result_RAW" was declared but never referenced
    443            HalUARTWrite(0,"\r\n\r\n",4);
    444            MicroWait(50);
    445          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7404         MOV     A,#0x4
   \   000002   12....       LCALL   ?XSTACK_DISP0_8
   \   000005   AA82         MOV     R2,DPL
   \   000007   AB83         MOV     R3,DPH
   \   000009   12....       LCALL   ??sprintf?relay
   \   00000C   7404         MOV     A,#0x4
   \   00000E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000011                ; Setup parameters for call to function HalUARTWrite
   \   000011                ; Setup parameters for call to function strlen
   \   000011                ; Setup parameters for call to function HalUARTWrite
   \   000011                ; Setup parameters for call to function strlen
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000023   7419         MOV     A,#0x19
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   7F08         MOV     R7,#0x8
   \   00002A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ??HalAdcRead?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   AE..         MOV     R6,?V0 + 0
   \   000009   AF..         MOV     R7,?V0 + 1
   \   00000B   75..0A       MOV     ?V0 + 0,#0xa
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ??HalAdcRead?relay
   \   000003   8A..         MOV     ?V0 + 2,R2
   \   000005   8B..         MOV     ?V0 + 3,R3
   \   000007   EE           MOV     A,R6
   \   000008   25..         ADD     A,?V0 + 2
   \   00000A   FE           MOV     R6,A
   \   00000B   EF           MOV     A,R7
   \   00000C   35..         ADDC    A,?V0 + 3
   \   00000E   C3           CLR     C
   \   00000F   13           RRC     A
   \   000010   FF           MOV     R7,A
   \   000011   EE           MOV     A,R6
   \   000012   13           RRC     A
   \   000013   FE           MOV     R6,A
   \   000014   15..         DEC     ?V0 + 0
   \   000016   E5..         MOV     A,?V0 + 0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??strlen?relay
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   7900         MOV     R1,#0x0
   \   000006   12....       LCALL   ??HalUARTWrite?relay
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009                ; Setup parameters for call to function HalUARTWrite
   \   000009   7C04         MOV     R4,#0x4
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7A..         MOV     R2,#`?<Constant "\\r\\n\\r\\n">` & 0xff
   \   00000F   7B..         MOV     R3,#(`?<Constant "\\r\\n\\r\\n">` >> 8) & 0xff
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   ??HalUARTWrite?relay
   \   000016                ; Setup parameters for call to function Onboard_wait
   \   000016                ; Setup parameters for call to function Onboard_wait
   \   000016                ; Setup parameters for call to function Onboard_wait
   \   000016   7A32         MOV     R2,#0x32
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ??Onboard_wait?relay
   \   00001D   22           RET
    446          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    447          void GetChannel2ADC(void)
   \                     GetChannel2ADC:
    448          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    449            uint16 ADC_RegData;
    450            uint8 ADC_Result_RAW[15];
    451            uint8 ADC_Result_ASCII[25];
    452            float ADC_Vol=0;
    453              uint8 i=0;
    454              //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
    455              ADC_RegData = HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);     //Ñ¡ÔñP0_0,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
   \   00000A                ; Setup parameters for call to function HalAdcRead
   \   00000A   7A04         MOV     R2,#0x4
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   12....       LCALL   ?Subroutine9 & 0xFFFF
    456              //»ñµÃÆ½¾ùÖµ
    457              for(i=0;i<10;i++)
    458              {
    459                ADC_RegData += HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);   //Ñ¡ÔñP0_0,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
    460                ADC_RegData >>=1;                                                    //³ýÒÔ2
   \                     ??CrossCallReturnLabel_16:
   \   000011                ; Setup parameters for call to function HalAdcRead
   \   000011   7A04         MOV     R2,#0x4
   \   000013   7900         MOV     R1,#0x0
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
    461              }
   \                     ??CrossCallReturnLabel_7:
   \   000018   70F7         JNZ     ??CrossCallReturnLabel_16
    462              ADC_Vol = (float)ADC_RegData*3.4/8192;
    463              sprintf(ADC_Result_ASCII,"P0.0:%.4fV",ADC_Vol);    //½«µçÑ¹Öµ×ª»»ÎªASCII
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   00001A                ; Setup parameters for call to function sprintf
   \   00001A   8E..         MOV     ?V0 + 0,R6
   \   00001C   8F..         MOV     ?V0 + 1,R7
   \   00001E   E4           CLR     A
   \   00001F   F5..         MOV     ?V0 + 2,A
   \   000021   F5..         MOV     ?V0 + 3,A
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?UL_TO_FLT
   \   000028   90....       MOV     DPTR,#__Constant_4059999a
   \   00002B   78..         MOV     R0,#?V0 + 4
   \   00002D   12....       LCALL   ?L_MOV_X
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   79..         MOV     R1,#?V0 + 4
   \   000034   12....       LCALL   ?FLT_MUL
   \   000037   90....       MOV     DPTR,#__Constant_39000000
   \   00003A   78..         MOV     R0,#?V0 + 4
   \   00003C   12....       LCALL   ?L_MOV_X
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   79..         MOV     R1,#?V0 + 4
   \   000043   12....       LCALL   ?FLT_MUL
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00004B   7C..         MOV     R4,#`?<Constant "P0.0:%.4fV">` & 0xff
   \   00004D   7D..         MOV     R5,#(`?<Constant "P0.0:%.4fV">` >> 8) & 0xff
   \   00004F   80..         SJMP    ?Subroutine0
    464              HalUARTWrite(0,ADC_Result_ASCII,strlen(ADC_Result_ASCII));             //½«µçÑ¹Öµ´òÓ¡³öÀ´
                                                            ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

    uint8 ADC_Result_RAW[15];
          ^
"C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",450  Warning[Pe177]: 
          variable "ADC_Result_RAW" was declared but never referenced
    465              HalUARTWrite(0,"\r\n\r\n",4);
    466              MicroWait(50);
    467          }
    468          
    469          
    470          /*********************************************************************
    471           * Event Generation Functions
    472           */
    473          /*********************************************************************
    474           * @fn      SampleApp_HandleKeys
    475           *
    476           * @brief   Handles all key events for this device.
    477           *
    478           * @param   shift - true if in shift/alt.
    479           * @param   keys - bit field for key events. Valid entries:
    480           *                 HAL_KEY_SW_2
    481           *                 HAL_KEY_SW_1
    482           *
    483           * @return  none
    484           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    485          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    486          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 52
   \   000005   74CC         MOV     A,#-0x34
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    487            (void)shift;  // Intentionally unreferenced parameter
    488            static uint8 LedStatus=0;
    489            char temp;
    490            unsigned char humi;
    491            uint8 GasSenDisplayArr[50];
    492            uint8 PublicFlag=0;              //¸Ã±äÁ¿¼ÇÂ¼ÁËDHT11µÄ×´Ì¬£¨ÊÇ·ñ¶ÁÈ¡³É¹¦)£¬»¹¿ÉÒÔ¼ÇÂ¼ÆäËû×´Ì¬
    493          
    494            uint16 ADC_RegData;
    495            uint8 ADC_Result_RAW[15];
    496            uint8 ADC_Result_ASCII[25];
    497            float ADC_Vol=0;
    498          
    499            uint8 i=0;
    500            uint8 TEMP_ARR[20];
    501          
    502            uint8 Transmit_data[5];      //ÐèÒª·¢ËÍµÄÊý¾Ý
    503            uint16 TGS813GasSenDataSave=0;     //±£´æÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
    504          
    505            PublicFlag =0;             //Çå¿Õ±êÖ¾Î»
   \   00000A   75..00       MOV     ?V0 + 1,#0x0
    506          
    507          
    508            //ADC²âÊÔ½á¹û£¬Ê¹ÓÃÄÚ²¿²Î¿¼µçÑ¹ÊÇ×î×¼È·µÄ2017 2 19
    509            //×¢Òâ¶Å°îÏßµÄÑ¹½µÐèÒª²¹³¥£¬Êµ¼ÊµçÂ·ÖÐ£¬Îñ±Ø²âÊÔ´«¸ÐÆ÷Òý½Åµ½ADCÒý½ÅµÄÑ¹½µ£¬È»ºóÈí¼þ¼ÓÒÔ²¹³¥¡£2017 2 19
    510            if ( keys & HAL_KEY_SW_6 )
   \   00000D   EA           MOV     A,R2
   \   00000E   A2E5         MOV     C,0xE0 /* A   */.5
   \   000010   4003         JC      $+5
   \   000012   02....       LJMP    ??SampleApp_HandleKeys_0 & 0xFFFF
    511            {
    512                 //ÎÂ¶È´«¸ÐÆ÷  DHT11
    513          //    HalUARTWrite(0,"DHT11\r\n",7);
    514              //DHT11¶ÁÈ¡Ê§°Ü£¬¿ÉÄÜDHT11Ëð»µ£¬¿ÉÄÜDHT11±»°Î³ö»òÕßÁ¬ÏßËÉ¶¯
    515              if(dht11_value(&temp , &humi , DHT11_UINT8) != 0)
                                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000015                ; Setup parameters for call to function dht11_value
   \   000015   7902         MOV     R1,#0x2
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   AC82         MOV     R4,DPL
   \   00001F   AD83         MOV     R5,DPH
   \   000021   7401         MOV     A,#0x1
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
   \   00002A   12....       LCALL   ??dht11_value?relay
   \   00002D   E9           MOV     A,R1
   \   00002E   6014         JZ      ??SampleApp_HandleKeys_1
    516              {
    517                temp = DHT11_TEMP_DEFAULT;  //ÉèÖÃÎÂÊª¶ÈÎªÄ¬ÈÏÖµ
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   7419         MOV     A,#0x19
   \   000037   F0           MOVX    @DPTR,A
    518                humi = DHT11_HUMI_DEFAULT;
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   7441         MOV     A,#0x41
   \   000040   F0           MOVX    @DPTR,A
    519                PublicFlag |= (1<<0);     //ÖÃÎ»±êÖ¾Î»
   \   000041   75..01       MOV     ?V0 + 1,#0x1
    520              }
    521          
    522          /* For Test
    523             sprintf(TEMP_ARR,"Temp:%d Humi:%d",temp,humi);
    524              HalUARTWrite(0,TEMP_ARR,strlen(TEMP_ARR));
    525              HalUARTWrite(0,"\r\n",2);
    526          */
    527              //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
    528              ADC_RegData = HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);   //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
   \                     ??SampleApp_HandleKeys_1:
   \   000044                ; Setup parameters for call to function HalAdcRead
   \   000044   7A04         MOV     R2,#0x4
   \   000046   7904         MOV     R1,#0x4
   \   000048   12....       LCALL   ??HalAdcRead?relay
   \   00004B   8A..         MOV     ?V0 + 2,R2
   \   00004D   8B..         MOV     ?V0 + 3,R3
   \   00004F   AE..         MOV     R6,?V0 + 2
   \   000051   AF..         MOV     R7,?V0 + 3
    529              for(i=0;i<10;i++)
   \   000053   75..0A       MOV     ?V0 + 2,#0xa
    530              {
    531                ADC_RegData += HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
    532                ADC_RegData >>=1;                                                    //³ýÒÔ2
   \                     ??SampleApp_HandleKeys_2:
   \   000056                ; Setup parameters for call to function HalAdcRead
   \   000056   7A04         MOV     R2,#0x4
   \   000058   7904         MOV     R1,#0x4
   \   00005A   12....       LCALL   ??HalAdcRead?relay
   \   00005D   8A..         MOV     ?V0 + 4,R2
   \   00005F   8B..         MOV     ?V0 + 5,R3
   \   000061   EE           MOV     A,R6
   \   000062   25..         ADD     A,?V0 + 4
   \   000064   FE           MOV     R6,A
   \   000065   EF           MOV     A,R7
   \   000066   35..         ADDC    A,?V0 + 5
   \   000068   C3           CLR     C
   \   000069   13           RRC     A
   \   00006A   FF           MOV     R7,A
   \   00006B   EE           MOV     A,R6
   \   00006C   13           RRC     A
   \   00006D   FE           MOV     R6,A
    533              }
   \   00006E   15..         DEC     ?V0 + 2
   \   000070   E5..         MOV     A,?V0 + 2
   \   000072   70E2         JNZ     ??SampleApp_HandleKeys_2
    534             //ADC_Vol =  (float)ADC_RegData*3.3/8192 + GasSen_Wire_Compensation;     //»ñÈ¡µçÑ¹Öµ²¢²¹³¥  ²¹³¥µ¼ÏßÑ¹½µ
    535              ADC_Vol = (float)ADC_RegData*3.3/8192;
    536              sprintf(ADC_Result_ASCII,"P0.4:%.4fV",ADC_Vol);    //½«µçÑ¹Öµ×ª»»ÎªASCII
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000074                ; Setup parameters for call to function sprintf
   \   000074   8E..         MOV     ?V0 + 4,R6
   \   000076   8F..         MOV     ?V0 + 5,R7
   \   000078   E4           CLR     A
   \   000079   F5..         MOV     ?V0 + 6,A
   \   00007B   F5..         MOV     ?V0 + 7,A
   \   00007D   78..         MOV     R0,#?V0 + 4
   \   00007F   12....       LCALL   ?UL_TO_FLT
   \   000082   90....       MOV     DPTR,#__Constant_40533333
   \   000085   78..         MOV     R0,#?V0 + 8
   \   000087   12....       LCALL   ?L_MOV_X
   \   00008A   78..         MOV     R0,#?V0 + 4
   \   00008C   79..         MOV     R1,#?V0 + 8
   \   00008E   12....       LCALL   ?FLT_MUL
   \   000091   90....       MOV     DPTR,#__Constant_39000000
   \   000094   78..         MOV     R0,#?V0 + 8
   \   000096   12....       LCALL   ?L_MOV_X
   \   000099   78..         MOV     R0,#?V0 + 4
   \   00009B   79..         MOV     R1,#?V0 + 8
   \   00009D   12....       LCALL   ?FLT_MUL
   \   0000A0   78..         MOV     R0,#?V0 + 4
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000A5   7C..         MOV     R4,#`?<Constant "P0.4:%.4fV">` & 0xff
   \   0000A7   7D..         MOV     R5,#(`?<Constant "P0.4:%.4fV">` >> 8) & 0xff
   \   0000A9   741F         MOV     A,#0x1f
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   AA82         MOV     R2,DPL
   \   0000B0   AB83         MOV     R3,DPH
   \   0000B2   12....       LCALL   ??sprintf?relay
   \   0000B5   7404         MOV     A,#0x4
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
    537              HalUARTWrite(0,ADC_Result_ASCII,strlen(ADC_Result_ASCII));             //½«µçÑ¹Öµ´òÓ¡³öÀ´
                                                            ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \   0000BA                ; Setup parameters for call to function HalUARTWrite
   \   0000BA                ; Setup parameters for call to function strlen
   \   0000BA   741B         MOV     A,#0x1b
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000C2   741B         MOV     A,#0x1b
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL   ?Subroutine2 & 0xFFFF
    538              HalUARTWrite(0,"\r\n\r\n",4);
    539              MicroWait(50);
    540              //Gas sensor»ñÈ¡Êý¾Ý£¬È»ºó´òÓ¡
    541           //   TGS813GasSenDataSave = (uint16)TGS813GetConcentration(ADC_Vol,temp,humi);
    542              /*
    543              sprintf(GasSenDisplayArr,"Gas concertation:%dppm\r\n",TGS813GasSenDataSave);
    544              HalUARTWrite(0,GasSenDisplayArr,strlen(GasSenDisplayArr));
    545              */
    546          /*
    547              if((TGS813GasSen_Flag & (1<<2)) || (TGS813GasSen_Flag & (1<<3)))     //ÎÂÊª¶È´«¸ÐÆ÷²âµÃµÄÎÂ¶È²»ÔÚ·¶Î§
    548              {
    549                PublicFlag |= (1<<1);      //ÖÃÎ»±êÖ¾Î»
    550              }
    551              if((TGS813GasSen_Flag & (1<<4)) || (TGS813GasSen_Flag & (1<<5)))    //ÎÂÊª¶È´«¸ÐÆ÷²âµÃµÄÊª¶È²»ÔÚ·¶Î§
    552              {
    553                PublicFlag |= (1<<2);      //ÖÃÎ»±êÖ¾Î»
    554              }
    555              if((TGS813GasSen_Flag & (1<<0)))                              //Å¨¶ÈÖµµÍÓÚ¼à²âÏÂÏÞ
    556              {
    557                PublicFlag |= (1<<3);      //ÖÃÎ»±êÖ¾Î»
    558              }
    559              if((TGS813GasSen_Flag & (1<<1)))                             //Å¨¶ÈÖµ¸ßÓÚ¼à²âÉÏÏÞ
    560              {
    561                PublicFlag |= (1<<4);      //ÖÃÎ»±êÖ¾Î»
    562              }
    563              */
    564          /*For test    */
    565              sprintf(TEMP_ARR,"GeneralFlag1:%d\r\n",PublicFlag);
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \                     ??CrossCallReturnLabel_1:
   \   0000CA                ; Setup parameters for call to function sprintf
   \   0000CA   85....       MOV     ?V0 + 2,?V0 + 1
   \   0000CD   75..00       MOV     ?V0 + 3,#0x0
   \   0000D0   78..         MOV     R0,#?V0 + 2
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D5   7C..         MOV     R4,#`?<Constant "GeneralFlag1:%d\\r\\n">` & 0xff
   \   0000D7   7D..         MOV     R5,#(`?<Constant "GeneralFlag1:%d\\r\\n">` >> 8) & 0xff
   \   0000D9   7409         MOV     A,#0x9
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
    566              HalUARTWrite(0,TEMP_ARR,strlen(TEMP_ARR));
                                                    ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \   0000E4                ; Setup parameters for call to function HalUARTWrite
   \   0000E4                ; Setup parameters for call to function strlen
   \   0000E4   7407         MOV     A,#0x7
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   AA82         MOV     R2,DPL
   \   0000F1   AB83         MOV     R3,DPH
   \   0000F3   7900         MOV     R1,#0x0
   \   0000F5   12....       LCALL   ??HalUARTWrite?relay
    567          
    568              Transmit_data[0] = (uint8)temp;                           //×°ÈëÎÂ¶È
   \   0000F8   7401         MOV     A,#0x1
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   C0E0         PUSH    A
   \   000100   7402         MOV     A,#0x2
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   D0E0         POP     A
   \   000107   F0           MOVX    @DPTR,A
    569              Transmit_data[1] = (uint8)humi;                           //×°ÈëÊª¶È
   \   000108   85..82       MOV     DPL,?XSP + 0
   \   00010B   85..83       MOV     DPH,?XSP + 1
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   C0E0         PUSH    A
   \   000111   7403         MOV     A,#0x3
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   D0E0         POP     A
   \   000118   F0           MOVX    @DPTR,A
    570              Transmit_data[2] = HI_UINT16(TGS813GasSenDataSave);       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶È¸ß°ËÎ»
   \   000119   7404         MOV     A,#0x4
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   E4           CLR     A
   \   00011F   F0           MOVX    @DPTR,A
    571              Transmit_data[3] = LO_UINT16(TGS813GasSenDataSave);       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶ÈµÍ°ËÎ»
   \   000120   7405         MOV     A,#0x5
   \   000122   12....       LCALL   ?XSTACK_DISP0_8
   \   000125   E4           CLR     A
   \   000126   F0           MOVX    @DPTR,A
    572              Transmit_data[4] =  PublicFlag;                           //½«×Ü±êÖ¾Î»Ð´Èë·¢ËÍ°üÖÐ
   \   000127   7406         MOV     A,#0x6
   \   000129   12....       LCALL   ?XSTACK_DISP0_8
   \   00012C   E5..         MOV     A,?V0 + 1
   \   00012E   F0           MOVX    @DPTR,A
    573          
    574              if ( AF_DataRequest( &SampleApp_Point_To_Point_DstAddr, &SampleApp_epDesc,
    575                               SAMPLEAPP_GAS_SENSOR_CLUSTERID,        //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
    576                               5,                                     //Êý¾ÝÁ¿£¨³¤¶È£©
    577                               Transmit_data,                         //Êý¾ÝÊ×µØÖ·
    578                               &SampleApp_TransID,
    579                               AF_DISCV_ROUTE,
    580                               AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00012F                ; Setup parameters for call to function AF_DataRequest
   \   00012F   75..1E       MOV     ?V0 + 2,#0x1e
   \   000132   78..         MOV     R0,#?V0 + 2
   \   000134   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000137   75....       MOV     ?V0 + 2,#SampleApp_TransID & 0xff
   \   00013A   75....       MOV     ?V0 + 3,#(SampleApp_TransID >> 8) & 0xff
   \   00013D   78..         MOV     R0,#?V0 + 2
   \   00013F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000142   7405         MOV     A,#0x5
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   8582..       MOV     ?V0 + 2,DPL
   \   00014A   8583..       MOV     ?V0 + 3,DPH
   \   00014D   78..         MOV     R0,#?V0 + 2
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   75..05       MOV     ?V0 + 2,#0x5
   \   000155   75..00       MOV     ?V0 + 3,#0x0
   \   000158   78..         MOV     R0,#?V0 + 2
   \   00015A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015D   75..06       MOV     ?V0 + 2,#0x6
   \   000160   78..         MOV     R0,#?V0 + 2
   \   000162   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000165   7920         MOV     R1,#0x20
   \   000167   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000169   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00016B   7A..         MOV     R2,#SampleApp_Point_To_Point_DstAddr & 0xff
   \   00016D   7B..         MOV     R3,#(SampleApp_Point_To_Point_DstAddr >> 8) & 0xff
   \   00016F   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000172   12....       LCALL   ?DEALLOC_XSTACK8
    581              {
    582              }
    583          
    584              for(i=0;i<5;i++)
   \   000175   7E00         MOV     R6,#0x0
    585              {
    586                sprintf(TEMP_ARR,"Transmit_data[%d]:%d\r\n",i,Transmit_data[i]);
                               ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \                     ??SampleApp_HandleKeys_3:
   \   000177   8E82         MOV     DPL,R6
   \   000179   8582..       MOV     ?V0 + 2,DPL
   \   00017C                ; Setup parameters for call to function sprintf
   \   00017C   7402         MOV     A,#0x2
   \   00017E   12....       LCALL   ?XSTACK_DISP0_8
   \   000181   E582         MOV     A,DPL
   \   000183   25..         ADD     A,?V0 + 2
   \   000185   F582         MOV     DPL,A
   \   000187   E583         MOV     A,DPH
   \   000189   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   F5..         MOV     ?V0 + 4,A
   \   00018F   75..00       MOV     ?V0 + 5,#0x0
   \   000192   78..         MOV     R0,#?V0 + 4
   \   000194   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000197   78..         MOV     R0,#?V0 + 2
   \   000199   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019C   7C..         MOV     R4,#`?<Constant "Transmit_data[%d]:%d\\r\\n">` & 0xff
   \   00019E   7D..         MOV     R5,#(`?<Constant "Transmit_data[%d]:%d\\r\\n">` >> 8) & 0xff
   \   0001A0   740B         MOV     A,#0xb
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   AA82         MOV     R2,DPL
   \   0001A7   AB83         MOV     R3,DPH
   \   0001A9   12....       LCALL   ??sprintf?relay
   \   0001AC   7404         MOV     A,#0x4
   \   0001AE   12....       LCALL   ?DEALLOC_XSTACK8
    587                MicroWait(5000);
   \   0001B1                ; Setup parameters for call to function Onboard_wait
   \   0001B1   7A88         MOV     R2,#-0x78
   \   0001B3   7B13         MOV     R3,#0x13
   \   0001B5   12....       LCALL   ??Onboard_wait?relay
    588                HalUARTWrite(0,TEMP_ARR,strlen(TEMP_ARR));
                                                      ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

    static uint8 LedStatus=0;
                 ^
"C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",488  Warning[Pe177]: 
          variable "LedStatus" was declared but never referenced

    uint8 GasSenDisplayArr[50];
          ^
"C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",491  Warning[Pe177]: 
          variable "GasSenDisplayArr" was declared but never referenced

    uint8 ADC_Result_RAW[15];
          ^
"C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",495  Warning[Pe177]: 
          variable "ADC_Result_RAW" was declared but never referenced
   \   0001B8                ; Setup parameters for call to function HalUARTWrite
   \   0001B8                ; Setup parameters for call to function strlen
   \   0001B8   7407         MOV     A,#0x7
   \   0001BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0001C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C3   AA82         MOV     R2,DPL
   \   0001C5   AB83         MOV     R3,DPH
   \   0001C7   7900         MOV     R1,#0x0
   \   0001C9   12....       LCALL   ??HalUARTWrite?relay
    589                MicroWait(5000);
   \   0001CC                ; Setup parameters for call to function Onboard_wait
   \   0001CC   7A88         MOV     R2,#-0x78
   \   0001CE   7B13         MOV     R3,#0x13
   \   0001D0   12....       LCALL   ??Onboard_wait?relay
    590              }
   \   0001D3   0E           INC     R6
   \   0001D4   EE           MOV     A,R6
   \   0001D5   C3           CLR     C
   \   0001D6   9405         SUBB    A,#0x5
   \   0001D8   409D         JC      ??SampleApp_HandleKeys_3
    591          
    592              //ÅÐ¶Ï±êÖ¾Î»£¬²¢¸ø³öÌáÊ¾ÐÅÏ¢
    593              //DHT³ö´í
    594              if(PublicFlag & (1<<0))
   \   0001DA   E5..         MOV     A,?V0 + 1
   \   0001DC   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001DE   500D         JNC     ??SampleApp_HandleKeys_0
    595              {
    596                HalUARTWrite(0,"DHT11 Error!\r\n",strlen("DHT11 Error!\r\n"));
   \   0001E0                ; Setup parameters for call to function HalUARTWrite
   \   0001E0   7C0E         MOV     R4,#0xe
   \   0001E2   7D00         MOV     R5,#0x0
   \   0001E4   7A..         MOV     R2,#`?<Constant "DHT11 Error!\\r\\n">` & 0xff
   \   0001E6   7B..         MOV     R3,#(`?<Constant "DHT11 Error!\\r\\n">` >> 8) & 0xff
   \   0001E8   7900         MOV     R1,#0x0
   \   0001EA   12....       LCALL   ??HalUARTWrite?relay
    597              }
    598              //ÎÂ¶È³¬³ö·¶Î§
    599              if(PublicFlag & (1<<1))
    600              {
    601                HalUARTWrite(0,"Temperature out of rang!\r\n",strlen("Temperature out of rang!\r\n"));
    602                //HalUARTWrite(0,"Temp",strlen("Temp"));
    603              }
    604              //Êª¶È³¬³ö·¶Î§
    605              if(PublicFlag & (1<<2))
    606              {
    607                //HalUARTWrite(0,"Humi",strlen("Humi"));
    608                HalUARTWrite(0,"Humility out of range!\r\n",strlen("Humility out of range!\r\n"));
    609              }
    610              //Å¨¶ÈÖµµÍÓÚ¼à²âÏÂÏÞ
    611              if(PublicFlag & (1<<3))
    612              {
    613                HalUARTWrite(0,"Concentration out of rang!\r\n",strlen("Concentration out of rang!\r\n"));
    614              }
    615              //Å¨¶ÈÖµ¸ßÓÚ¼à²âÉÏÏÞ
    616              if(PublicFlag & (1<<4))
    617              {
    618                HalUARTWrite(0,"Concentration out of rang!\r\n",strlen("Concentration out of rang!\r\n"));
    619              }
    620          
    621          
    622          
    623           /*    ADC_RegData = HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);     //Ñ¡ÔñP0_0,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
    624              //»ñµÃÆ½¾ùÖµ
    625              for(i=0;i<10;i++)
    626              {
    627                ADC_RegData += HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);   //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
    628                ADC_RegData >>=1;                                                    //³ýÒÔ2
    629              }
    630              ADC_Vol = (float)ADC_RegData*3.3/8192;
    631              sprintf(ADC_Result_ASCII,"P0.0:%.4fV",ADC_Vol);    //½«µçÑ¹Öµ×ª»»ÎªASCII
    632              HalUARTWrite(0,ADC_Result_ASCII,strlen(ADC_Result_ASCII));             //½«µçÑ¹Öµ´òÓ¡³öÀ´
    633              HalUARTWrite(0,"\r\n\r\n",4);
    634              MicroWait(50);
    635          
    636              //Gas sensor»ñÈ¡Êý¾Ý£¬²¢´²ºó´òÓ¡
    637              sprintf(GasSenDisplayArr,"Gas concertation:%.0fppm\r\n",TGS813GetConcentration(0.16129f,20,50));
    638              HalUARTWrite(0,GasSenDisplayArr,strlen(GasSenDisplayArr));
    639              */
    640          
    641              /*
    642              //ÎÂ¶È´«¸ÐÆ÷
    643              HalUARTWrite(0,"DHT11\r\n",7);
    644              if(dht11_value(temp , humi , DHT11_STRING) == 0)
    645              {
    646                HalUARTWrite(0,"Temp:",5);
    647                HalUARTWrite(0,temp,2);
    648                HalUARTWrite(0,"C\r\n",3);
    649          
    650                HalUARTWrite(0,"Humi:",5);
    651                HalUARTWrite(0,humi,2);
    652                HalUARTWrite(0,"%\r\n",3);
    653              }
    654              else
    655              {
    656                 HalUARTWrite(0,"Fail\r\n",6);
    657              }
    658              */
    659          /*    HAL_TOGGLE_LED1();
    660              HAL_TOGGLE_LED2();
    661              HAL_TOGGLE_LED3();
    662              LedStatus = (LedStatus==0)? 1:0;
    663              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    664                               SAMPLEAPP_LEDSTATUS_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
    665                               1,                            //Êý¾ÝÁ¿£¨³¤¶È£©
    666                               &LedStatus,//Êý¾ÝÊ×µØÖ·
    667                               &SampleApp_TransID,
    668                               AF_DISCV_ROUTE,
    669                               AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    670              {
    671              }
    672              */
    673            }
    674          }
   \                     ??SampleApp_HandleKeys_0:
   \   0001ED   7434         MOV     A,#0x34
   \   0001EF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F2   7F0C         MOV     R7,#0xc
   \   0001F4   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   7407         MOV     A,#0x7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??sprintf?relay
   \   000007   7402         MOV     A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET
    675          
    676          /*********************************************************************
    677           * LOCAL FUNCTIONS
    678           */
    679          
    680          /*********************************************************************
    681           * @fn      SampleApp_MessageMSGCB
    682           *
    683           * @brief   Data message processor callback.  This function processes
    684           *          any incoming data - probably from other devices.  So, based
    685           *          on cluster ID, perform the intended action.
    686           *
    687           * @param   none
    688           *
    689           * @return  none
    690           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    691          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    692          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 95
   \   000005   74A1         MOV     A,#-0x5f
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    693            uint16 flashTime;
    694            float Channel0_VolSave = 0.0f;
    695            uint8 LedStatus;
    696            uint8 GeneralFlagSave=0;                //±£´æ·¢ËÍ¹ýÀ´µÄ×Ü½ÓÊÕ±êÖ¾Î»
    697            uint8 Dis_arr3[]="ShortAddr: ";
   \   00000E   90....       MOV     DPTR,#`?<Constant "ShortAddr: ">`
   \   000011   C082         PUSH    DPL
   \   000013   742F         MOV     A,#0x2f
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   AC82         MOV     R4,DPL
   \   00001A   AD83         MOV     R5,DPH
   \   00001C   7583..       MOV     DPH,#(`?<Constant "ShortAddr: ">` >> 8) & 0xff
   \   00001F   D082         POP     DPL
   \   000021   740C         MOV     A,#0xc
   \   000023   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    698            uint8 Dis_arr6[]="PanID: ";
   \   000026   90....       MOV     DPTR,#`?<Constant "PanID: ">`
   \   000029   C082         PUSH    DPL
   \   00002B   741C         MOV     A,#0x1c
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   AC82         MOV     R4,DPL
   \   000032   AD83         MOV     R5,DPH
   \   000034   7583..       MOV     DPH,#(`?<Constant "PanID: ">` >> 8) & 0xff
   \   000037   D082         POP     DPL
   \   000039   7408         MOV     A,#0x8
   \   00003B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    699            uint8 Dis_arr12[]="Rssi: ";
   \   00003E   90....       MOV     DPTR,#`?<Constant "Rssi: ">`
   \   000041   C082         PUSH    DPL
   \   000043   7415         MOV     A,#0x15
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   AC82         MOV     R4,DPL
   \   00004A   AD83         MOV     R5,DPH
   \   00004C   7583..       MOV     DPH,#(`?<Constant "Rssi: ">` >> 8) & 0xff
   \   00004F   D082         POP     DPL
   \   000051   7407         MOV     A,#0x7
   \   000053   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    700            uint8 Dis_arr17[]="Cmd.DataLength: ";
   \   000056   90....       MOV     DPTR,#`?<Constant "Cmd.DataLength: ">`
   \   000059   C082         PUSH    DPL
   \   00005B   744E         MOV     A,#0x4e
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   AC82         MOV     R4,DPL
   \   000062   AD83         MOV     R5,DPH
   \   000064   7583..       MOV     DPH,#(`?<Constant "Cmd.DataLength: ">` >> 8) & 0xff
   \   000067   D082         POP     DPL
   \   000069   7411         MOV     A,#0x11
   \   00006B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    701            uint8 Dis_arr18[]="Cmd.Data: ";
   \   00006E   90....       MOV     DPTR,#`?<Constant "Cmd.Data: ">`
   \   000071   C082         PUSH    DPL
   \   000073   7424         MOV     A,#0x24
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   AC82         MOV     R4,DPL
   \   00007A   AD83         MOV     R5,DPH
   \   00007C   7583..       MOV     DPH,#(`?<Constant "Cmd.Data: ">` >> 8) & 0xff
   \   00007F   D082         POP     DPL
   \   000081   740B         MOV     A,#0xb
   \   000083   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    702            uint8 respone_arr[]="The Node Message\r\n";
   \   000086   90....       MOV     DPTR,#`?<Constant "The Node Message\\r\\n">`
   \   000089   C082         PUSH    DPL
   \   00008B   743B         MOV     A,#0x3b
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   AC82         MOV     R4,DPL
   \   000092   AD83         MOV     R5,DPH
   \   000094   7583..       MOV     DPH,#(`?<Constant "The Node Message\\r\\n">` >> 8) & 0xff
   \   000097   D082         POP     DPL
   \   000099   7413         MOV     A,#0x13
   \   00009B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    703            char convert_arr[20];
    704            uint8 i=0;
    705            char count;
    706          
    707          
    708            switch ( pkt->clusterId )
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F5..         MOV     ?V0 + 0,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F5..         MOV     ?V0 + 1,A
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   0000B2   0100         DW        1
   \   0000B4   05           DB        5
   \   0000B5   ....         DW        ??SampleApp_MessageMSGCB_0
   \   0000B7   ....         DW        ??SampleApp_MessageMSGCB_1
   \   0000B9   ....         DW        ??SampleApp_MessageMSGCB_2
   \   0000BB   ....         DW        ??SampleApp_MessageMSGCB_0
   \   0000BD   ....         DW        ??SampleApp_MessageMSGCB_3
   \   0000BF   ....         DW        ??SampleApp_MessageMSGCB_4
   \   0000C1   ....         DW        ??SampleApp_MessageMSGCB_5
    709            {
    710              case SAMPLEAPP_POINT_CLUSTERID:
    711                  HalUARTWrite(0,respone_arr,sizeof(respone_arr)-1);                    //ÏÔÊ¾ÐÅÏ¢
   \                     ??SampleApp_MessageMSGCB_4:
   \   0000C3                ; Setup parameters for call to function HalUARTWrite
   \   0000C3   7C12         MOV     R4,#0x12
   \   0000C5   7D00         MOV     R5,#0x0
   \   0000C7   743B         MOV     A,#0x3b
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   AA82         MOV     R2,DPL
   \   0000CE   AB83         MOV     R3,DPH
   \   0000D0   7900         MOV     R1,#0x0
   \   0000D2   12....       LCALL   ??HalUARTWrite?relay
    712                  //pkt->srcAddr.addr.shortAddr   ¶ÌµØÖ·
    713                  HalUARTWrite(0,Dis_arr3,sizeof(Dis_arr3)-1);                            //ÌáÊ¾ÒÑ¾­ÊÕµ½µã²¥ÐÅÏ¢£¬
   \   0000D5                ; Setup parameters for call to function HalUARTWrite
   \   0000D5   7C0B         MOV     R4,#0xb
   \   0000D7   7D00         MOV     R5,#0x0
   \   0000D9   742F         MOV     A,#0x2f
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   AA82         MOV     R2,DPL
   \   0000E0   AB83         MOV     R3,DPH
   \   0000E2   7900         MOV     R1,#0x0
   \   0000E4   12....       LCALL   ??HalUARTWrite?relay
    714                  sprintf(convert_arr,"0x%x\r\n",pkt->srcAddr.addr.shortAddr) ;           //×ª»»Îª×Ö·û´®
   \   0000E7   75....       MOV     ?V0 + 0,#`?<Constant "0x%x\\r\\n">` & 0xff
   \   0000EA   75....       MOV     ?V0 + 1,#(`?<Constant "0x%x\\r\\n">` >> 8) & 0xff
   \   0000ED                ; Setup parameters for call to function sprintf
   \   0000ED   8E82         MOV     DPL,R6
   \   0000EF   8F83         MOV     DPH,R7
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000FA   AC..         MOV     R4,?V0 + 0
   \   0000FC   AD..         MOV     R5,?V0 + 1
   \   0000FE   7403         MOV     A,#0x3
   \   000100   12....       LCALL   ?XSTACK_DISP0_8
   \   000103   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000106   12....       LCALL   ?DEALLOC_XSTACK8
    715                  HalUARTWrite(0,(unsigned char*)convert_arr,strlen(convert_arr));        //Êä³ö
   \   000109                ; Setup parameters for call to function HalUARTWrite
   \   000109                ; Setup parameters for call to function strlen
   \   000109   7401         MOV     A,#0x1
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   AA82         MOV     R2,DPL
   \   000116   AB83         MOV     R3,DPH
   \   000118   7900         MOV     R1,#0x0
   \   00011A   12....       LCALL   ??HalUARTWrite?relay
    716                  //pkt->srcAddr.panId        PANID
    717                  HalUARTWrite(0,Dis_arr6,sizeof(Dis_arr6)-1);                            //ÌáÊ¾ÒÑ¾­ÊÕµ½µã²¥ÐÅÏ¢£¬
   \   00011D                ; Setup parameters for call to function HalUARTWrite
   \   00011D   7C07         MOV     R4,#0x7
   \   00011F   7D00         MOV     R5,#0x0
   \   000121   741C         MOV     A,#0x1c
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   AA82         MOV     R2,DPL
   \   000128   AB83         MOV     R3,DPH
   \   00012A   7900         MOV     R1,#0x0
   \   00012C   12....       LCALL   ??HalUARTWrite?relay
    718                  sprintf(convert_arr,"0x%x\r\n",pkt->srcAddr.panId) ;                      //×ª»»Îª×Ö·û´®
   \   00012F                ; Setup parameters for call to function sprintf
   \   00012F   EE           MOV     A,R6
   \   000130   2410         ADD     A,#0x10
   \   000132   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000135   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000138   AC..         MOV     R4,?V0 + 0
   \   00013A   AD..         MOV     R5,?V0 + 1
   \   00013C   7403         MOV     A,#0x3
   \   00013E   12....       LCALL   ?XSTACK_DISP0_8
   \   000141   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000144   12....       LCALL   ?DEALLOC_XSTACK8
    719                  HalUARTWrite(0,(unsigned char*)convert_arr,strlen(convert_arr));        //Êä³ö
   \   000147                ; Setup parameters for call to function HalUARTWrite
   \   000147                ; Setup parameters for call to function strlen
   \   000147   7401         MOV     A,#0x1
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00014F   12....       LCALL   ?XSTACK_DISP0_8
   \   000152   AA82         MOV     R2,DPL
   \   000154   AB83         MOV     R3,DPH
   \   000156   12....       LCALL   ?Subroutine5 & 0xFFFF
    720                  //pkt->->rssi  ÐÅºÅÇ¿¶È
    721                  HalUARTWrite(0,Dis_arr12,sizeof(Dis_arr12)-1);                            //ÌáÊ¾ÒÑ¾­ÊÕµ½µã²¥ÐÅÏ¢£¬
   \                     ??CrossCallReturnLabel_59:
   \   000159   7415         MOV     A,#0x15
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   AA82         MOV     R2,DPL
   \   000160   AB83         MOV     R3,DPH
   \   000162   7900         MOV     R1,#0x0
   \   000164   12....       LCALL   ??HalUARTWrite?relay
    722                  sprintf(convert_arr,"%ddBm\r\n",pkt->rssi) ;                              //×ª»»Îª×Ö·û´®
   \   000167                ; Setup parameters for call to function sprintf
   \   000167   EE           MOV     A,R6
   \   000168   2418         ADD     A,#0x18
   \   00016A   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   F5..         MOV     ?V0 + 0,A
   \   000170   33           RLC     A
   \   000171   95E0         SUBB    A,0xE0 /* A   */
   \   000173   F5..         MOV     ?V0 + 1,A
   \   000175   78..         MOV     R0,#?V0 + 0
   \   000177   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017A   7C..         MOV     R4,#`?<Constant "%ddBm\\r\\n">` & 0xff
   \   00017C   7D..         MOV     R5,#(`?<Constant "%ddBm\\r\\n">` >> 8) & 0xff
   \   00017E   7403         MOV     A,#0x3
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000186   12....       LCALL   ?DEALLOC_XSTACK8
    723                  HalUARTWrite(0,(unsigned char*)convert_arr,strlen(convert_arr));          //Êä³ö
   \   000189                ; Setup parameters for call to function HalUARTWrite
   \   000189                ; Setup parameters for call to function strlen
   \   000189   7401         MOV     A,#0x1
   \   00018B   12....       LCALL   ?XSTACK_DISP0_8
   \   00018E   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   AA82         MOV     R2,DPL
   \   000196   AB83         MOV     R3,DPH
   \   000198   7900         MOV     R1,#0x0
   \   00019A   12....       LCALL   ??HalUARTWrite?relay
    724                  //pkt->    Êý¾Ý³¤¶È
    725                  HalUARTWrite(0,Dis_arr17,sizeof(Dis_arr17)-1);                            //ÌáÊ¾ÒÑ¾­ÊÕµ½µã²¥ÐÅÏ¢£¬
   \   00019D                ; Setup parameters for call to function HalUARTWrite
   \   00019D   7C10         MOV     R4,#0x10
   \   00019F   7D00         MOV     R5,#0x0
   \   0001A1   744E         MOV     A,#0x4e
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   AA82         MOV     R2,DPL
   \   0001A8   AB83         MOV     R3,DPH
   \   0001AA   7900         MOV     R1,#0x0
   \   0001AC   12....       LCALL   ??HalUARTWrite?relay
    726                  sprintf(convert_arr,"%d\r\n",pkt->cmd.DataLength) ;                       //×ª»»Îª×Ö·û´®
   \   0001AF   EE           MOV     A,R6
   \   0001B0   2420         ADD     A,#0x20
   \   0001B2   F5..         MOV     ?V0 + 0,A
   \   0001B4   EF           MOV     A,R7
   \   0001B5   3400         ADDC    A,#0x0
   \   0001B7   F5..         MOV     ?V0 + 1,A
   \   0001B9                ; Setup parameters for call to function sprintf
   \   0001B9   85..82       MOV     DPL,?V0 + 0
   \   0001BC   F583         MOV     DPH,A
   \   0001BE   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001C1   7C..         MOV     R4,#`?<Constant "%d\\r\\n">` & 0xff
   \   0001C3   7D..         MOV     R5,#(`?<Constant "%d\\r\\n">` >> 8) & 0xff
   \   0001C5   7403         MOV     A,#0x3
   \   0001C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CA   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0001CD   12....       LCALL   ?DEALLOC_XSTACK8
    727                  HalUARTWrite(0,(unsigned char*)convert_arr,strlen(convert_arr));          //Êä³ö
   \   0001D0                ; Setup parameters for call to function HalUARTWrite
   \   0001D0                ; Setup parameters for call to function strlen
   \   0001D0   7401         MOV     A,#0x1
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DB   AA82         MOV     R2,DPL
   \   0001DD   AB83         MOV     R3,DPH
   \   0001DF   7900         MOV     R1,#0x0
   \   0001E1   12....       LCALL   ??HalUARTWrite?relay
    728                  //pkt->    Êý¾Ý
    729                  HalUARTWrite(0,Dis_arr18,sizeof(Dis_arr18)-1);                            //ÌáÊ¾ÒÑ¾­ÊÕµ½µã²¥ÐÅÏ¢£¬
   \   0001E4                ; Setup parameters for call to function HalUARTWrite
   \   0001E4   7C0A         MOV     R4,#0xa
   \   0001E6   7D00         MOV     R5,#0x0
   \   0001E8   7424         MOV     A,#0x24
   \   0001EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001ED   AA82         MOV     R2,DPL
   \   0001EF   AB83         MOV     R3,DPH
   \   0001F1   7900         MOV     R1,#0x0
   \   0001F3   12....       LCALL   ??HalUARTWrite?relay
    730                  HalUARTWrite(0,pkt->cmd.Data,pkt->cmd.DataLength);                        //Êä³ö
   \   0001F6                ; Setup parameters for call to function HalUARTWrite
   \   0001F6   85..82       MOV     DPL,?V0 + 0
   \   0001F9   85..83       MOV     DPH,?V0 + 1
   \   0001FC   E0           MOVX    A,@DPTR
   \   0001FD   FC           MOV     R4,A
   \   0001FE   A3           INC     DPTR
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   FD           MOV     R5,A
   \   000201   12....       LCALL   ?Subroutine11 & 0xFFFF
    731                  HalUARTWrite(0,"\r\n\r\n",4);                                                 //»»ÐÐ£¬±ãÓÚ¹Û²ì
   \                     ??CrossCallReturnLabel_19:
   \   000204                ; Setup parameters for call to function HalUARTWrite
   \   000204   7C04         MOV     R4,#0x4
   \   000206   7D00         MOV     R5,#0x0
   \   000208   7A..         MOV     R2,#`?<Constant "\\r\\n\\r\\n">` & 0xff
   \   00020A   7B..         MOV     R3,#(`?<Constant "\\r\\n\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_MessageMSGCB_6:
   \   00020C   7900         MOV     R1,#0x0
   \   00020E   12....       LCALL   ??HalUARTWrite?relay
    732                  break;
   \   000211   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    733              case SAMPLEAPP_PERIODIC_CLUSTERID:
    734                //ÔÚÕâÀï¼ÓÈëÄãÏëÔõÑù´¦ÀíÖÜÆÚ¹ã²¥·¢ËÍ¹ýÀ´µÄÊý¾ÝµÄ³ÌÐò
    735                HalUARTWrite(0,"I get data\n",1);//ÌáÊ¾ÒÑ¾­½øÈëÁËÕâ¸öº¯Êý
   \                     ??SampleApp_MessageMSGCB_1:
   \   000214                ; Setup parameters for call to function HalUARTWrite
   \   000214   7C01         MOV     R4,#0x1
   \   000216   7D00         MOV     R5,#0x0
   \   000218   7A..         MOV     R2,#`?<Constant "I get data\\n">` & 0xff
   \   00021A   7B..         MOV     R3,#(`?<Constant "I get data\\n">` >> 8) & 0xff
   \   00021C   7900         MOV     R1,#0x0
   \   00021E   12....       LCALL   ??HalUARTWrite?relay
    736                HalUARTWrite(0,(pkt->cmd.Data),12); //½«½ÓÊÕµ½µÄÊý¾Ý´òÓ¡³öÀ´
   \   000221                ; Setup parameters for call to function HalUARTWrite
   \   000221   7C0C         MOV     R4,#0xc
   \   000223   7D00         MOV     R5,#0x0
   \   000225   12....       LCALL   ?Subroutine11 & 0xFFFF
    737                HalUARTWrite(0,"\n",1);//»»ÐÐ£¬±ãÓÚ¹Û²ì
   \                     ??CrossCallReturnLabel_20:
   \   000228                ; Setup parameters for call to function HalUARTWrite
   \   000228   7C01         MOV     R4,#0x1
   \   00022A   7D00         MOV     R5,#0x0
   \   00022C   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00022E   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000230   80DA         SJMP    ??SampleApp_MessageMSGCB_6
    738                break;
    739          
    740              case SAMPLEAPP_FLASH_CLUSTERID:
    741                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    742                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_2:
   \   000232   EE           MOV     A,R6
   \   000233   2422         ADD     A,#0x22
   \   000235   FE           MOV     R6,A
   \   000236   EF           MOV     A,R7
   \   000237   3400         ADDC    A,#0x0
   \   000239   FF           MOV     R7,A
   \   00023A   8E82         MOV     DPL,R6
   \   00023C   8F83         MOV     DPH,R7
   \   00023E   E0           MOVX    A,@DPTR
   \   00023F   F8           MOV     R0,A
   \   000240   A3           INC     DPTR
   \   000241   E0           MOVX    A,@DPTR
   \   000242   F9           MOV     R1,A
   \   000243                ; Setup parameters for call to function HalLedBlink
   \   000243   8882         MOV     DPL,R0
   \   000245   8983         MOV     DPH,R1
   \   000247   A3           INC     DPTR
   \   000248   E0           MOVX    A,@DPTR
   \   000249   FA           MOV     R2,A
   \   00024A   8882         MOV     DPL,R0
   \   00024C   8983         MOV     DPH,R1
   \   00024E   A3           INC     DPTR
   \   00024F   A3           INC     DPTR
   \   000250   E0           MOVX    A,@DPTR
   \   000251   F9           MOV     R1,A
   \   000252   EA           MOV     A,R2
   \   000253   2400         ADD     A,#0x0
   \   000255   F5..         MOV     ?V0 + 0,A
   \   000257   E4           CLR     A
   \   000258   39           ADDC    A,R1
   \   000259   F5..         MOV     ?V0 + 1,A
   \   00025B   7402         MOV     A,#0x2
   \   00025D   78..         MOV     R0,#?V0 + 0
   \   00025F   12....       LCALL   ?US_SHR
   \   000262   AC..         MOV     R4,?V0 + 0
   \   000264   AD..         MOV     R5,?V0 + 1
   \   000266   7B32         MOV     R3,#0x32
   \   000268   7A04         MOV     R2,#0x4
   \   00026A   7908         MOV     R1,#0x8
   \   00026C   12....       LCALL   ??HalLedBlink?relay
    743                break;
   \   00026F   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    744              //ÎÞÏßµãµÆ
    745              case SAMPLEAPP_LEDSTATUS_CLUSTERID:
    746                LedStatus =  *(pkt->cmd.Data) +'0';
   \                     ??SampleApp_MessageMSGCB_3:
   \   000272   EE           MOV     A,R6
   \   000273   2422         ADD     A,#0x22
   \   000275   FE           MOV     R6,A
   \   000276   EF           MOV     A,R7
   \   000277   3400         ADDC    A,#0x0
   \   000279   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00027C   2430         ADD     A,#0x30
   \   00027E   85..82       MOV     DPL,?XSP + 0
   \   000281   85..83       MOV     DPH,?XSP + 1
   \   000284   F0           MOVX    @DPTR,A
    747                HalUARTWrite(0,&LedStatus,1);       //½«½ÓÊÕµ½µÄÊý¾Ý´òÓ¡³öÀ´
   \   000285                ; Setup parameters for call to function HalUARTWrite
   \   000285   7C01         MOV     R4,#0x1
   \   000287   7D00         MOV     R5,#0x0
   \   000289   AA82         MOV     R2,DPL
   \   00028B   AB83         MOV     R3,DPH
   \   00028D   7900         MOV     R1,#0x0
   \   00028F   12....       LCALL   ??HalUARTWrite?relay
    748                if(*(pkt->cmd.Data))
   \   000292   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000295   6005         JZ      ??SampleApp_MessageMSGCB_7
    749                 HAL_TURN_ON_LED1();
   \   000297   C290         CLR     0x90.0
   \   000299   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    750                else
    751                 HAL_TURN_OFF_LED1();
   \                     ??SampleApp_MessageMSGCB_7:
   \   00029C   D290         SETB    0x90.0
   \   00029E   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    752                break;
    753          
    754            case SAMPLEAPP_GAS_SENSOR_CLUSTERID:
    755                i=0;                                                           //ÓÃÓÚ¼ÇÂ¼Êý¾Ý°üµÄ¼ÆÊý×Ó
    756                char EDid=0;
    757                EDid=(pkt->cmd.Data)[13];
   \                     ??SampleApp_MessageMSGCB_5:
   \   0002A1   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0002A4   240D         ADD     A,#0xd
   \   0002A6   F8           MOV     R0,A
   \   0002A7   A3           INC     DPTR
   \   0002A8   E0           MOVX    A,@DPTR
   \   0002A9   3400         ADDC    A,#0x0
   \   0002AB   F9           MOV     R1,A
   \   0002AC   8882         MOV     DPL,R0
   \   0002AE   8983         MOV     DPH,R1
   \   0002B0   E0           MOVX    A,@DPTR
   \   0002B1   F8           MOV     R0,A
    758                if(EDid==1&&contin==0)
   \   0002B2   7401         MOV     A,#0x1
   \   0002B4   68           XRL     A,R0
   \   0002B5   6003         JZ      $+5
   \   0002B7   02....       LJMP    ??SampleApp_MessageMSGCB_8 & 0xFFFF
   \   0002BA   90....       MOV     DPTR,#contin
   \   0002BD   E0           MOVX    A,@DPTR
   \   0002BE   6003         JZ      $+5
   \   0002C0   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    759                {
    760                    //ÏÔÊ¾ÊÕµ½µÄÊý¾ÝÁ¿
    761                //   sprintf(convert_arr,"DataLength:%d\r\n",pkt->cmd.DataLength);
    762                //   HalUARTWrite(0,convert_arr,strlen(convert_arr));
    763                
    764                    //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
    765                    sprintf(convert_arr,"TEMP£º%d C\r\n",(pkt->cmd.Data)[i]),i++;
   \   0002C3   EE           MOV     A,R6
   \   0002C4   2422         ADD     A,#0x22
   \   0002C6   F8           MOV     R0,A
   \   0002C7   EF           MOV     A,R7
   \   0002C8   3400         ADDC    A,#0x0
   \   0002CA   F9           MOV     R1,A
   \   0002CB   E8           MOV     A,R0
   \   0002CC   FE           MOV     R6,A
   \   0002CD   E9           MOV     A,R1
   \   0002CE   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0002D1   F5..         MOV     ?V0 + 0,A
   \   0002D3   75..00       MOV     ?V0 + 1,#0x0
   \   0002D6   78..         MOV     R0,#?V0 + 0
   \   0002D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002DB   7C..         MOV     R4,#`?<Constant "TEMP\\243\\272%d C\\r\\n">` & 0xff
   \   0002DD   7D..         MOV     R5,#(`?<Constant "TEMP\\243\\272%d C\\r\\n">` >> 8) & 0xff
   \   0002DF   7403         MOV     A,#0x3
   \   0002E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E4   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0002E7   12....       LCALL   ?DEALLOC_XSTACK8
    766                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0002EA                ; Setup parameters for call to function HalUARTWrite
   \   0002EA                ; Setup parameters for call to function strlen
   \   0002EA   7401         MOV     A,#0x1
   \   0002EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EF   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0002F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F5   12....       LCALL   ?Subroutine4 & 0xFFFF
    767                    sprintf(convert_arr,"HUMI£º%dRH\r\n",(pkt->cmd.Data)[i]),i++;
   \                     ??CrossCallReturnLabel_4:
   \   0002F8   E0           MOVX    A,@DPTR
   \   0002F9   F5..         MOV     ?V0 + 0,A
   \   0002FB   78..         MOV     R0,#?V0 + 0
   \   0002FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000300   7C..         MOV     R4,#`?<Constant "HUMI\\243\\272%dRH\\r\\n">` & 0xff
   \   000302   7D..         MOV     R5,#(`?<Constant "HUMI\\243\\272%dRH\\r\\n">` >> 8) & 0xff
   \   000304   7403         MOV     A,#0x3
   \   000306   12....       LCALL   ?XSTACK_DISP0_8
   \   000309   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00030C   12....       LCALL   ?DEALLOC_XSTACK8
    768                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

    float Channel0_VolSave = 0.0f;
          ^
"C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",694  Warning[Pe177]: 
          variable "Channel0_VolSave" was declared but never referenced

    uint8 GeneralFlagSave=0;                //±£´æ·¢ËÍ¹ýÀ´µÄ×Ü½ÓÊÕ±êÖ¾Î»
          ^
"C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",696  Warning[Pe177]: 
          variable "GeneralFlagSave" was declared but never referenced
   \   00030F                ; Setup parameters for call to function HalUARTWrite
   \   00030F                ; Setup parameters for call to function strlen
   \   00030F   7401         MOV     A,#0x1
   \   000311   12....       LCALL   ?XSTACK_DISP0_8
   \   000314   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000317   12....       LCALL   ?XSTACK_DISP0_8
   \   00031A   12....       LCALL   ?Subroutine4 & 0xFFFF
    769                
    770                    //ÅÐ¶Ï±êÖ¾Î»£¬²¢¸ø³öÌáÊ¾ÐÅÏ¢
    771                    //DHT³ö´í
    772                    if((pkt->cmd.Data)[i++] & (1<<0))
   \                     ??CrossCallReturnLabel_5:
   \   00031D   A3           INC     DPTR
   \   00031E   E0           MOVX    A,@DPTR
   \   00031F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000321   500D         JNC     ??SampleApp_MessageMSGCB_9
    773                    {
    774                      HalUARTWrite(0,"DHT11 Error!\r\n",strlen("DHT11 Error!\r\n"));
   \   000323                ; Setup parameters for call to function HalUARTWrite
   \   000323   7C0E         MOV     R4,#0xe
   \   000325   7D00         MOV     R5,#0x0
   \   000327   7A..         MOV     R2,#`?<Constant "DHT11 Error!\\r\\n">` & 0xff
   \   000329   7B..         MOV     R3,#(`?<Constant "DHT11 Error!\\r\\n">` >> 8) & 0xff
   \   00032B   7900         MOV     R1,#0x0
   \   00032D   12....       LCALL   ??HalUARTWrite?relay
    775                    }
    776                
    777                #if (defined Channel_0_GasSensor_Busy)
    778                    //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
    779                    Channel0_VolSave =  (float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])/1000;
    780                    sprintf(convert_arr,"vol0£º%.3fV\r\n",Channel0_VolSave),i+=2;
    781                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    782                    if(Channel0_VolSave < TGS822_Safe)
    783                      sprintf(convert_arr,"Level: Ã»ÓÐÎÛÈ¾\r\n");
    784                    else if(Channel0_VolSave < TGS822_Mildly)
    785                      sprintf(convert_arr,"Level: Çá¶ÈÎÛÈ¾\r\n");
    786                    else if(Channel0_VolSave < TGS822_Moderate)
    787                      sprintf(convert_arr,"Level: ÖÐ¶ÈÎÛÈ¾\r\n");
    788                    else if(Channel0_VolSave < TGS822_Severe)
    789                      sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
    790                    else
    791                      sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
    792                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    793                    //    sprintf(convert_arr,"concen0£º%dppm\r\n",BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])),i+=2;
    794                //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    795                //    sprintf(convert_arr,"Flag0:0x%x\r\n",(pkt->cmd.Data)[i]),i++;
    796                //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    797                #endif
    798                
    799                #if (defined Channel_1_GasSensor_Busy)
    800                    //Í¨µÀ1£¨P0.4£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
    801                    sprintf(convert_arr,"vol1£º%.3fV\r\n",(float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])/1000),i+=2;
    802                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    803                //    sprintf(convert_arr,"concen1£º%dppm\r\n",BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])),i+=2;
    804                //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    805                //    sprintf(convert_arr,"Flag1:0x%x\r\n",(pkt->cmd.Data)[i]),i++;
    806                //   HalUARTWrite(0,convert_arr,strlen(convert_arr));
    807                #endif
    808                    
    809                    HalUARTWrite(0,"\r\n",2);
   \                     ??SampleApp_MessageMSGCB_9:
   \   000330                ; Setup parameters for call to function HalUARTWrite
   \   000330   7C02         MOV     R4,#0x2
   \   000332   7D00         MOV     R5,#0x0
   \   000334   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   000336   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000338   7900         MOV     R1,#0x0
   \   00033A   12....       LCALL   ??HalUARTWrite?relay
    810                    EDid=0;
    811                    contin=1;
   \   00033D   90....       MOV     DPTR,#contin
   \   000340   7401         MOV     A,#0x1
   \   000342   02....       LJMP    ??SampleApp_MessageMSGCB_10 & 0xFFFF
    812                }
    813                if(EDid==2&&contin==1)
   \                     ??SampleApp_MessageMSGCB_8:
   \   000345   7402         MOV     A,#0x2
   \   000347   68           XRL     A,R0
   \   000348   704A         JNZ     ??SampleApp_MessageMSGCB_11
   \   00034A   90....       MOV     DPTR,#contin
   \   00034D   E0           MOVX    A,@DPTR
   \   00034E   6401         XRL     A,#0x1
   \   000350   6003         JZ      $+5
   \   000352   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    814                {
    815                  for(count=0;count<6;count++)
   \   000355   7A00         MOV     R2,#0x0
    816                  {
    817                    send_data_PM25[count]=(pkt->cmd.Data)[count];
   \                     ??SampleApp_MessageMSGCB_12:
   \   000357   12....       LCALL   ?Subroutine10 & 0xFFFF
    818                  }
   \                     ??CrossCallReturnLabel_17:
   \   00035A   C0E0         PUSH    A
   \   00035C   74..         MOV     A,#send_data_PM25 & 0xff
   \   00035E   28           ADD     A,R0
   \   00035F   F582         MOV     DPL,A
   \   000361   74..         MOV     A,#(send_data_PM25 >> 8) & 0xff
   \   000363   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000366   D0E0         POP     A
   \   000368   F0           MOVX    @DPTR,A
   \   000369   0A           INC     R2
   \   00036A   EA           MOV     A,R2
   \   00036B   C3           CLR     C
   \   00036C   9406         SUBB    A,#0x6
   \   00036E   40E7         JC      ??SampleApp_MessageMSGCB_12
    819                  HalUARTWrite(0, "PM2.5:", 6);
   \   000370                ; Setup parameters for call to function HalUARTWrite
   \   000370   7C06         MOV     R4,#0x6
   \   000372   7D00         MOV     R5,#0x0
   \   000374   7A..         MOV     R2,#`?<Constant "PM2.5:">` & 0xff
   \   000376   7B..         MOV     R3,#(`?<Constant "PM2.5:">` >> 8) & 0xff
   \   000378   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    820                 // HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    821                  HalUARTWrite(0, send_data_PM25, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \                     ??CrossCallReturnLabel_61:
   \   00037B   7A..         MOV     R2,#send_data_PM25 & 0xff
   \   00037D   7B..         MOV     R3,#(send_data_PM25 >> 8) & 0xff
   \   00037F   7900         MOV     R1,#0x0
   \   000381   12....       LCALL   ??HalUARTWrite?relay
    822                  HalUARTWrite(0, "ug/m3", 5);
   \   000384                ; Setup parameters for call to function HalUARTWrite
   \   000384   7C05         MOV     R4,#0x5
   \   000386   7D00         MOV     R5,#0x0
   \   000388   7A..         MOV     R2,#`?<Constant "ug/m3">` & 0xff
   \   00038A   7B..         MOV     R3,#(`?<Constant "ug/m3">` >> 8) & 0xff
   \   00038C   12....       LCALL   ?Subroutine3 & 0xFFFF
    823                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    824                  EDid=0;
    825                  contin=2;
    826                 // contin=0;
    827                }
   \                     ??CrossCallReturnLabel_2:
   \   00038F   7402         MOV     A,#0x2
   \   000391   02....       LJMP    ??SampleApp_MessageMSGCB_10 & 0xFFFF
    828                
    829                if(EDid==3&&contin==2)
   \                     ??SampleApp_MessageMSGCB_11:
   \   000394   7403         MOV     A,#0x3
   \   000396   68           XRL     A,R0
   \   000397   6003         JZ      $+5
   \   000399   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
   \   00039C   90....       MOV     DPTR,#contin
   \   00039F   E0           MOVX    A,@DPTR
   \   0003A0   6402         XRL     A,#0x2
   \   0003A2   6003         JZ      $+5
   \   0003A4   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    830                {
    831                   for(count=0;count<=6;count++)
   \   0003A7   7A00         MOV     R2,#0x0
    832                  {
    833                    send_data_CO[count]=(pkt->cmd.Data)[count];
   \                     ??SampleApp_MessageMSGCB_13:
   \   0003A9   12....       LCALL   ?Subroutine10 & 0xFFFF
    834                  }
   \                     ??CrossCallReturnLabel_18:
   \   0003AC   C0E0         PUSH    A
   \   0003AE   74..         MOV     A,#send_data_CO & 0xff
   \   0003B0   28           ADD     A,R0
   \   0003B1   F582         MOV     DPL,A
   \   0003B3   74..         MOV     A,#(send_data_CO >> 8) & 0xff
   \   0003B5   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0003B8   D0E0         POP     A
   \   0003BA   F0           MOVX    @DPTR,A
   \   0003BB   0A           INC     R2
   \   0003BC   EA           MOV     A,R2
   \   0003BD   C3           CLR     C
   \   0003BE   9407         SUBB    A,#0x7
   \   0003C0   40E7         JC      ??SampleApp_MessageMSGCB_13
    835                   for(count=0;count<=5;count++)
   \   0003C2   7A00         MOV     R2,#0x0
    836                  {
    837                    send_data_HCL[count]=(pkt->cmd.Data)[count+7];
   \                     ??SampleApp_MessageMSGCB_14:
   \   0003C4   8A82         MOV     DPL,R2
   \   0003C6   A882         MOV     R0,DPL
   \   0003C8   12....       LCALL   ?Subroutine14 & 0xFFFF
    838                  }
   \                     ??CrossCallReturnLabel_30:
   \   0003CB   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0003CE   A3           INC     DPTR
   \   0003CF   A3           INC     DPTR
   \   0003D0   A3           INC     DPTR
   \   0003D1   A3           INC     DPTR
   \   0003D2   A3           INC     DPTR
   \   0003D3   A3           INC     DPTR
   \   0003D4   A3           INC     DPTR
   \   0003D5   E0           MOVX    A,@DPTR
   \   0003D6   C0E0         PUSH    A
   \   0003D8   74..         MOV     A,#send_data_HCL & 0xff
   \   0003DA   28           ADD     A,R0
   \   0003DB   F582         MOV     DPL,A
   \   0003DD   74..         MOV     A,#(send_data_HCL >> 8) & 0xff
   \   0003DF   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0003E2   D0E0         POP     A
   \   0003E4   F0           MOVX    @DPTR,A
   \   0003E5   0A           INC     R2
   \   0003E6   EA           MOV     A,R2
   \   0003E7   C3           CLR     C
   \   0003E8   9406         SUBB    A,#0x6
   \   0003EA   40D8         JC      ??SampleApp_MessageMSGCB_14
    839                  HalUARTWrite(0, "CO:", 3);
   \   0003EC                ; Setup parameters for call to function HalUARTWrite
   \   0003EC   7C03         MOV     R4,#0x3
   \   0003EE   7D00         MOV     R5,#0x0
   \   0003F0   7A..         MOV     R2,#`?<Constant "CO:">` & 0xff
   \   0003F2   7B..         MOV     R3,#(`?<Constant "CO:">` >> 8) & 0xff
   \   0003F4   12....       LCALL   ??HalUARTWrite?relay
    840                  HalUARTWrite(0, send_data_CO, 7); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   0003F7                ; Setup parameters for call to function HalUARTWrite
   \   0003F7   7C07         MOV     R4,#0x7
   \   0003F9   7D00         MOV     R5,#0x0
   \   0003FB   7A..         MOV     R2,#send_data_CO & 0xff
   \   0003FD   7B..         MOV     R3,#(send_data_CO >> 8) & 0xff
   \   0003FF   7900         MOV     R1,#0x0
   \   000401   12....       LCALL   ??HalUARTWrite?relay
    841                  HalUARTWrite(0, "ppm", 3);
   \   000404   75....       MOV     ?V0 + 0,#`?<Constant "ppm">` & 0xff
   \   000407   75....       MOV     ?V0 + 1,#(`?<Constant "ppm">` >> 8) & 0xff
   \   00040A                ; Setup parameters for call to function HalUARTWrite
   \   00040A   7C03         MOV     R4,#0x3
   \   00040C   7D00         MOV     R5,#0x0
   \   00040E   AA..         MOV     R2,?V0 + 0
   \   000410   AB..         MOV     R3,?V0 + 1
   \   000412   12....       LCALL   ?Subroutine18 & 0xFFFF
    842                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    843                  
    844                  HalUARTWrite(0, "HCL:", 4);
   \                     ??CrossCallReturnLabel_37:
   \   000415                ; Setup parameters for call to function HalUARTWrite
   \   000415   7C04         MOV     R4,#0x4
   \   000417   7D00         MOV     R5,#0x0
   \   000419   7A..         MOV     R2,#`?<Constant "HCL:">` & 0xff
   \   00041B   7B..         MOV     R3,#(`?<Constant "HCL:">` >> 8) & 0xff
   \   00041D   12....       LCALL   ?Subroutine5 & 0xFFFF
    845                  HalUARTWrite(0, send_data_HCL, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \                     ??CrossCallReturnLabel_60:
   \   000420   7A..         MOV     R2,#send_data_HCL & 0xff
   \   000422   7B..         MOV     R3,#(send_data_HCL >> 8) & 0xff
   \   000424   7900         MOV     R1,#0x0
   \   000426   12....       LCALL   ??HalUARTWrite?relay
    846                  HalUARTWrite(0, "ppm", 3);
   \   000429                ; Setup parameters for call to function HalUARTWrite
   \   000429   7C03         MOV     R4,#0x3
   \   00042B   7D00         MOV     R5,#0x0
   \   00042D   AA..         MOV     R2,?V0 + 0
   \   00042F   AB..         MOV     R3,?V0 + 1
   \   000431   12....       LCALL   ?Subroutine3 & 0xFFFF
    847                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    848                  EDid=0;
    849                  contin=0;
    850                }
    851              break;
    852            }
   \                     ??CrossCallReturnLabel_3:
   \   000434   E4           CLR     A
   \                     ??SampleApp_MessageMSGCB_10:
   \   000435   F0           MOVX    @DPTR,A
    853          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000436   745F         MOV     A,#0x5f
   \   000438   02....       LJMP    ??Subroutine26_0 & 0xFFFF
   \   00043B                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine23_0
   \   000003                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007   7900         MOV     R1,#0x0
   \   000009   12....       LCALL   ??HalUARTWrite?relay
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8A82         MOV     DPL,R2
   \   000002   A882         MOV     R0,DPL
   \   000004   7900         MOV     R1,#0x0
   \   000006   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000009   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   28           ADD     A,R0
   \   000001   FB           MOV     R3,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   3400         ADDC    A,#0x0
   \   000006   8B82         MOV     DPL,R3
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   FF           MOV     R7,A
   \   000001                ; Setup parameters for call to function sprintf
   \   000001                REQUIRE ??Subroutine24_0
   \   000001                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7900         MOV     R1,#0x0
   \   000002                REQUIRE ??Subroutine25_0
   \   000002                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   12....       LCALL   ??HalUARTWrite?relay
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003   7C06         MOV     R4,#0x6
   \   000005   7D00         MOV     R5,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   7900         MOV     R1,#0x0
   \   000006   12....       LCALL   ??HalUARTWrite?relay
   \   000009                ; Setup parameters for call to function sprintf
   \   000009   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   90....       MOV     DPTR,#contin
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C02         MOV     R4,#0x2
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    854          
    855          /*********************************************************************
    856           * @fn      SampleApp_SendPointMessage
    857           *
    858           * @brief   Send the point to point message.
    859           *
    860           * @param   none
    861           *
    862           * @return  none
    863           *
    864           * @time&author huang 2016 8 2
    865           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000003   12....       LCALL   ?DEALLOC_XSTACK8
   \   000006   740E         MOV     A,#0xe
   \   000008                REQUIRE ??Subroutine26_0
   \   000008                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    866          void SampleApp_SendPointMessage( void )
   \                     SampleApp_SendPointMessage:
    867          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    868            uint8 test_arr[]="RSSI Testing.";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "RSSI Testing.">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "RSSI Testing.">` & 0xff
   \   00001A   740E         MOV     A,#0xe
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    869            if ( AF_DataRequest( &SampleApp_Point_To_Point_DstAddr, &SampleApp_epDesc,//µØÖ·¸Ä±ä
    870                                 SAMPLEAPP_POINT_CLUSTERID,                           //´ØID¸Ä±ä
    871                                 sizeof(test_arr)-1,                                 //Êý×é³¤¶È
    872                                 test_arr,                                           //ÐèÒª·¢ËÍµÄÊý×é
    873                                 &SampleApp_TransID,                                 //ÐòÁÐºÅ£¬»á×Ô¶¯Ôö¼Ó
    874                                 AF_DISCV_ROUTE,                                     //·¢ËÍÑ¡Ïî
    875                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )           //·¢ËÍµÄÂ·ÓÉ°ë¾¶
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   75..1E       MOV     ?V0 + 0,#0x1e
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000027   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   75..0D       MOV     ?V0 + 0,#0xd
   \   000045   75..00       MOV     ?V0 + 1,#0x0
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   75..05       MOV     ?V0 + 0,#0x5
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   7920         MOV     R1,#0x20
   \   000057   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000059   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00005B   7A..         MOV     R2,#SampleApp_Point_To_Point_DstAddr & 0xff
   \   00005D   7B..         MOV     R3,#(SampleApp_Point_To_Point_DstAddr >> 8) & 0xff
   \   00005F   80..         SJMP    ?Subroutine1
    876            {
    877            }
    878            else
    879            {
    880              // Error occurred in request to send.
    881            }
    882          }
    883          /*********************************************************************
    884           * @fn      SampleApp_SendPeriodicMessage
    885           *
    886           * @brief   Send the periodic message.
    887           *
    888           * @param   none
    889           *
    890           * @return  none
    891           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    892          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    893          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    894            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    895                                 SAMPLEAPP_PERIODIC_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
    896                                 1,                            //Êý¾ÝÁ¿£¨³¤¶È£©
    897                                 (uint8*)&SampleAppPeriodicCounter,//Êý¾ÝÊ×µØÖ·
    898                                 &SampleApp_TransID,
    899                                 AF_DISCV_ROUTE,
    900                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000040   02....       LJMP    ??Subroutine26_0 & 0xFFFF
    901            {
    902            }
    903            else
    904            {
    905              // Error occurred in request to send.
    906            }
    907          }
    908          
    909          /*********************************************************************
    910           * @fn      SampleApp_SendFlashMessage
    911           *
    912           * @brief   Send the flash message to group 1.
    913           *
    914           * @param   flashTime - in milliseconds
    915           *
    916           * @return  none
    917           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    918          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    919          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    920            uint8 buffer[3];
    921            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000010   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000013   E0           MOVX    A,@DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    922            buffer[1] = LO_UINT16( flashTime );
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
    923            buffer[2] = HI_UINT16( flashTime );
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   EB           MOV     A,R3
   \   000023   F0           MOVX    @DPTR,A
    924          
    925            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    926                                 SAMPLEAPP_FLASH_CLUSTERID,
    927                                 3,
    928                                 buffer,
    929                                 &SampleApp_TransID,
    930                                 AF_DISCV_ROUTE,
    931                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000024                ; Setup parameters for call to function AF_DataRequest
   \   000024   75..1E       MOV     ?V0 + 0,#0x1e
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   8582..       MOV     ?V0 + 0,DPL
   \   00003F   8583..       MOV     ?V0 + 1,DPH
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..03       MOV     ?V0 + 0,#0x3
   \   00004A   75..00       MOV     ?V0 + 1,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..02       MOV     ?V0 + 0,#0x2
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7920         MOV     R1,#0x20
   \   00005C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00005E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000060   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000062   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000064   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
    932            {
    933            }
    934            else
    935            {
    936              // Error occurred in request to send.
    937            }
    938          }
   \   00006A   7403         MOV     A,#0x3
   \   00006C   02....       LJMP    ??Subroutine26_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    939          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    940          void SampleAPP_SendGasSensorMessage(void)
   \                     SampleAPP_SendGasSensorMessage:
    941          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    942            
    943            uint8 Transmit_data[14];              //ÐèÒª·¢ËÍµÄÊý¾Ý    °ü=¹«¹²Êý¾Ý(ÎÂÊª¶ÈÊý¾ÝºÍ±êÖ¾Î»)+Í¨µÀ0Êý¾ÝºÍ±êÖ¾+Í¨µÀ1Êý¾ÝºÍ±êÖ¾£¬ºóÃæÁ½¸öÊý¾Ý¿ÉÑ¡
    944            float val,val1,co_value,HCL_value;
                         ^
Warning[Pe177]: variable "val" was declared but never referenced

    float val,val1,co_value,HCL_value;
              ^
"C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",944  Warning[Pe177]: 
          variable "val1" was declared but never referenced

    float val,val1,co_value,HCL_value;
                   ^
"C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",944  Warning[Pe177]: 
          variable "co_value" was declared but never referenced

    float val,val1,co_value,HCL_value;
                            ^
"C:\Users\77564\Desktop\TENZ×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",944  Warning[Pe177]: 
          variable "HCL_value" was declared but never referenced
    945            //Ò»¸ö½Úµã ÎÂÊª¶ÈºÍ¾Æ¾«
    946            //¹«¹²°ü
    947            /*
    948            char temp;                   //ÎÂ¶È
    949            unsigned char humi;          //Êª¶È
    950            uint8 PublicFlag=0;         //¸Ã±äÁ¿¼ÇÂ¼ÁËDHT11µÄ×´Ì¬£¨ÊÇ·ñ¶ÁÈ¡³É¹¦)£¬»¹¿ÉÒÔ¼ÇÂ¼ÆäËû×´Ì¬
    951            Transmit_data[13]=1;//½Úµã1±ê¼Ç
    952          #if (defined Channel_0_GasSensor_Busy)
    953            float ADC_Channel_0_Vol=0;             //ADCµçÑ¹
    954            uint16 ADC_Channel_0_Vol_ForTx = 0;    //½«µçÑ¹Öµ³ËÉÏ1000£¬ÓÃÓÚ·¢ËÍ³öÈ¥
    955            uint16 ADC_Channel_0_RegData;          //ADC¼Ä´æÆ÷Êý¾Ý
    956            uint16 Channel_0_GasSenDataSave=0;     //±£´æÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
    957          #endif
    958          #if (defined Channel_1_GasSensor_Busy)
    959            float ADC_Channel_1_Vol=0;             //ADCµçÑ¹
    960            uint16 ADC_Channel_1_Vol_ForTx = 0;    //½«µçÑ¹Öµ³ËÉÏ1000£¬ÓÃÓÚ·¢ËÍ³öÈ¥
    961            uint16 ADC_Channel_1_RegData;          //ADC¼Ä´æÆ÷Êý¾Ý
    962            uint16 Channel_1_GasSenDataSave=0;     //±£´æÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
    963          #endif
    964          
    965            uint8 i=0;                            //Ñ­»·ÒªÓÃµ½
    966            uint8 TxPackLength=0;                 //¼ÇÂ¼°ü³¤¶È
    967          
    968            PublicFlag =0;                        //Çå¿Õ±êÖ¾Î»
    969          
    970            uint8 ADC_Result_ASCII[20];
    971            //ADC²âÊÔ½á¹û£¬Ê¹ÓÃÄÚ²¿²Î¿¼µçÑ¹ÊÇ×î×¼È·µÄ2017 2 19
    972            //×¢Òâ¶Å°îÏßµÄÑ¹½µÐèÒª²¹³¥£¬Êµ¼ÊµçÂ·ÖÐ£¬Îñ±Ø²âÊÔ´«¸ÐÆ÷Òý½Åµ½ADCÒý½ÅµÄÑ¹½µ£¬È»ºóÈí¼þ¼ÓÒÔ²¹³¥¡£2017 2 19
    973            //ÎÂ¶È´«¸ÐÆ÷  DHT11
    974            //DHT11¶ÁÈ¡Ê§°Ü£¬¿ÉÄÜDHT11Ëð»µ£¬¿ÉÄÜDHT11±»°Î³ö»òÕßÁ¬ÏßËÉ¶¯
    975              if(dht11_value(&temp , &humi , DHT11_UINT8) != 0)
    976              {
    977                temp = DHT11_TEMP_DEFAULT;  //ÉèÖÃÎÂÊª¶ÈÎªÄ¬ÈÏÖµ
    978                humi = DHT11_HUMI_DEFAULT;
    979                PublicFlag |= (1<<0);     //ÖÃÎ»±êÖ¾Î»
    980              }
    981              Transmit_data[TxPackLength] = (uint8)temp , TxPackLength++;                     //×°ÈëÎÂ¶È,TxPackLength=0
    982              Transmit_data[TxPackLength] = (uint8)humi , TxPackLength++;                     //×°ÈëÊª¶È
    983              Transmit_data[TxPackLength] =  PublicFlag , TxPackLength++;                    //×°Èë¹«¹²±êÖ¾Î»
    984          
    985          //Èç¹ûÓÃµ½ÁËchanne0Ôò±àÒë£¬Ê¹ÓÃP0.0£¬½«Í¨µÀ0Êý¾ÝºÍ±êÖ¾Î»×°Èë·¢ËÍ°üÖÐ
    986          #if (defined Channel_0_GasSensor_Busy)
    987              //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
    988              ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
    989              for(i=0;i<10;i++)
    990              {
    991                ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
    992                ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
    993              }
    994              ADC_Channel_0_Vol =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ
    995              ADC_Channel_0_Vol_ForTx = (uint16)(ADC_Channel_0_Vol * 1000);
    996          
    997              //Gas sensor»ñÈ¡Êý¾Ý,±£´æÆðÀ´
    998              Channel_0_GasSenDataSave = (uint16)PointGetConcentrationForChannel_0(ADC_Channel_0_Vol,temp,humi);
    999          
   1000              Transmit_data[TxPackLength] = HI_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
   1001              Transmit_data[TxPackLength] = LO_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
   1002              Transmit_data[TxPackLength] = HI_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶È¸ß°ËÎ»
   1003              Transmit_data[TxPackLength] = LO_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶ÈµÍ°ËÎ»
   1004              Transmit_data[TxPackLength] = *GasSensorFlagForChannel_0, TxPackLength++;                  //×°Èë±êÖ¾Î»
   1005          #endif
   1006          
   1007          //Èç¹ûÓÃµ½ÁËchanne1Ôò±àÒë£¬Ê¹ÓÃP0.4£¬½«Í¨µÀ1Êý¾ÝºÍ±êÖ¾Î»×°Èë·¢ËÍ°üÖÐ
   1008          #if (defined Channel_1_GasSensor_Busy)
   1009              //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
   1010              ADC_Channel_1_RegData = HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);                    //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
   1011              for(i=0;i<10;i++)
   1012              {
   1013                ADC_Channel_1_RegData += HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);                //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
   1014                ADC_Channel_1_RegData >>=1;                                                                  //³ýÒÔ2
   1015              }
   1016              ADC_Channel_1_Vol =  (float)ADC_Channel_1_RegData*AMS1117_3_ADC_VOL/8192;                       //¼ÆËãµÃµçÑ¹Öµ
   1017              ADC_Channel_1_Vol_ForTx = (uint16)(ADC_Channel_1_Vol * 1000);                                  //½«µçÑ¹Öµ³ËÒÔ1000
   1018              //Gas sensor»ñÈ¡Êý¾Ý,±£´æÆðÀ´
   1019              Channel_1_GasSenDataSave = (uint16)PointGetConcentrationForChannel_1(ADC_Channel_1_Vol,temp,humi);
   1020          
   1021              Transmit_data[TxPackLength] = HI_UINT16(ADC_Channel_1_Vol_ForTx) , TxPackLength++;             //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
   1022              Transmit_data[TxPackLength] = LO_UINT16(ADC_Channel_1_Vol_ForTx) , TxPackLength++;             //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
   1023              Transmit_data[TxPackLength] = HI_UINT16(Channel_1_GasSenDataSave) , TxPackLength++;             //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶È¸ß°ËÎ»
   1024              Transmit_data[TxPackLength] = LO_UINT16(Channel_1_GasSenDataSave) , TxPackLength++;             //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶ÈµÍ°ËÎ»
   1025              Transmit_data[TxPackLength] = *GasSensorFlagForChannel_1, TxPackLength++;                       //×°Èë±êÖ¾Î»
   1026          #endif
   1027          
   1028              //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
   1029              if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
   1030                               SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
   1031                               14,                   //Êý¾ÝÁ¿£¨³¤¶È£©
   1032                               Transmit_data,                  //Êý¾ÝÊ×µØÖ·
   1033                               &SampleApp_TransID,
   1034                               AF_DISCV_ROUTE,
   1035                               AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1036              {
   1037              }*/
   1038            
   1039            //½Úµã2
   1040            Transmit_data[13]=2;//½Úµã2±ê¼Ç
   \   00000A   740D         MOV     A,#0xd
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
   1041            Transmit_data[0] = PM_data[0];
   \   000012   90....       MOV     DPTR,#PM_data
   \   000015   12....       LCALL   ?Subroutine12 & 0xFFFF
   1042            Transmit_data[1] = PM_data[1];
   \                     ??CrossCallReturnLabel_22:
   \   000018   90....       MOV     DPTR,#PM_data + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
   1043            Transmit_data[2] = PM_data[2];
   \   000026   90....       MOV     DPTR,#PM_data + 2
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C0E0         PUSH    A
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
   1044            Transmit_data[3] = PM_data[3];
   \   000034   90....       MOV     DPTR,#PM_data + 3
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   7403         MOV     A,#0x3
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   D0E0         POP     A
   \   000041   F0           MOVX    @DPTR,A
   1045            Transmit_data[5] = PM_data[5];
   \   000042   90....       MOV     DPTR,#PM_data + 5
   \   000045   E0           MOVX    A,@DPTR
   \   000046   C0E0         PUSH    A
   \   000048   7405         MOV     A,#0x5
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
   1046            Transmit_data[4] = PM_data[4];
   \   000050   90....       MOV     DPTR,#PM_data + 4
   \   000053   E0           MOVX    A,@DPTR
   \   000054   C0E0         PUSH    A
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   D0E0         POP     A
   \   00005D   F0           MOVX    @DPTR,A
   1047            //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
   1048              if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
   1049                               SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
   1050                               14,                   //Êý¾ÝÁ¿£¨³¤¶È£©
   1051                               Transmit_data,                  //Êý¾ÝÊ×µØÖ·
   1052                               &SampleApp_TransID,
   1053                               AF_DISCV_ROUTE,
   1054                               AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00005E                ; Setup parameters for call to function AF_DataRequest
   \   00005E   75..1E       MOV     ?V0 + 0,#0x1e
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000066   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000069   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   8582..       MOV     ?V0 + 0,DPL
   \   000079   8583..       MOV     ?V0 + 1,DPH
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   75..0E       MOV     ?V0 + 0,#0xe
   \   000084   75..00       MOV     ?V0 + 1,#0x0
   \   000087   78..         MOV     R0,#?V0 + 0
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008C   75..06       MOV     ?V0 + 0,#0x6
   \   00008F   78..         MOV     R0,#?V0 + 0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   7920         MOV     R1,#0x20
   \   000096   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000098   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00009A   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   00009C   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   00009E   02....       LJMP    ?Subroutine1 & 0xFFFF
   1055              {
   1056              }
   1057            /*
   1058             //COºÍHCL  ÁíÍâÒ»¸ö½Úµã
   1059            uint8 data[7];
   1060            //uint8 data1[13];
   1061            char num;
   1062            Transmit_data[13]=3;//½Úµã3±ê¼Ç
   1063            val=ValreadP0_0();//¶ÁÈ¡COµÄµçÑ¹Öµ
   1064              if(val>3.6)//Êý¾ÝÅÅ²é
   1065                val=0;
   1066            co_value = val*1000;
   1067            memset(data,0,7);
   1068            sprintf(data,"%.1f",co_value);
   1069            
   1070            //data1[0]=2;//Ö÷»úÊ¶±ðµÄ±êÖ¾
   1071            
   1072            for(num=0;num<=6;num++)//×°COµÄÊý¾Ý
   1073            {
   1074              Transmit_data[num]=data[num];
   1075            }
   1076            memset(data,0,7);//Çå³ýÊý×é
   1077            val1=ValreadP0_4();//¶ÁÈ¡HCLµÄµçÑ¹Öµ
   1078            if(val1>3.6)//Êý¾ÝÅÅ²é
   1079                val1=0;
   1080            HCL_value = val1*1000-300;
   1081            if(HCL_value<100)
   1082              HCL_value=0;
   1083            if(HCL_value>100&&HCL_value<200)
   1084              HCL_value=HCL_value/1000;
   1085            memset(data,0,7);//Çå³ýÊý×é
   1086            sprintf(data,"%.1f",HCL_value);//½«Êý¾Ý×ª»¯³É×Ö·û´®£¬²¢ÇÒ×°½øÊý×éÀïÃæ
   1087            
   1088            for(num=7;num<=12;num++)//×°HCLµÄÊý¾Ý
   1089            {
   1090              Transmit_data[num]=data[num-7];
   1091            }
   1092            //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
   1093              if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
   1094                               SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
   1095                               14,                   //Êý¾ÝÁ¿£¨³¤¶È£©
   1096                               Transmit_data,                  //Êý¾ÝÊ×µØÖ·
   1097                               &SampleApp_TransID,
   1098                               AF_DISCV_ROUTE,
   1099                               AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   1100              {
   1101              }*/
   1102            
   1103          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetChannel1ADC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetChannel1ADC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetChannel2ADC?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetChannel2ADC

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPointMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPointMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleAPP_SendGasSensorMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleAPP_SendGasSensorMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World\\n">`:
   \   000000   48656C6C     DB "Hello World\012"
   \            6F20576F
   \            726C640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "P0.4:%.4fV">`:
   \   000000   50302E34     DB "P0.4:%.4fV"
   \            3A252E34
   \            665600  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n\\r\\n">`:
   \   000000   0D0A0D0A     DB "\015\012\015\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "P0.0:%.4fV">`:
   \   000000   50302E30     DB "P0.0:%.4fV"
   \            3A252E34
   \            665600  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GeneralFlag1:%d\\r\\n">`:
   \   000000   47656E65     DB "GeneralFlag1:%d\015\012"
   \            72616C46
   \            6C616731
   \            3A25640D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Transmit_data[%d]:%d\\r\\n">`:
   \   000000   5472616E     DB "Transmit_data[%d]:%d\015\012"
   \            736D6974
   \            5F646174
   \            615B2564
   \            5D3A2564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DHT11 Error!\\r\\n">`:
   \   000000   44485431     DB "DHT11 Error!\015\012"
   \            31204572
   \            726F7221
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ShortAddr: ">`:
   \   000000   53686F72     DB "ShortAddr: "
   \            74416464
   \            723A2000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PanID: ">`:
   \   000000   50616E49     DB "PanID: "
   \            443A2000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rssi: ">`:
   \   000000   52737369     DB "Rssi: "
   \            3A2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Cmd.DataLength: ">`:
   \   000000   436D642E     DB "Cmd.DataLength: "
   \            44617461
   \            4C656E67
   \            74683A20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Cmd.Data: ">`:
   \   000000   436D642E     DB "Cmd.Data: "
   \            44617461
   \            3A2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "The Node Message\\r\\n">`:
   \   000000   54686520     DB "The Node Message\015\012"
   \            4E6F6465
   \            204D6573
   \            73616765
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0x%x\\r\\n">`:
   \   000000   30782578     DB "0x%x\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%ddBm\\r\\n">`:
   \   000000   25646442     DB "%ddBm\015\012"
   \            6D0D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d\\r\\n">`:
   \   000000   25640D0A     DB "%d\015\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get data\\n">`:
   \   000000   49206765     DB "I get data\012"
   \            74206461
   \            74610A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TEMP\\243\\272%d C\\r\\n">`:
   \   000000   54454D50     DB "TEMP\243\272%d C\015\012"
   \            A3BA2564
   \            20430D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HUMI\\243\\272%dRH\\r\\n">`:
   \   000000   48554D49     DB "HUMI\243\272%dRH\015\012"
   \            A3BA2564
   \            52480D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PM2.5:">`:
   \   000000   504D322E     DB "PM2.5:"
   \            353A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ug/m3">`:
   \   000000   75672F6D     DB "ug/m3"
   \            3300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CO:">`:
   \   000000   434F3A00     DB "CO:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ppm">`:
   \   000000   70706D00     DB "ppm"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HCL:">`:
   \   000000   48434C3A     DB "HCL:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RSSI Testing.">`:
   \   000000   52535349     DB "RSSI Testing."
   \            20546573
   \            74696E67
   \            2E00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4059999a:
   \   000000   9A995940     DD 4059999AH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_39000000:
   \   000000   00000039     DD 39000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40533333:
   \   000000   33335340     DD 40533333H
   1104          
   1105          /*********************************************************************
   1106          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     GetChannel1ADC                     0      0     45
       -> HalAdcRead                    0      0     82
       -> HalAdcRead                    0      0     82
       -> sprintf                       0      0     90
       -> strlen                        0      0     82
       -> HalUARTWrite                  0      0     82
       -> HalUARTWrite                  0      0     82
       -> Onboard_wait                  0      0     82
     GetChannel2ADC                     0      0     45
       -> HalAdcRead                    0      0     82
       -> HalAdcRead                    0      0     82
       -> sprintf                       0      0     90
       -> strlen                        0      0     82
       -> HalUARTWrite                  0      0     82
       -> HalUARTWrite                  0      0     82
       -> Onboard_wait                  0      0     82
     SampleAPP_SendGasSensorMessage     1      0     45
       -> AF_DataRequest                0      0     66
     SampleApp_HandleKeys               1      0     93
       -> dht11_value                   0      0    144
       -> HalAdcRead                    0      0    144
       -> HalAdcRead                    0      0    144
       -> sprintf                       0      0    152
       -> strlen                        0      0    144
       -> HalUARTWrite                  0      0    144
       -> HalUARTWrite                  0      0    144
       -> Onboard_wait                  0      0    144
       -> sprintf                       0      0    148
       -> strlen                        0      0    144
       -> HalUARTWrite                  0      0    144
       -> AF_DataRequest                0      0    162
       -> sprintf                       0      0    152
       -> Onboard_wait                  0      0    144
       -> strlen                        0      0    144
       -> HalUARTWrite                  0      0    144
       -> Onboard_wait                  0      0    144
       -> HalUARTWrite                  0      0    144
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> PM2_5Init                     0      0     22
       -> HalAdcInit                    0      0     22
       -> readCoordinatorJumper         0      0     22
       -> ZDOInitDevice                 0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0    119
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> sprintf                       0      0    214
       -> strlen                        0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> sprintf                       0      0    214
       -> strlen                        0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> sprintf                       0      0    214
       -> strlen                        0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> sprintf                       0      0    214
       -> strlen                        0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalLedBlink                   0      0    210
       -> HalUARTWrite                  0      0    210
       -> sprintf                       0      0    214
       -> strlen                        0      0    210
       -> HalUARTWrite                  0      0    210
       -> sprintf                       0      0    214
       -> strlen                        0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
       -> HalUARTWrite                  0      0    210
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleAPP_SendGasSensorMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     22
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_SendPointMessage         2      0     33
       -> AF_DataRequest                0      0     66


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     _A_P1                                     1
     contin                                    1
     send_data_PM25                            8
     send_data_CO                              7
     send_data_HCL                             6
     SampleApp_ClusterList                     6
     SampleApp_SimpleDesc                     12
     SampleApp_epDesc                          6
     SampleApp_TaskID                          1
     SampleApp_NwkState                        1
     SampleApp_TransID                         1
     SampleApp_Periodic_DstAddr               12
     SampleApp_Flash_DstAddr                  12
     SampleApp_Point_To_Point_DstAddr
                                              12
     SampleApp_Group                          18
     SampleAppPeriodicCounter                  1
     SampleAppFlashCounter                     1
     SampleApp_Init                          228
     SampleApp_ProcessEvent                  176
     GetChannel1ADC                           79
     ?Subroutine0                             45
     ?Subroutine9                             15
     ?Subroutine6                             25
     ?Subroutine20                            12
     ?Subroutine2                             30
     GetChannel2ADC                           81
     SampleApp_HandleKeys                    503
     ?Subroutine15                             6
     ??Subroutine23_0                          5
     ?Subroutine8                             10
     ?Subroutine16                             6
     SampleApp_MessageMSGCB                 1083
     ?Subroutine17                             3
     ?Subroutine14                             4
     ?Subroutine19                            12
     ?Subroutine13                             6
     ?Subroutine11                            13
     ?Subroutine10                            14
     ?Subroutine21                            11
     ?Subroutine7                              1
     ??Subroutine24_0                          5
     ?Subroutine5                              2
     ??Subroutine25_0                          8
     ?Subroutine4                             14
     ?Subroutine22                            13
     ?Subroutine3                              7
     ?Subroutine18                            19
     ??Subroutine26_0                          8
     ?Subroutine1                              8
     SampleApp_SendPointMessage               97
     SampleApp_SendPeriodicMessage            67
     SampleApp_SendFlashMessage              111
     ?Subroutine12                             9
     SampleAPP_SendGasSensorMessage          161
     ??SampleApp_Init?relay                    6
     ??SampleApp_ProcessEvent?relay            6
     ??GetChannel1ADC?relay                    6
     ??GetChannel2ADC?relay                    6
     ??SampleApp_HandleKeys?relay              6
     ??SampleApp_MessageMSGCB?relay            6
     ??SampleApp_SendPointMessage?relay        6
     ??SampleApp_SendPeriodicMessage?relay     6
     ??SampleApp_SendFlashMessage?relay        6
     ??SampleAPP_SendGasSensorMessage?relay    6
     ?<Constant "Hello World\n">              13
     ?<Constant "Group 1">                     8
     ?<Constant "SampleApp">                  10
     ?<Constant "P0.4:%.4fV">                 11
     ?<Constant "\r\n\r\n">                    5
     ?<Constant "P0.0:%.4fV">                 11
     ?<Constant "GeneralFlag1:%d\r\n">        18
     ?<Constant "Transmit_data[%d]:%d\r\n">   23
     ?<Constant "DHT11 Error!\r\n">           15
     ?<Constant "ShortAddr: ">                12
     ?<Constant "PanID: ">                     8
     ?<Constant "Rssi: ">                      7
     ?<Constant "Cmd.DataLength: ">           17
     ?<Constant "Cmd.Data: ">                 11
     ?<Constant "The Node Message\r\n">       19
     ?<Constant "0x%x\r\n">                    7
     ?<Constant "%ddBm\r\n">                   8
     ?<Constant "%d\r\n">                      5
     ?<Constant "I get data\n">               12
     ?<Constant "\n">                          2
     ?<Constant "TEMP\243\272%d C\r\n">       13
     ?<Constant "HUMI\243\272%dRH\r\n">       13
     ?<Constant "\r\n">                        3
     ?<Constant "PM2.5:">                      7
     ?<Constant "ug/m3">                       6
     ?<Constant "CO:">                         4
     ?<Constant "ppm">                         4
     ?<Constant "HCL:">                        5
     ?<Constant "RSSI Testing.">              14
     __Constant_4059999a                       4
     __Constant_39000000                       4
     __Constant_40533333                       4

 
 2 897 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
   321 bytes in segment XDATA_ROM_C
    87 bytes in segment XDATA_Z
 
 2 957 bytes of CODE  memory
   309 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  1 byte  shared)
    87 bytes of XDATA memory

Errors: none
Warnings: 25
