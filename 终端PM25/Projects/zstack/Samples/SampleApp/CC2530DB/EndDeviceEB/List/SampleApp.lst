###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         18/Dec/2018  13:07:45 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\Source\Samp #
#                          leApp.c                                            #
#    Command line       =  -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é #
#                          ²¥+PM25\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO   #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\77564\Desktop\¼à²â #
#                          ÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Sample #
#                          s\SampleApp\Source\SampleApp.c -D NWK_AUTO_POLL    #
#                          -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D           #
#                          MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D HAL_ADC -D  #
#                          Channel_0_For_TGS822 -D Channel_1_For_TGS813 -D    #
#                          "HAL_UART= TRUE" -lC C:\Users\77564\Desktop\¼à²âÈÕ #
#                          ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\EndDeviceEB\List\ -lA           #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\En #
#                          dDeviceEB\List\ --diag_suppress Pe001,Pa010 -o     #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\En #
#                          dDeviceEB\Obj\ -e --no_code_motion --debug         #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\77564\Desktop\¼à² #
#                          âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\ -I                          #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \Source\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ #
#                          ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\ZMain\TI2530DB\ -I              #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\hal\include\ -I            #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\hal\target\CC2530EB\ -I    #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\include\ -I            #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\high_level\ -I         #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\ -I    #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³Ì #
#                          Ðò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\mt\ -I           #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\osal\include\ -I           #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\services\saddr\ -I         #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\services\sdata\ -I         #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\af\ -I               #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\nwk\ -I              #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\sapi\ -I             #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\sec\ -I              #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\sys\ -I              #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\zdo\ -I              #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\zmac\ -I                   #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\zmac\f8w\ -Ohz             #
#    List file          =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\En #
#                          dDeviceEB\List\SampleApp.lst                       #
#    Object file        =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          PM25\Projects\zstack\Samples\SampleApp\CC2530DB\En #
#                          dDeviceEB\Obj\SampleApp.r51                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "hal_adc.h"
     75          
     76          //´Ë´¦ÓÃÓÚ´®¿Ú
     77          #include  "MT_UART.h"
     78          
     79          //CÓïÑÔ±ê×¼¿â
     80          #include <string.h>
     81          #include <stdlib.h>
     82          #include <stdio.h>
     83          #include <math.h>
     84          
     85          //PM25ÎÄ¼þ
     86          #include <PM25.h>
     87          
     88          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          char contin=0;
   \                     contin:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          char contin1=0;
   \                     contin1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     91          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          float pm_data;
   \                     pm_data:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint8 send_data_PM25[8];
   \                     send_data_PM25:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          char PM_data[20];
   \                     PM_data:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          char pm_rxlen;
   \                     pm_rxlen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          uchar RXBUF[20];
   \                     RXBUF:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          uint8 Transmit_data[28];         //ÐèÒª·¢ËÍµÄÊý¾Ý    
   \                     Transmit_data:
   \   000000                DS 28
   \   00001C                REQUIRE __INIT_XDATA_Z
     98                                             //°ü=¹«¹²Êý¾Ý(ÎÂÊª¶ÈÊý¾ÝºÍ±êÖ¾Î»)+Í¨µÀ0Êý¾ÝºÍ±êÖ¾+Í¨µÀ1Êý¾ÝºÍ±êÖ¾£¬ºóÃæÁ½¸öÊý¾Ý¿ÉÑ¡
     99          
    100          /*********************************************************************
    101           * CONSTANTS
    102           */
    103          
    104          /*********************************************************************
    105           * TYPEDEFS
    106           */
    107          
    108          /*********************************************************************
    109           * GLOBAL VARIABLES
    110           */
    111          
    112          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    113          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
    114          {
    115            SAMPLEAPP_PERIODIC_CLUSTERID,
    116            SAMPLEAPP_FLASH_CLUSTERID
    117          };
    118          

   \                                 In  segment XDATA_ROM_C, align 1
    119          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    120          {
    121            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    122            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    123            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    124            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    125            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    126            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    127            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    128            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    129            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    130          };
    131          
    132          // This is the Endpoint/Interface description.  It is defined here, but
    133          // filled-in in SampleApp_Init().  Another way to go would be to fill
    134          // in the structure here and make it a "const" (in code space).  The
    135          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    137          
    138          /*********************************************************************
    139           * EXTERNAL VARIABLES
    140           */
    141          
    142          /*********************************************************************
    143           * EXTERNAL FUNCTIONS
    144           */
    145          
    146          /*********************************************************************
    147           * LOCAL VARIABLES
    148           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    150                                    // This variable will be received when
    151                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    157          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          afAddrType_t SampleApp_Point_To_Point_DstAddr;
   \                     SampleApp_Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          aps_Group_t SampleApp_Group;//·Ö×éÄÚÈÝ
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    163          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          
    167          
    168          
    169          /*********************************************************************
    170           * LOCAL FUNCTIONS
    171           */
    172          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    173          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    174          void SampleApp_SendPeriodicMessage( void );//¹ã²¥×éÍø
    175          void SampleApp_SendFlashMessage( uint16 flashTime );//×é²¥×éÍø
    176          void SampleApp_SendPointMessage( void );//µã²¥×éÍø
    177          
    178          //@huang
    179          void SampleAPP_SendGasSensorMessage(void);//×Ô¼º¶¨ÒåµÄÊý¾Ý·¢ËÍº¯Êý
    180          void GetChannel1ADC(void);
    181          void GetChannel2ADC(void);
    182          /*********************************************************************
    183           * NETWORK LAYER CALLBACKS
    184           */
    185          
    186          /*********************************************************************
    187           * PUBLIC FUNCTIONS
    188           */
    189          
    190          /*********************************************************************
    191           * @fn      SampleApp_Init
    192           *
    193           * @brief   Initialization function for the Generic App Task.
    194           *          This is called during initialization and should contain
    195           *          any application specific initialization (ie. hardware
    196           *          initialization/setup, table initialization, power up
    197           *          notificaiton ... ).
    198           *
    199           * @param   task_id - the ID assigned by OSAL.  This ID should be
    200           *                    used to send messages and set timers.
    201           *
    202           * @return  none
    203           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    205          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    206            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    207            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    208            SampleApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    209          
    210            MT_UartInit();                //´®¿Ú³õÊ¼»¯
   \   000015                ; Setup parameters for call to function MT_UartInit
   \   000015   12....       LCALL   ??MT_UartInit?relay
    211            MT_UartRegisterTaskID(SampleApp_TaskID);//µÇ¼ÇÈÎÎñºÅ
   \   000018                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000018   90....       MOV     DPTR,#SampleApp_TaskID
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   12....       LCALL   ??MT_UartRegisterTaskID?relay
    212            HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
   \   000020                ; Setup parameters for call to function HalUARTWrite
   \   000020   7C0C         MOV     R4,#0xc
   \   000022   7D00         MOV     R5,#0x0
   \   000024   7A..         MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
   \   000026   7B..         MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
   \   000028   7900         MOV     R1,#0x0
   \   00002A   12....       LCALL   ??HalUARTWrite?relay
    213            //IEN0 |= (1<<2);                 //Ê¹ÄÜUSART0 RX
    214            HalAdcInit();                 //ADC²Î¿¼µçÑ¹³õÊ¼»¯£¨Ä¬ÈÏÎªÄÚ²¿²Î¿¼µçÑ¹£©
   \   00002D                ; Setup parameters for call to function HalAdcInit
   \   00002D   12....       LCALL   ??HalAdcInit?relay
    215            
    216            // Device hardware initialization can be added here or in main() (Zmain.c).
    217            // If the hardware is application specific - add it here.
    218            // If the hardware is other parts of the device add it in main().
    219          
    220           #if defined ( BUILD_ALL_DEVICES )
    221            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    222            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    223            // together - if they are - we will start up a coordinator. Otherwise,
    224            // the device will start as a router.
    225            if ( readCoordinatorJumper() )
    226              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    227            else
    228              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    229          #endif // BUILD_ALL_DEVICES
    230          
    231          #if defined ( HOLD_AUTO_START )
    232            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    233            //  from starting the device and wait for the application to
    234            //  start the device.
    235            ZDOInitDevice(0);
    236          #endif
    237          
    238            // Setup for the periodic message's destination address
    239            // Broadcast to everyone
    240            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000030   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000033   740F         MOV     A,#0xf
   \   000035   F0           MOVX    @DPTR,A
    241            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000036   A3           INC     DPTR
   \   000037   7414         MOV     A,#0x14
   \   000039   F0           MOVX    @DPTR,A
    242            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00003A   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003D   74FF         MOV     A,#-0x1
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   F0           MOVX    @DPTR,A
    243          
    244            // Setup for the flash command's destination address - Group 1 //×é²¥ÉèÖÃ
    245            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000042   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000045   7401         MOV     A,#0x1
   \   000047   F0           MOVX    @DPTR,A
    246            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000048   A3           INC     DPTR
   \   000049   7414         MOV     A,#0x14
   \   00004B   F0           MOVX    @DPTR,A
    247            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×é²¥ºÅ
   \   00004C   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004F   7401         MOV     A,#0x1
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   E4           CLR     A
   \   000054   F0           MOVX    @DPTR,A
    248            //µã²¥½á¹¹ÌåµÄ³õÊ¼»¯
    249             // Setup for the point command's destination address
    250            SampleApp_Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥
   \   000055   90....       MOV     DPTR,#SampleApp_Point_To_Point_DstAddr + 8
   \   000058   7402         MOV     A,#0x2
   \   00005A   F0           MOVX    @DPTR,A
    251            SampleApp_Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005B   A3           INC     DPTR
   \   00005C   7414         MOV     A,#0x14
   \   00005E   F0           MOVX    @DPTR,A
    252            SampleApp_Point_To_Point_DstAddr.addr.shortAddr = 0x0000;           //0x0000 Ä¬ÈÏÊÇÐ­µ÷Æ÷µÄµØÖ·
   \   00005F   90....       MOV     DPTR,#SampleApp_Point_To_Point_DstAddr
   \   000062   E4           CLR     A
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   F0           MOVX    @DPTR,A
    253            // Fill out the endpoint description.
    254            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000066   90....       MOV     DPTR,#SampleApp_epDesc
   \   000069   7414         MOV     A,#0x14
   \   00006B   F0           MOVX    @DPTR,A
    255            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000073   F0           MOVX    @DPTR,A
    256            SampleApp_epDesc.simpleDesc
    257                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000074   A3           INC     DPTR
   \   000075   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00007B   F0           MOVX    @DPTR,A
    258            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00007C   A3           INC     DPTR
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
    259          
    260            // Register the endpoint description with the AF
    261            afRegister( &SampleApp_epDesc );
   \   00007F                ; Setup parameters for call to function afRegister
   \   00007F   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000081   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000083   12....       LCALL   ??afRegister?relay
    262          
    263            // Register for all key events - This app will handle all key events
    264            RegisterForKeys( SampleApp_TaskID );
   \   000086                ; Setup parameters for call to function RegisterForKeys
   \   000086   90....       MOV     DPTR,#SampleApp_TaskID
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   ??RegisterForKeys?relay
    265          
    266            // By default, all devices start out in Group 1
    267            SampleApp_Group.ID = 0x0001;
   \   00008E   90....       MOV     DPTR,#SampleApp_Group
   \   000091   7401         MOV     A,#0x1
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
   \   000095   E4           CLR     A
   \   000096   F0           MOVX    @DPTR,A
    268            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000097                ; Setup parameters for call to function osal_memcpy
   \   000097   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00009A   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00009D   F5..         MOV     ?V0 + 2,A
   \   00009F   78..         MOV     R0,#?V0 + 0
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A4   7C07         MOV     R4,#0x7
   \   0000A6   7D00         MOV     R5,#0x0
   \   0000A8   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000AA   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000AC   12....       LCALL   ??osal_memcpy?relay
   \   0000AF   7403         MOV     A,#0x3
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
    269            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000B4                ; Setup parameters for call to function aps_AddGroup
   \   0000B4   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B6   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B8   7914         MOV     R1,#0x14
   \   0000BA   12....       LCALL   ??aps_AddGroup?relay
    270          
    271          #if defined ( LCD_SUPPORTED )
    272            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    273          #endif
    274          
    275            //Èç¹ûÃ»ÓÐÊ¹ÓÃPA£¬ÔòÁÁµÆ£¨»òÕßÆäËû£©£¬Èç¹ûÊ¹ÓÃÁËPA£¬Ôò...
    276          #if defined (HAL_PA_LNA)
    277            HAL_TURN_ON_LED2();
   \   0000BD   C291         CLR     0x90.1
    278          #endif
    279          }
   \   0000BF   7F03         MOV     R7,#0x3
   \   0000C1   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000C4                REQUIRE _A_P1
    280          
    281          /*********************************************************************
    282           * @fn      SampleApp_ProcessEvent
    283           *
    284           * @brief   Generic Application Task event processor.  This function
    285           *          is called to process all events for the task.  Events
    286           *          include timers, messages and any other user defined events.
    287           *
    288           * @param   task_id  - The OSAL assigned task ID.
    289           * @param   events - events to process.  This is a bit map and can
    290           *                   contain more than one event.
    291           *
    292           * @return  none
    293           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    295          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    296            afIncomingMSGPacket_t *MSGpkt;
    297            (void)task_id;  // Intentionally unreferenced parameter
    298          
    299            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   605C         JZ      ??SampleApp_ProcessEvent_0
    300            {
    301              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    302              while ( MSGpkt )
    303              {
    304                switch ( MSGpkt->hdr.event )
    305                {
    306                  /* Received when a key is pressed
    307                  case KEY_CHANGE:
    308                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    309                    break;*/
    310          
    311                  // Received when a messages is received (OTA) for this endpoint
    312                  case AF_INCOMING_MSG_CMD:
    313                    SampleApp_MessageMSGCB( MSGpkt );
    314                      //¹¤×÷Ö¸Ê¾µÆ
    315                     //HAL_TOGGLE_LED2();
    316                    break;
    317          
    318                  // Received whenever the device changes state in the network
    319                  case ZDO_STATE_CHANGE:
    320                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    321                    if ( //(SampleApp_NwkState == DEV_ZB_COORD)||       //Ð­µ÷Æ÷²»ÔÊÐí¶Ô×Ô¼ºµã²¥£¬Ö»ÔÊÐíÂ·ÓÉÆ÷ºÍÖÕ¶Ë¶ÔÐ­µ÷Æ÷µã²¥
    322                        (SampleApp_NwkState == DEV_ROUTER)
    323                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    324                    {
    325                      // Start sending the periodic message in a regular interval.
    326                      osal_start_timerEx( SampleApp_TaskID,                    //¸Ãº¯Êý¶¨Ê±´¥·¢ÊÂ¼þ
    327                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,        //²ÎÊýÒÀ´ÎÊÇ¡°ÈÎÎñID¡±
    328                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );  //¡°×¢²áÊÂ¼þ¡±¡°Ñ­»·Ê±¼ä¡±
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    329                    }
    330                    else
    331                    {
    332                      // Device is no longer in the network
    333                    }
    334                    break;
    335          
    336                  default:
    337                    break;
    338                }
    339          
    340                // Release the memory
    341                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    342          
    343                // Next - if one is available
    344                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   601A         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000052   2449         ADD     A,#0x49
   \   000054   60B9         JZ      ??SampleApp_ProcessEvent_2
   \   000056   80D6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000058                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000058   AA..         MOV     R2,?V0 + 0
   \   00005A   AB..         MOV     R3,?V0 + 1
   \   00005C   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00005F   80CD         SJMP    ??SampleApp_ProcessEvent_4
    345              }
    346          
    347              // return unprocessed events
    348              return (events ^ SYS_EVENT_MSG);                        //·µ»ØÃ»ÓÐ´¦ÀíµÄÊÂ¼þ
   \                     ??SampleApp_ProcessEvent_5:
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   000066   FB           MOV     R3,A
   \   000067   802A         SJMP    ??SampleApp_ProcessEvent_8
    349            }
    350          
    351            // Send a message out - This event is generated by a timer
    352            //  (setup in SampleApp_Init()).
    353            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000069   EE           MOV     A,R6
   \   00006A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006C   5021         JNC     ??SampleApp_ProcessEvent_9
    354            {
    355              // Send the periodic message
    356               SampleAPP_SendGasSensorMessage();      //·¢ËÍ´«¸ÐÆ÷Êý¾ÝµÄº¯Êý
   \   00006E                ; Setup parameters for call to function SampleAPP_SendGasSensorMessage
   \   00006E   12....       LCALL   ??SampleAPP_SendGasSensorMessage?relay
    357              // Setup to send message again in normal period (+ a little jitter)
    358              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    359                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000071                ; Setup parameters for call to function osal_rand
   \   000071   12....       LCALL   ??osal_rand?relay
   \   000074                ; Setup parameters for call to function osal_start_timerEx
   \   000074   EA           MOV     A,R2
   \   000075   24E8         ADD     A,#-0x18
   \   000077   FC           MOV     R4,A
   \   000078   E4           CLR     A
   \   000079   3403         ADDC    A,#0x3
   \   00007B   FD           MOV     R5,A
   \   00007C   7A01         MOV     R2,#0x1
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   90....       MOV     DPTR,#SampleApp_TaskID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??osal_start_timerEx?relay
    360          
    361              // return unprocessed events
    362              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000088   EE           MOV     A,R6
   \   000089   6401         XRL     A,#0x1
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   80D7         SJMP    ??SampleApp_ProcessEvent_7
    363            }
    364          
    365            // Discard unknown events
    366            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   00008F   7A00         MOV     R2,#0x0
   \   000091   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   000093   7F04         MOV     R7,#0x4
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
    367          }
    368          
    369          /*********************************************************************
    370           * LOCAL FUNCTIONS
    371           */
    372          
    373          /*********************************************************************
    374           * @fn      SampleApp_MessageMSGCB
    375           *
    376           * @brief   Data message processor callback.  This function processes
    377           *          any incoming data - probably from other devices.  So, based
    378           *          on cluster ID, perform the intended action.
    379           *
    380           * @param   none
    381           *
    382           * @return  none
    383           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    384          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    385          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    386            float Channel0_VolSave = 0.0f;
    387            char  convert_arr[20];
    388            uint8 convert_u16[20];
    389            //ÓÉÓÚÓÐÁù¸ö×Ö½Ú´«ÊäÊý¾Ý£¬Ö»ÓÃµ½Á½¸ö£¬ËùÒÔºóÃæËÄ¸öÊý¾Ý×Ö½ÚÓÃ0xff±íÊ¾
    390            convert_u16[2]   = 0xff;
    391            convert_u16[3]   = 0xff;
    392            convert_u16[4]   = 0xff;
    393            convert_u16[5]   = 0xff;  
    394            uint8 add[]={0xfe,0x10,0x69,0x01,0x83,0xf2,0x2e,0x01,0x00,0x4b,0x12,0x01};//³õÊ¼ÀàÎª01£¬µØÖ·01£¬Ö¡Í·
    395            uint8 end[]={0x77,0x88,0x12};  //Ö¡Î²
    396            uint8 i=0;
    397            u16   sensor_value=0;
    398            char count;
    399          
    400            switch ( pkt->clusterId )
    401            {
    402            
    403            case SAMPLEAPP_GAS_SENSOR_CLUSTERID:
    404                i=0;//ÓÃÓÚ¼ÇÂ¼Êý¾Ý°üµÄ¼ÆÊý×Ó
    405                char EDid=0;
                            ^
Warning[Pe550]: variable "EDid" was set but never used

    float Channel0_VolSave = 0.0f;
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",386  Warning[Pe177]: 
          variable "Channel0_VolSave" was declared but never referenced

    char  convert_arr[20];
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",387  Warning[Pe177]: 
          variable "convert_arr" was declared but never referenced

    uint8 convert_u16[20];
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",388  Warning[Pe550]: 
          variable "convert_u16" was set but never used

    uint8 add[]={0xfe,0x10,0x69,0x01,0x83,0xf2,0x2e,0x01,0x00,0x4b,0x12,0x01};//³õÊ¼ÀàÎª01£¬µØÖ·01£¬Ö¡Í·
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",394  Warning[Pe177]: 
          variable "add" was declared but never referenced

    uint8 end[]={0x77,0x88,0x12};  //Ö¡Î²
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",395  Warning[Pe177]: 
          variable "end" was declared but never referenced

    uint8 i=0;
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",396  Warning[Pe550]: 
          variable "i" was set but never used

    u16   sensor_value=0;
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",397  Warning[Pe177]: 
          variable "sensor_value" was declared but never referenced

    char count;
         ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",398  Warning[Pe177]: 
          variable "count" was declared but never referenced
    406                EDid=(pkt->cmd.Data)[27];
    407          #if defined (ASCII_Printf) //ÉèÖÃÎª×Ö·ûÊä³ö
    408                if(EDid==1&&contin==0)
    409                //if(1)
    410                {
    411                  /*ÏÔÊ¾ÊÕµ½µÄÊý¾ÝÁ¿
    412                    sprintf(convert_arr,"DataLength:%d\r\n",pkt->cmd.DataLength);
    413                    HalUARTWrite(0,convert_arr,strlen(convert_arr));*/
    414                
    415                    //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
    416                    sprintf(convert_arr,"TEMP£º%d C\r\n",(pkt->cmd.Data)[i]),i++; //Òþ²ØTEMP
    417                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    418                    sprintf(convert_arr,"HUMI£º%dRH\r\n",(pkt->cmd.Data)[i]),i++;//Òþ²ØHUMI
    419                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    420                
    421                    //ÅÐ¶Ï±êÖ¾Î»£¬²¢¸ø³öÌáÊ¾ÐÅÏ¢
    422                    //DHT³ö´í
    423                    if((pkt->cmd.Data)[i++] & (1<<0))
    424                    {
    425                      HalUARTWrite(0,"DHT11 Error!\r\n",strlen("DHT11 Error!\r\n"));
    426                    }
    427                
    428                #if (defined Channel_0_GasSensor_Busy)
    429                    //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
    430                    Channel0_VolSave =  (float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])/1000;
    431                    sprintf(convert_arr,"vol0£º%.3fV\r\n",Channel0_VolSave),i+=2;
    432                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    433                    if(Channel0_VolSave < TGS822_Safe)
    434                      sprintf(convert_arr,"Level: Ã»ÓÐÎÛÈ¾\r\n");
    435                    else if(Channel0_VolSave < TGS822_Mildly)
    436                      sprintf(convert_arr,"Level: Çá¶ÈÎÛÈ¾\r\n");
    437                    else if(Channel0_VolSave < TGS822_Moderate)
    438                      sprintf(convert_arr,"Level: ÖÐ¶ÈÎÛÈ¾\r\n");
    439                    else if(Channel0_VolSave < TGS822_Severe)
    440                      sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
    441                //      sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
    442                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    443                    //    sprintf(convert_arr,"concen0£º%dppm\r\n",BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])),i+=2;
    444                //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    445                //    sprintf(convert_arr,"Flag0:0x%x\r\n",(pkt->cmd.Data)[i]),i++;
    446                //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    447                #endif
    448                  
    449                   //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
    450                  for(count=0;count<=6;count++)
    451                  {
    452                    send_data_CO[count]=(pkt->cmd.Data)[count+8];
    453                  }
    454                  for(count=0;count<=5;count++)
    455                  {
    456                    send_data_HCL[count]=(pkt->cmd.Data)[count+15];
    457                  }
    458                  for(count=0;count<=5;count++)
    459                  {
    460                    send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
    461                  }
    462                  HalUARTWrite(0, "CO:", 3);
    463                  HalUARTWrite(0, send_data_CO, 7); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    464                  HalUARTWrite(0, "ppm", 3);
    465                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    466                  
    467                  HalUARTWrite(0, "HCL:", 4);
    468                  HalUARTWrite(0, send_data_HCL, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    469                  HalUARTWrite(0, "ppm", 3);
    470                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    471                  
    472                  HalUARTWrite(0, "AOL:", 4);
    473                  HalUARTWrite(0, send_data_MQ3, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    474                  HalUARTWrite(0, "ppm", 3);
    475                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    476                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    477                  HalUARTWrite(0, "\r\n", 2);
    478                  //sprintf(text,"HELLO!",(pkt->cmd.Data)[i]);
    479                  
    480                  contin=1;
    481                            //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
    482          
    483                }
    484                if(EDid==2&&contin==1)
    485                {
    486                  for(count=0;count<6;count++)
    487                  {
    488                    send_data_PM25[count]=(pkt->cmd.Data)[count];
    489                  }
    490                  HalUARTWrite(0, "PM2.5:", 6);
    491                  HalUARTWrite(0, send_data_PM25, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    492                  HalUARTWrite(0, "ug/m3", 5);
    493                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    494          
    495                  contin=0;
    496                }
    497          #endif
    498          
    499          #if defined (uint8_Printf_not) //ÉèÖÃÎª16½øÖÆÏÔÊ¾Êä³ö,È¡ÏûÊä³ö¾Í¼Ó¸ö_not
    500                if(EDid==1&&contin1==0)
    501                {
    502                
    503                    i=0;
    504                    add[3] =0x01;
    505                    add[11]=0x01; //ÉèÖÃÎÂ¶ÈÎïÀíµØÖ·Îª01
    506                    convert_u16[0]   = 0x00;
    507                    convert_u16[1]   = (pkt->cmd.Data)[i++]; 
    508                    HalUARTWrite(0,add,12);
    509                    HalUARTWrite(0,convert_u16,6);   //ÎÂ¶È
    510                    HalUARTWrite(0,end,3);
    511                    add[3] =0x02;
    512                    add[11]=0x02; //ÉèÖÃÊª¶ÈÎïÀíµØÖ·Îª02         
    513                    convert_u16[0]   = 0x00;
    514                    convert_u16[1]   = (pkt->cmd.Data)[i++];   
    515                    HalUARTWrite(0,add,12);
    516                    HalUARTWrite(0,convert_u16,6);   //Êª¶È
    517                    HalUARTWrite(0,end,3);
    518                    i++;  //Ìø¹ýÎÂÊª¶È´«¸ÐÊý¾ÝµÄ±êÖ¾Î»
    519                
    520                #if (defined Channel_0_GasSensor_Busy)
    521                    //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
    522                    Channel0_VolSave =  (float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i]);  //²»³Ë1000£¬ÈÃÆäÖµÃ»ÓÐ¸¡µã£¬µ«ÊÇ¹ýºóÒª³ýÒÔ1000
    523                    sensor_value     =   Channel0_VolSave;
    524                    convert_u16[0]   =   sensor_value>>8;
    525                    convert_u16[1]   =   (sensor_value&0x00ff);
    526                    add[3] =0x03;
    527                    add[11]=0x03;   //ÉèÖÃÓÐ»úÈÜ¼ÁÎïÀíµØÖ·Îª03
    528                    HalUARTWrite(0,add,12);
    529                    HalUARTWrite(0,convert_u16,6); 
    530                    HalUARTWrite(0,end,3);
    531                #endif
    532                  
    533                   //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
    534                  for(count=0;count<=6;count++)
    535                  {
    536                    send_data_CO[count]=(pkt->cmd.Data)[count+8];
    537                  }
    538                  for(count=0;count<=5;count++)
    539                  {
    540                    send_data_HCL[count]=(pkt->cmd.Data)[count+15];
    541                  }
    542                  for(count=0;count<=5;count++)
    543                  {
    544                    send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
    545                  }
    546                 
    547                  sensor_value = atof(send_data_CO)*10;  //½«¸¡µãÊý×ª»»³ÉÕûÊý
    548                  if(atof(send_data_CO)<0) sensor_value=0;
    549                  convert_u16[0]   =   sensor_value>>8;
    550                  convert_u16[1]   =   (sensor_value&0x00ff);
    551                  add[3] =0x04;
    552                  add[11]=0x04;   
    553                  HalUARTWrite(0,add,12);
    554                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    555                  HalUARTWrite(0,end,3);  
    556          
    557                  sensor_value = atof(send_data_HCL)*10;
    558                  if(atof(send_data_HCL)<0) sensor_value=0;
    559                  convert_u16[0]   =   sensor_value>>8;
    560                  convert_u16[1]   =   (sensor_value&0x00ff);
    561                  add[3] =0x05;
    562                  add[11]=0x05;
    563                  HalUARTWrite(0,add,12);
    564                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    565                  HalUARTWrite(0,end,3);     
    566          
    567                  sensor_value = atof(send_data_MQ3)*10;
    568                  if(atof(send_data_MQ3)<0) sensor_value=0;
    569                  convert_u16[0]   =   sensor_value>>8;
    570                  convert_u16[1]   =   (sensor_value&0x00ff);
    571                  add[3] =0x06;       
    572                  add[11]=0x06;
    573                  HalUARTWrite(0,add,12);
    574                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    575                  HalUARTWrite(0,end,3);
    576               
    577                  contin1=1;
    578                }
    579                if(EDid==2&&contin1==1)
    580                {  
    581                  /*¹¹½¨PM25Ö¡*/
    582                  for(count=0;count<6;count++)
    583                  {
    584                    send_data_PM25[count]=(pkt->cmd.Data)[count];
    585                  }
    586                  sensor_value = atof(send_data_PM25)*100;
    587                  if(atof(send_data_PM25)<0) sensor_value=0;
    588                  convert_u16[0]   =   sensor_value>>8;
    589                  convert_u16[1]   =   (sensor_value&0x00ff);
    590                  add[3] =0x07;
    591                  add[11]=0x07;
    592                  HalUARTWrite(0,add,12);
    593                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    594                  HalUARTWrite(0,end,3);
    595                  contin1=0;
    596                }      
    597          #endif
    598                break;
    599            }
    600          }
   \   000000   02....       LJMP    ?BRET
    601          
    602          
    603          /*********************************************************************
    604           * @fn      SampleAPP_SendGasSensorMessage
    605           *
    606           * @brief   Send the flash message to group 1.
    607           *
    608           * @param   flashTime - in milliseconds
    609           *
    610           * @return  none
    611           */
    612          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    613          void SampleAPP_SendGasSensorMessage(void)
   \                     SampleAPP_SendGasSensorMessage:
    614          { 
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    615            //½Úµã2--PM2.5Êý¾Ý²É¼¯
    616              uchar ch;
    617              uint16 len,time=0;
                            ^
Warning[Pe550]: variable "len" was set but never used

      uint16 len,time=0;
                 ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+PM25\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",617  Warning[Pe177]: 
          variable "time" was declared but never referenced
    618              uint8 i=0;
   \   00000A   7E00         MOV     R6,#0x0
    619              while(!(len=Hal_UART_RxBufLen(0)));
   \                     ??SampleAPP_SendGasSensorMessage_0:
   \   00000C                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   00000C   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00000F   60FB         JZ      ??SampleAPP_SendGasSensorMessage_0
    620               // if(time++==65530) break;   //µÈ´ý´®¿Ú½ÓÊÕµ½Êý¾Ý,len¿ÉÒÔ²âÊÔHal_UART_RxBufLen(0)·µ»ØµÄÊý¾Ý³¤¶È£¬²âµÃÊÇ1
    621              while(Hal_UART_RxBufLen(0))
   \                     ??SampleAPP_SendGasSensorMessage_1:
   \   000011                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000011   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000014   6052         JZ      ??SampleAPP_SendGasSensorMessage_2
    622              {
    623                pm_rxlen=HalUARTRead (0,&ch, 1);
   \   000016                ; Setup parameters for call to function HalUARTRead
   \   000016   7C01         MOV     R4,#0x1
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   AA82         MOV     R2,DPL
   \   000022   AB83         MOV     R3,DPH
   \   000024   7900         MOV     R1,#0x0
   \   000026   12....       LCALL   ??HalUARTRead?relay
   \   000029   EA           MOV     A,R2
   \   00002A   90....       MOV     DPTR,#pm_rxlen
   \   00002D   F0           MOVX    @DPTR,A
    624                RXBUF[i]=ch;
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   E0           MOVX    A,@DPTR
   \   000035   C0E0         PUSH    A
   \   000037   8E..         MOV     ?V0 + 0,R6
   \   000039   74..         MOV     A,#RXBUF & 0xff
   \   00003B   25..         ADD     A,?V0 + 0
   \   00003D   F582         MOV     DPL,A
   \   00003F   74..         MOV     A,#(RXBUF >> 8) & 0xff
   \   000041   3400         ADDC    A,#0x0
   \   000043   F583         MOV     DPH,A
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
    625                HalUARTWrite(0,&ch,1); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©   
   \   000048                ; Setup parameters for call to function HalUARTWrite
   \   000048   7C01         MOV     R4,#0x1
   \   00004A   7D00         MOV     R5,#0x0
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   AA82         MOV     R2,DPL
   \   000054   AB83         MOV     R3,DPH
   \   000056   7900         MOV     R1,#0x0
   \   000058   12....       LCALL   ??HalUARTWrite?relay
    626                if(++i == 10) break;
   \   00005B   0E           INC     R6
   \   00005C   740A         MOV     A,#0xa
   \   00005E   6E           XRL     A,R6
   \   00005F   6007         JZ      ??SampleAPP_SendGasSensorMessage_2
    627                while(Hal_UART_RxBufLen(0)==0); //¼ÌÐøµÈ´ý
   \                     ??SampleAPP_SendGasSensorMessage_3:
   \   000061                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000061   12....       LCALL   ?Subroutine0 & 0xFFFF
    628              }
   \                     ??CrossCallReturnLabel_2:
   \   000064   70AB         JNZ     ??SampleAPP_SendGasSensorMessage_1
   \   000066   80F9         SJMP    ??SampleAPP_SendGasSensorMessage_3
    629              if((RXBUF[0]==0XAA)&&(RXBUF[1]==0XC0)&&(RXBUF[9]==0XAB))
   \                     ??SampleAPP_SendGasSensorMessage_2:
   \   000068   90....       MOV     DPTR,#RXBUF
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   64AA         XRL     A,#0xaa
   \   00006E   7058         JNZ     ??SampleAPP_SendGasSensorMessage_4
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   64C0         XRL     A,#0xc0
   \   000074   7052         JNZ     ??SampleAPP_SendGasSensorMessage_4
   \   000076   90....       MOV     DPTR,#RXBUF + 9
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   64AB         XRL     A,#0xab
   \   00007C   704A         JNZ     ??SampleAPP_SendGasSensorMessage_4
    630              {
    631                  pm_data=((float)(RXBUF[3]*256+RXBUF[2]))/10;
   \   00007E   90....       MOV     DPTR,#RXBUF + 3
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   90....       MOV     DPTR,#RXBUF + 2
   \   000086   E0           MOVX    A,@DPTR
   \   000087   FA           MOV     R2,A
   \   000088   E4           CLR     A
   \   000089   2A           ADD     A,R2
   \   00008A   F5..         MOV     ?V0 + 0,A
   \   00008C   E9           MOV     A,R1
   \   00008D   F5..         MOV     ?V0 + 1,A
   \   00008F   33           RLC     A
   \   000090   95E0         SUBB    A,0xE0 /* A   */
   \   000092   F5..         MOV     ?V0 + 2,A
   \   000094   F5..         MOV     ?V0 + 3,A
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?L_TO_FLT
   \   00009B   90....       MOV     DPTR,#__Constant_41200000
   \   00009E   78..         MOV     R0,#?V0 + 4
   \   0000A0   12....       LCALL   ?L_MOV_X
   \   0000A3   78..         MOV     R0,#?V0 + 0
   \   0000A5   79..         MOV     R1,#?V0 + 4
   \   0000A7   12....       LCALL   ?FLT_DIV
   \   0000AA   90....       MOV     DPTR,#pm_data
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?L_MOV_TO_X
    632                  sprintf(PM_data,"%.1f",pm_data);
   \   0000B2                ; Setup parameters for call to function sprintf
   \   0000B2   90....       MOV     DPTR,#pm_data
   \   0000B5   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000B8   7C..         MOV     R4,#`?<Constant "%.1f">` & 0xff
   \   0000BA   7D..         MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
   \   0000BC   7A..         MOV     R2,#PM_data & 0xff
   \   0000BE   7B..         MOV     R3,#(PM_data >> 8) & 0xff
   \   0000C0   12....       LCALL   ??sprintf?relay
   \   0000C3   7404         MOV     A,#0x4
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
    633              }
    634            
    635              
    636              Transmit_data[27]=2;//½Úµã2±ê¼Ç
   \                     ??SampleAPP_SendGasSensorMessage_4:
   \   0000C8   90....       MOV     DPTR,#Transmit_data + 27
   \   0000CB   7402         MOV     A,#0x2
   \   0000CD   F0           MOVX    @DPTR,A
    637              Transmit_data[0] = PM_data[0];
   \   0000CE   90....       MOV     DPTR,#PM_data
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   90....       MOV     DPTR,#Transmit_data
   \   0000D5   F0           MOVX    @DPTR,A
    638              Transmit_data[1] = PM_data[1];
   \   0000D6   90....       MOV     DPTR,#PM_data + 1
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   90....       MOV     DPTR,#Transmit_data + 1
   \   0000DD   F0           MOVX    @DPTR,A
    639              Transmit_data[2] = PM_data[2];
   \   0000DE   90....       MOV     DPTR,#PM_data + 2
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   90....       MOV     DPTR,#Transmit_data + 2
   \   0000E5   F0           MOVX    @DPTR,A
    640              Transmit_data[3] = PM_data[3];
   \   0000E6   90....       MOV     DPTR,#PM_data + 3
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   90....       MOV     DPTR,#Transmit_data + 3
   \   0000ED   F0           MOVX    @DPTR,A
    641              Transmit_data[4] = PM_data[4];
   \   0000EE   90....       MOV     DPTR,#PM_data + 4
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   90....       MOV     DPTR,#Transmit_data + 4
   \   0000F5   F0           MOVX    @DPTR,A
    642              Transmit_data[5] = PM_data[5];
   \   0000F6   90....       MOV     DPTR,#PM_data + 5
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   90....       MOV     DPTR,#Transmit_data + 5
   \   0000FD   F0           MOVX    @DPTR,A
    643              //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
    644                if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
    645                                 SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
    646                                 28,                   //Êý¾ÝÁ¿£¨³¤¶È£©
    647                                 Transmit_data,                  //Êý¾ÝÊ×µØÖ·
    648                                 &SampleApp_TransID,
    649                                 AF_DISCV_ROUTE,
    650                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0000FE                ; Setup parameters for call to function AF_DataRequest
   \   0000FE   75..1E       MOV     ?V0 + 0,#0x1e
   \   000101   78..         MOV     R0,#?V0 + 0
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000106   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000109   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00010C   78..         MOV     R0,#?V0 + 0
   \   00010E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000111   75....       MOV     ?V0 + 0,#Transmit_data & 0xff
   \   000114   75....       MOV     ?V0 + 1,#(Transmit_data >> 8) & 0xff
   \   000117   78..         MOV     R0,#?V0 + 0
   \   000119   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011C   75..1C       MOV     ?V0 + 0,#0x1c
   \   00011F   75..00       MOV     ?V0 + 1,#0x0
   \   000122   78..         MOV     R0,#?V0 + 0
   \   000124   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000127   75..06       MOV     ?V0 + 0,#0x6
   \   00012A   78..         MOV     R0,#?V0 + 0
   \   00012C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012F   7920         MOV     R1,#0x20
   \   000131   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000133   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000135   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000137   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000139   12....       LCALL   ??AF_DataRequest?relay
   \   00013C   7409         MOV     A,#0x9
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
    651                {
    652                }
    653                
    654            
    655          }
   \   000141   7401         MOV     A,#0x1
   \   000143   12....       LCALL   ?DEALLOC_XSTACK8
   \   000146   7F08         MOV     R7,#0x8
   \   000148   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   45..         ORL     A,?V0 + 1
   \   00000A   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleAPP_SendGasSensorMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleAPP_SendGasSensorMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World\\n">`:
   \   000000   48656C6C     DB "Hello World\012"
   \            6F20576F
   \            726C640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%.1f">`:
   \   000000   252E3166     DB "%.1f"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_41200000:
   \   000000   00002041     DD 41200000H
    656          
    657          
    658          
    659          /*********************************************************************
    660          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleAPP_SendGasSensorMessage     1      0     38
       -> Hal_UART_RxBufLen             0      0     34
       -> Hal_UART_RxBufLen             0      0     34
       -> HalUARTRead                   0      0     34
       -> HalUARTWrite                  0      0     34
       -> Hal_UART_RxBufLen             0      0     34
       -> sprintf                       0      0     42
       -> AF_DataRequest                0      0     52
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> HalAdcInit                    0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
     SampleApp_MessageMSGCB             0      0     12
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleAPP_SendGasSensorMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     _A_P1                                     1
     contin                                    1
     contin1                                   1
     pm_data                                   4
     send_data_PM25                            8
     PM_data                                  20
     pm_rxlen                                  1
     RXBUF                                    20
     Transmit_data                            28
     SampleApp_ClusterList                     6
     SampleApp_SimpleDesc                     12
     SampleApp_epDesc                          6
     SampleApp_TaskID                          1
     SampleApp_NwkState                        1
     SampleApp_TransID                         1
     SampleApp_Periodic_DstAddr               12
     SampleApp_Flash_DstAddr                  12
     SampleApp_Point_To_Point_DstAddr
                                              12
     SampleApp_Group                          18
     SampleAppPeriodicCounter                  1
     SampleAppFlashCounter                     1
     SampleApp_Init                          196
     SampleApp_ProcessEvent                  152
     SampleApp_MessageMSGCB                    3
     SampleAPP_SendGasSensorMessage          331
     ?Subroutine0                             11
     ??SampleApp_Init?relay                    6
     ??SampleApp_ProcessEvent?relay            6
     ??SampleApp_MessageMSGCB?relay            6
     ??SampleAPP_SendGasSensorMessage?relay    6
     ?<Constant "Hello World\n">              13
     ?<Constant "Group 1">                     8
     ?<Constant "%.1f">                        5
     __Constant_41200000                       4

 
 693 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
  48 bytes in segment XDATA_ROM_C
 148 bytes in segment XDATA_Z
 
 717 bytes of CODE  memory
  44 bytes of CONST memory (+ 4 bytes shared)
   0 bytes of DATA  memory (+ 1 byte  shared)
 148 bytes of XDATA memory

Errors: none
Warnings: 11
