###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         17/Nov/2018  11:04:13 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\Source\SampleAp #
#                          p.c                                                #
#    Command line       =  -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+ #
#                          HCL\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ      #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+ #
#                          HCL\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\77564\Desktop\¼à²â #
#                          ÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\Sa #
#                          mpleApp\Source\SampleApp.c -D ZTOOL_P1 -D MT_TASK  #
#                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                   #
#                          xLCD_SUPPORTED=DEBUG -D Channel_0_For_TGS822 -D    #
#                          Channel_1_For_TGS813 -D uint8_Printf -D            #
#                          ASCII_Printf -lC C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ #
#                          Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\CoordinatorEB\List\ -lA                 #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\Coordi #
#                          natorEB\List\ --diag_suppress Pe001,Pa010 -o       #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\Coordi #
#                          natorEB\Obj\ -e --no_code_motion --debug           #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\77564\Desktop\¼à² #
#                          âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\ -I C:\Users\77564\Desktop\¼à²âÈ #
#                          Õ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\Source\ -I                      #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\ZMain\TI2530DB\ -I C:\Users\77564\Desktop\¼à²âÈ #
#                          Õ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\Components\hal\incl #
#                          ude\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM2 #
#                          5+CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\Components\hal\target\CC2530EB\   #
#                          -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+ #
#                          HCL\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\Components\mac\include\ -I             #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\mac\high_level\ -I             #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\mac\low_level\srf04\ -I        #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\mac\low_level\srf04\single_chi #
#                          p\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mt\ -I                   #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\osal\include\ -I               #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\services\saddr\ -I             #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\services\sdata\ -I             #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\af\ -I                   #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\nwk\ -I                  #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\sapi\ -I                 #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\sec\ -I                  #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\sys\ -I                  #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\zdo\ -I                  #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\zmac\ -I                       #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\zmac\f8w\ -Ohz                 #
#    List file          =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\Coordi #
#                          natorEB\List\SampleApp.lst                         #
#    Object file        =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\Coordi #
#                          natorEB\Obj\SampleApp.r51                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "hal_adc.h"
     75          //´Ë´¦ÓÃÓÚ´®¿Ú
     76          #include  "MT_UART.h"
     77          //ÎÂÊª¶È´«¸ÐÆ÷
     78          #include "dht11.h"
     79          //CÓïÑÔ±ê×¼¿â
     80          #include <string.h>
     81          #include <stdlib.h>
     82          #include <stdio.h>
     83          #include <math.h>
     84          //GasSensor »ñÈ¡Êý¾ÝµÄÍ·ÎÄ¼þ
     85          #include "MQ3.h"
     86          #include "TGS822.h"
     87          
     88          //CO
     89          #include <CO.h>
     90          
     91          //PM2.5
     92          #include <PM25.h>
     93          /*********************************************************************
     94           * MACROS
     95           */
     96          
     97          
     98          #define AMS1117_3_ADC_VOL     3.28   //ºê¶¨ÒåAMS1117 3.3 ADC²Î¿¼µçÑ¹£¬¸ÃÖµ¿ÉÄÜÔÚ3.2-3.4¸¡¶¯
     99          //Èç¹û¶¨ÒåÁËchannel0»òÕßchannel1¸øÆøÌå´«¸ÐÆ÷£¬Ôò
    100          #if (defined Channel_0_For_TGS813) || (defined Channel_0_For_TGS822)
    101          #define Channel_0_GasSensor_Busy
    102          #endif
    103          #if (defined Channel_1_For_TGS813) || (defined Channel_1_For_TGS822)
    104          #define Channel_1_GasSensor_Busy
    105          #endif
    106          //Èç¹û¶à¸öÆøÌå´«¸ÐÆ÷Í¬Ê±Õ¼ÓÃÍ¬Ò»¸öchannel£¬ÔòÌáÊ¾
    107          #if (defined Channel_0_For_TGS813) && (defined Channel_0_For_TGS822)
    108          #error "Channel0 is just for one gas sensor.Check the micro!"
    109          #endif
    110          #if (defined Channel_1_For_TGS813) && (defined Channel_1_For_TGS822)
    111          #error "Channel1 is just for one gas sensor.Check the micro!"
    112          
    113          #endif
    114          #if (!defined Channel_0_GasSensor_Busy) && (!defined Channel_1_GasSensor_Busy)
    115          #warning "Do you want to use the Gas Sensor? if yes,please define it,if not please ignore this message."
    116          #endif
    117          
    118          // ÉèÖÃ²»Í¬´«¸ÐÆ÷µçÑ¹ãÐÖµ
    119          // TGS813
    120          #define TGS813_Safe 0.8
    121          #define TGS813_Mildly 1.2
    122          #define TGS813_Moderate 1.8
    123          #define TGS813_Severe 2.3
    124          // TGS822
    125          #define TGS822_Safe 0.8
    126          #define TGS822_Mildly 1.2
    127          #define TGS822_Moderate 1.8
    128          #define TGS822_Severe 2.3
    129          
    130          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          char contin=0;
   \                     contin:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          char contin1=0;
   \                     contin1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          extern uint8 PM_data[6];
    134          extern unsigned short pm_data;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint8 send_data_PM25[8];
   \                     send_data_PM25:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 send_data_CO[7];
   \                     send_data_CO:
   \   000000                DS 7
   \   000007                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8 send_data_HCL[6];
   \                     send_data_HCL:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 send_data_MQ3[6];
   \                     send_data_MQ3:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    139          uint8 text[2]={'2','2'};
   \                     text:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for text>`
   \   000002                REQUIRE __INIT_XDATA_I
    140          /*********************************************************************
    141           * CONSTANTS
    142           */
    143          
    144          /*********************************************************************
    145           * TYPEDEFS
    146           */
    147          
    148          /*********************************************************************
    149           * GLOBAL VARIABLES
    150           */
    151          
    152          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    153          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
    154          {
    155            SAMPLEAPP_PERIODIC_CLUSTERID,
    156            SAMPLEAPP_FLASH_CLUSTERID
    157          };
    158          

   \                                 In  segment XDATA_ROM_C, align 1
    159          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    160          {
    161            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    162            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    163            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    164            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    165            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    166            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    167            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    168            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    169            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    170          };
    171          
    172          // This is the Endpoint/Interface description.  It is defined here, but
    173          // filled-in in SampleApp_Init().  Another way to go would be to fill
    174          // in the structure here and make it a "const" (in code space).  The
    175          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    177          
    178          /*********************************************************************
    179           * EXTERNAL VARIABLES
    180           */
    181          
    182          /*********************************************************************
    183           * EXTERNAL FUNCTIONS
    184           */
    185          
    186          /*********************************************************************
    187           * LOCAL VARIABLES
    188           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    190                                    // This variable will be received when
    191                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    193          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    195          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    197          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    199          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    200          afAddrType_t SampleApp_Point_To_Point_DstAddr;
   \                     SampleApp_Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    201          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          aps_Group_t SampleApp_Group;//·Ö×éÄÚÈÝ
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    203          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    206          
    207          
    208          //@huang
    209          //ÉèÖÃchannel0ºÍchannel1»ñÈ¡ÆøÌåÅ¨¶ÈÖ¸ÏòµÄº¯Êý
    210          #if (defined Channel_0_For_TGS822)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    211          int (*PointGetConcentrationForChannel_0)(float ,char ,unsigned char ) = TGS822GetConcentration;
   \                     PointGetConcentrationForChannel_0:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for PointGetConcentrationForChan`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    212          uint8 *GasSensorFlagForChannel_0 = &TGS822GasSen_Flag;
   \                     GasSensorFlagForChannel_0:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for GasSensorFlagForChannel_0>`
   \   000002                REQUIRE __INIT_XDATA_I
    213          #elif (defined Channel_1_For_TGS822)
    214          int (*PointGetConcentrationForChannel_1)(float ,char ,unsigned char ) = TGS822GetConcentration;
    215          uint8 *GasSensorFlagForChannel_1 = &TGS822GasSen_Flag;
    216          #endif
    217          
    218          
    219          /*********************************************************************
    220           * LOCAL FUNCTIONS
    221           */
    222          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    223          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    224          void SampleApp_SendPeriodicMessage( void );//¹ã²¥×éÍø
    225          void SampleApp_SendFlashMessage( uint16 flashTime );//×é²¥×éÍø
    226          void SampleApp_SendPointMessage( void );//µã²¥×éÍø
    227          
    228          //@huang
    229          void SampleAPP_SendGasSensorMessage(void);//×Ô¼º¶¨ÒåµÄÊý¾Ý·¢ËÍº¯Êý
    230          void GetChannel1ADC(void);
    231          void GetChannel2ADC(void);
    232          /*********************************************************************
    233           * NETWORK LAYER CALLBACKS
    234           */
    235          
    236          /*********************************************************************
    237           * PUBLIC FUNCTIONS
    238           */
    239          
    240          /*********************************************************************
    241           * @fn      SampleApp_Init
    242           *
    243           * @brief   Initialization function for the Generic App Task.
    244           *          This is called during initialization and should contain
    245           *          any application specific initialization (ie. hardware
    246           *          initialization/setup, table initialization, power up
    247           *          notificaiton ... ).
    248           *
    249           * @param   task_id - the ID assigned by OSAL.  This ID should be
    250           *                    used to send messages and set timers.
    251           *
    252           * @return  none
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    255          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    256            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    257            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    258            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    259          
    260            MT_UartInit();                //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    261            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    262            HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0C         MOV     R4,#0xc
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay
    263            PM2_5Init();//³õÊ¼»¯PM2.5º¯Êý
   \   00002B                ; Setup parameters for call to function PM2_5Init
   \   00002B   12....       LCALL   ??PM2_5Init?relay
    264            HalAdcInit();                 //ADC²Î¿¼µçÑ¹³õÊ¼»¯£¨Ä¬ÈÏÎªÄÚ²¿²Î¿¼µçÑ¹£©
   \   00002E                ; Setup parameters for call to function HalAdcInit
   \   00002E   12....       LCALL   ??HalAdcInit?relay
    265            // Device hardware initialization can be added here or in main() (Zmain.c).
    266            // If the hardware is application specific - add it here.
    267            // If the hardware is other parts of the device add it in main().
    268          
    269           #if defined ( BUILD_ALL_DEVICES )
    270            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    271            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    272            // together - if they are - we will start up a coordinator. Otherwise,
    273            // the device will start as a router.
    274            if ( readCoordinatorJumper() )
    275              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    276            else
    277              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    278          #endif // BUILD_ALL_DEVICES
    279          
    280          #if defined ( HOLD_AUTO_START )
    281            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    282            //  from starting the device and wait for the application to
    283            //  start the device.
    284            ZDOInitDevice(0);
    285          #endif
    286          
    287            // Setup for the periodic message's destination address
    288            // Broadcast to everyone
    289            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000031   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000034   740F         MOV     A,#0xf
   \   000036   F0           MOVX    @DPTR,A
    290            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000037   A3           INC     DPTR
   \   000038   7414         MOV     A,#0x14
   \   00003A   F0           MOVX    @DPTR,A
    291            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00003B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003E   74FF         MOV     A,#-0x1
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
    292          
    293            // Setup for the flash command's destination address - Group 1 //×é²¥ÉèÖÃ
    294            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000043   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000046   7401         MOV     A,#0x1
   \   000048   F0           MOVX    @DPTR,A
    295            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000049   A3           INC     DPTR
   \   00004A   7414         MOV     A,#0x14
   \   00004C   F0           MOVX    @DPTR,A
    296            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×é²¥ºÅ
   \   00004D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E4           CLR     A
   \   000055   F0           MOVX    @DPTR,A
    297            //µã²¥½á¹¹ÌåµÄ³õÊ¼»¯
    298             // Setup for the point command's destination address
    299            SampleApp_Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥
   \   000056   90....       MOV     DPTR,#SampleApp_Point_To_Point_DstAddr + 8
   \   000059   7402         MOV     A,#0x2
   \   00005B   F0           MOVX    @DPTR,A
    300            SampleApp_Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005C   A3           INC     DPTR
   \   00005D   7414         MOV     A,#0x14
   \   00005F   F0           MOVX    @DPTR,A
    301            SampleApp_Point_To_Point_DstAddr.addr.shortAddr = 0x0000;           //0x0000 Ä¬ÈÏÊÇÐ­µ÷Æ÷µÄµØÖ·
   \   000060   90....       MOV     DPTR,#SampleApp_Point_To_Point_DstAddr
   \   000063   E4           CLR     A
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   F0           MOVX    @DPTR,A
    302            // Fill out the endpoint description.
    303            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000067   90....       MOV     DPTR,#SampleApp_epDesc
   \   00006A   7414         MOV     A,#0x14
   \   00006C   F0           MOVX    @DPTR,A
    304            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00006D   A3           INC     DPTR
   \   00006E   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000074   F0           MOVX    @DPTR,A
    305            SampleApp_epDesc.simpleDesc
    306                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000075   A3           INC     DPTR
   \   000076   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00007C   F0           MOVX    @DPTR,A
    307            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00007D   A3           INC     DPTR
   \   00007E   E4           CLR     A
   \   00007F   F0           MOVX    @DPTR,A
    308          
    309            // Register the endpoint description with the AF
    310            afRegister( &SampleApp_epDesc );
   \   000080                ; Setup parameters for call to function afRegister
   \   000080   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000082   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000084   12....       LCALL   ??afRegister?relay
    311          
    312            // Register for all key events - This app will handle all key events
    313            RegisterForKeys( SampleApp_TaskID );
   \   000087                ; Setup parameters for call to function RegisterForKeys
   \   000087   90....       MOV     DPTR,#SampleApp_TaskID
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??RegisterForKeys?relay
    314          
    315            // By default, all devices start out in Group 1
    316            SampleApp_Group.ID = 0x0001;
   \   00008F   90....       MOV     DPTR,#SampleApp_Group
   \   000092   7401         MOV     A,#0x1
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   E4           CLR     A
   \   000097   F0           MOVX    @DPTR,A
    317            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000098                ; Setup parameters for call to function osal_memcpy
   \   000098   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00009B   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00009E   F5..         MOV     ?V0 + 2,A
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A5   7C07         MOV     R4,#0x7
   \   0000A7   7D00         MOV     R5,#0x0
   \   0000A9   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000AB   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000AD   12....       LCALL   ??osal_memcpy?relay
   \   0000B0   7403         MOV     A,#0x3
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
    318            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000B5                ; Setup parameters for call to function aps_AddGroup
   \   0000B5   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B7   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B9   7914         MOV     R1,#0x14
   \   0000BB   12....       LCALL   ??aps_AddGroup?relay
    319          
    320          #if defined ( LCD_SUPPORTED )
    321            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    322          #endif
    323          
    324            //Èç¹ûÃ»ÓÐÊ¹ÓÃPA£¬ÔòÁÁµÆ£¨»òÕßÆäËû£©£¬Èç¹ûÊ¹ÓÃÁËPA£¬Ôò...
    325          #if defined (HAL_PA_LNA)
    326            HAL_TURN_ON_LED2();
   \   0000BE   C291         CLR     0x90.1
    327          #endif
    328          }
   \   0000C0   7F03         MOV     R7,#0x3
   \   0000C2   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000C5                REQUIRE _A_P1
    329          
    330          /*********************************************************************
    331           * @fn      SampleApp_ProcessEvent
    332           *
    333           * @brief   Generic Application Task event processor.  This function
    334           *          is called to process all events for the task.  Events
    335           *          include timers, messages and any other user defined events.
    336           *
    337           * @param   task_id  - The OSAL assigned task ID.
    338           * @param   events - events to process.  This is a bit map and can
    339           *                   contain more than one event.
    340           *
    341           * @return  none
    342           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    343          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    344          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    345            afIncomingMSGPacket_t *MSGpkt;
    346            (void)task_id;  // Intentionally unreferenced parameter
    347          
    348            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   605C         JZ      ??SampleApp_ProcessEvent_0
    349            {
    350              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    351              while ( MSGpkt )
    352              {
    353                switch ( MSGpkt->hdr.event )
    354                {
    355                  /* Received when a key is pressed
    356                  case KEY_CHANGE:
    357                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    358                    break;*/
    359          
    360                  // Received when a messages is received (OTA) for this endpoint
    361                  case AF_INCOMING_MSG_CMD:
    362                    SampleApp_MessageMSGCB( MSGpkt );
    363                      //¹¤×÷Ö¸Ê¾µÆ
    364                     //HAL_TOGGLE_LED2();
    365                    break;
    366          
    367                  // Received whenever the device changes state in the network
    368                  case ZDO_STATE_CHANGE:
    369                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    370                    if ( //(SampleApp_NwkState == DEV_ZB_COORD)||       //Ð­µ÷Æ÷²»ÔÊÐí¶Ô×Ô¼ºµã²¥£¬Ö»ÔÊÐíÂ·ÓÉÆ÷ºÍÖÕ¶Ë¶ÔÐ­µ÷Æ÷µã²¥
    371                        (SampleApp_NwkState == DEV_ROUTER)
    372                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    373                    {
    374                      // Start sending the periodic message in a regular interval.
    375                      osal_start_timerEx( SampleApp_TaskID,                    //¸Ãº¯Êý¶¨Ê±´¥·¢ÊÂ¼þ
    376                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,        //²ÎÊýÒÀ´ÎÊÇ¡°ÈÎÎñID¡±
    377                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );  //¡°×¢²áÊÂ¼þ¡±¡°Ñ­»·Ê±¼ä¡±
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    378                    }
    379                    else
    380                    {
    381                      // Device is no longer in the network
    382                    }
    383                    break;
    384          
    385                  default:
    386                    break;
    387                }
    388          
    389                // Release the memory
    390                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    391          
    392                // Next - if one is available
    393                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   601A         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000052   2449         ADD     A,#0x49
   \   000054   60B9         JZ      ??SampleApp_ProcessEvent_2
   \   000056   80D6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000058                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000058   AA..         MOV     R2,?V0 + 0
   \   00005A   AB..         MOV     R3,?V0 + 1
   \   00005C   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00005F   80CD         SJMP    ??SampleApp_ProcessEvent_4
    394              }
    395          
    396              // return unprocessed events
    397              return (events ^ SYS_EVENT_MSG);                        //·µ»ØÃ»ÓÐ´¦ÀíµÄÊÂ¼þ
   \                     ??SampleApp_ProcessEvent_5:
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   000066   FB           MOV     R3,A
   \   000067   802A         SJMP    ??SampleApp_ProcessEvent_8
    398            }
    399          
    400            // Send a message out - This event is generated by a timer
    401            //  (setup in SampleApp_Init()).
    402            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000069   EE           MOV     A,R6
   \   00006A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006C   5021         JNC     ??SampleApp_ProcessEvent_9
    403            {
    404              // Send the periodic message
    405               SampleAPP_SendGasSensorMessage();      //·¢ËÍ´«¸ÐÆ÷Êý¾ÝµÄº¯Êý
   \   00006E                ; Setup parameters for call to function SampleAPP_SendGasSensorMessage
   \   00006E   12....       LCALL   ??SampleAPP_SendGasSensorMessage?relay
    406              // Setup to send message again in normal period (+ a little jitter)
    407              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    408                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000071                ; Setup parameters for call to function osal_rand
   \   000071   12....       LCALL   ??osal_rand?relay
   \   000074                ; Setup parameters for call to function osal_start_timerEx
   \   000074   EA           MOV     A,R2
   \   000075   24E8         ADD     A,#-0x18
   \   000077   FC           MOV     R4,A
   \   000078   E4           CLR     A
   \   000079   3403         ADDC    A,#0x3
   \   00007B   FD           MOV     R5,A
   \   00007C   7A01         MOV     R2,#0x1
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   90....       MOV     DPTR,#SampleApp_TaskID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??osal_start_timerEx?relay
    409          
    410              // return unprocessed events
    411              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000088   EE           MOV     A,R6
   \   000089   6401         XRL     A,#0x1
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   80D7         SJMP    ??SampleApp_ProcessEvent_7
    412            }
    413          
    414            // Discard unknown events
    415            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   00008F   7A00         MOV     R2,#0x0
   \   000091   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   000093   7F04         MOV     R7,#0x4
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
    416          }
    417          
    418          /*********************************************************************
    419           * LOCAL FUNCTIONS
    420           */
    421          
    422          /*********************************************************************
    423           * @fn      SampleApp_MessageMSGCB
    424           *
    425           * @brief   Data message processor callback.  This function processes
    426           *          any incoming data - probably from other devices.  So, based
    427           *          on cluster ID, perform the intended action.
    428           *
    429           * @param   none
    430           *
    431           * @return  none
    432           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    433          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    434          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    435            float Channel0_VolSave = 0.0f;
    436            char  convert_arr[20];
    437            uint8 convert_u16[20];
    438            //ÓÉÓÚÓÐÁù¸ö×Ö½Ú´«ÊäÊý¾Ý£¬Ö»ÓÃµ½Á½¸ö£¬ËùÒÔºóÃæËÄ¸öÊý¾Ý×Ö½ÚÓÃ0xff±íÊ¾
    439            convert_u16[2]   = 0xff;
    440            convert_u16[3]   = 0xff;
    441            convert_u16[4]   = 0xff;
    442            convert_u16[5]   = 0xff;  
    443            uint8 add[]={0xfe,0x10,0x69,0x01,0x83,0xf2,0x2e,0x01,0x00,0x4b,0x12,0x01};//³õÊ¼ÀàÎª01£¬µØÖ·01£¬Ö¡Í·
    444            uint8 end[]={0x77,0x88,0x12};  //Ö¡Î²
    445            uint8 i=0;
    446            u16   sensor_value=0;
    447            char count;
    448          
    449            switch ( pkt->clusterId )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6406         XRL     A,#0x6
   \   000019   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   00001D   6003         JZ      $+5
   \   00001F   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    450            {
    451            
    452            case SAMPLEAPP_GAS_SENSOR_CLUSTERID:
    453                i=0;//ÓÃÓÚ¼ÇÂ¼Êý¾Ý°üµÄ¼ÆÊý×Ó
    454                char EDid=0;
    455                EDid=(pkt->cmd.Data)[27];
   \   000022   EE           MOV     A,R6
   \   000023   2422         ADD     A,#0x22
   \   000025   F582         MOV     DPL,A
   \   000027   EF           MOV     A,R7
   \   000028   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00002B   241B         ADD     A,#0x1b
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   3400         ADDC    A,#0x0
   \   000032   F9           MOV     R1,A
   \   000033   8882         MOV     DPL,R0
   \   000035   8983         MOV     DPH,R1
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
    456          #if defined (ASCII_Printf) //ÉèÖÃÎª×Ö·ûÊä³ö
    457                if(EDid==1&&contin==0)
   \   000039   7401         MOV     A,#0x1
   \   00003B   68           XRL     A,R0
   \   00003C   6003         JZ      $+5
   \   00003E   02....       LJMP    ??SampleApp_MessageMSGCB_2 & 0xFFFF
   \   000041   90....       MOV     DPTR,#contin
   \   000044   E0           MOVX    A,@DPTR
   \   000045   6003         JZ      $+5
   \   000047   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    458                //if(1)
    459                {
    460                  /*ÏÔÊ¾ÊÕµ½µÄÊý¾ÝÁ¿
    461                    sprintf(convert_arr,"DataLength:%d\r\n",pkt->cmd.DataLength);
    462                    HalUARTWrite(0,convert_arr,strlen(convert_arr));*/
    463                
    464                    //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
    465                    sprintf(convert_arr,"TEMP£º%d C\r\n",(pkt->cmd.Data)[i]),i++; //Òþ²ØTEMP
   \   00004A   EE           MOV     A,R6
   \   00004B   2422         ADD     A,#0x22
   \   00004D   F5..         MOV     ?V0 + 0,A
   \   00004F   EF           MOV     A,R7
   \   000050   3400         ADDC    A,#0x0
   \   000052   F5..         MOV     ?V0 + 1,A
   \   000054                ; Setup parameters for call to function sprintf
   \   000054   85..82       MOV     DPL,?V0 + 0
   \   000057   F583         MOV     DPH,A
   \   000059   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00005C   F5..         MOV     ?V0 + 2,A
   \   00005E   75..00       MOV     ?V0 + 3,#0x0
   \   000061   78..         MOV     R0,#?V0 + 2
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   7C..         MOV     R4,#`?<Constant "TEMP\\243\\272%d C\\r\\n">` & 0xff
   \   000068   7D..         MOV     R5,#(`?<Constant "TEMP\\243\\272%d C\\r\\n">` >> 8) & 0xff
   \   00006A   7402         MOV     A,#0x2
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   AA82         MOV     R2,DPL
   \   000071   AB83         MOV     R3,DPH
   \   000073   12....       LCALL   ??sprintf?relay
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
    466                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00007B                ; Setup parameters for call to function HalUARTWrite
   \   00007B                ; Setup parameters for call to function strlen
   \   00007B   12....       LCALL   ?Subroutine2 & 0xFFFF
    467                    sprintf(convert_arr,"HUMI£º%dRH\r\n",(pkt->cmd.Data)[i]),i++;//Òþ²ØHUMI
   \                     ??CrossCallReturnLabel_4:
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F5..         MOV     ?V0 + 2,A
   \   000081   78..         MOV     R0,#?V0 + 2
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   7C..         MOV     R4,#`?<Constant "HUMI\\243\\272%dRH\\r\\n">` & 0xff
   \   000088   7D..         MOV     R5,#(`?<Constant "HUMI\\243\\272%dRH\\r\\n">` >> 8) & 0xff
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   AA82         MOV     R2,DPL
   \   000091   AB83         MOV     R3,DPH
   \   000093   12....       LCALL   ??sprintf?relay
   \   000096   7402         MOV     A,#0x2
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
    468                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00009B                ; Setup parameters for call to function HalUARTWrite
   \   00009B                ; Setup parameters for call to function strlen
   \   00009B   12....       LCALL   ?Subroutine2 & 0xFFFF
    469                
    470                    //ÅÐ¶Ï±êÖ¾Î»£¬²¢¸ø³öÌáÊ¾ÐÅÏ¢
    471                    //DHT³ö´í
    472                    if((pkt->cmd.Data)[i++] & (1<<0))
   \                     ??CrossCallReturnLabel_5:
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000A2   500D         JNC     ??SampleApp_MessageMSGCB_3
    473                    {
    474                      HalUARTWrite(0,"DHT11 Error!\r\n",strlen("DHT11 Error!\r\n"));
   \   0000A4                ; Setup parameters for call to function HalUARTWrite
   \   0000A4   7C0E         MOV     R4,#0xe
   \   0000A6   7D00         MOV     R5,#0x0
   \   0000A8   7A..         MOV     R2,#`?<Constant "DHT11 Error!\\r\\n">` & 0xff
   \   0000AA   7B..         MOV     R3,#(`?<Constant "DHT11 Error!\\r\\n">` >> 8) & 0xff
   \   0000AC   7900         MOV     R1,#0x0
   \   0000AE   12....       LCALL   ??HalUARTWrite?relay
    475                    }
    476                
    477                #if (defined Channel_0_GasSensor_Busy)
    478                    //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
    479                    Channel0_VolSave =  (float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])/1000;
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000B1   85..82       MOV     DPL,?V0 + 0
   \   0000B4   85..83       MOV     DPH,?V0 + 1
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F8           MOV     R0,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F9           MOV     R1,A
   \   0000BC   8882         MOV     DPL,R0
   \   0000BE   8983         MOV     DPH,R1
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   FA           MOV     R2,A
   \   0000C6   8882         MOV     DPL,R0
   \   0000C8   8983         MOV     DPH,R1
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F9           MOV     R1,A
   \   0000CF   EA           MOV     A,R2
   \   0000D0   2400         ADD     A,#0x0
   \   0000D2   F5..         MOV     ?V0 + 0,A
   \   0000D4   E4           CLR     A
   \   0000D5   39           ADDC    A,R1
   \   0000D6   F5..         MOV     ?V0 + 1,A
   \   0000D8   E4           CLR     A
   \   0000D9   F5..         MOV     ?V0 + 2,A
   \   0000DB   78..         MOV     R0,#?V0 + 0
   \   0000DD   12....       LCALL   ?UL_TO_FLT
   \   0000E0   90....       MOV     DPTR,#__Constant_447a0000
   \   0000E3   78..         MOV     R0,#?V0 + 4
   \   0000E5   12....       LCALL   ?L_MOV_X
   \   0000E8   78..         MOV     R0,#?V0 + 0
   \   0000EA   79..         MOV     R1,#?V0 + 4
   \   0000EC   12....       LCALL   ?FLT_DIV
    480                    sprintf(convert_arr,"vol0£º%.3fV\r\n",Channel0_VolSave),i+=2;
   \   0000EF                ; Setup parameters for call to function sprintf
   \   0000EF   78..         MOV     R0,#?V0 + 0
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000F4   7C..         MOV     R4,#`?<Constant "vol0\\243\\272%.3fV\\r\\n">` & 0xff
   \   0000F6   7D..         MOV     R5,#(`?<Constant "vol0\\243\\272%.3fV\\r\\n">` >> 8) & 0xff
   \   0000F8   7404         MOV     A,#0x4
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000100   12....       LCALL   ?DEALLOC_XSTACK8
    481                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000103                ; Setup parameters for call to function HalUARTWrite
   \   000103                ; Setup parameters for call to function strlen
   \   000103   12....       LCALL   ?Subroutine11 & 0xFFFF
    482                    if(Channel0_VolSave < TGS822_Safe)
   \                     ??CrossCallReturnLabel_19:
   \   000106   90....       MOV     DPTR,#__Constant_3f4ccccd
   \   000109   78..         MOV     R0,#?V0 + 4
   \   00010B   12....       LCALL   ?L_MOV_X
   \   00010E   78..         MOV     R0,#?V0 + 0
   \   000110   79..         MOV     R1,#?V0 + 4
   \   000112   12....       LCALL   ?FLT_LT
   \   000115   5006         JNC     ??SampleApp_MessageMSGCB_4
    483                      sprintf(convert_arr,"Level: Ã»ÓÐÎÛÈ¾\r\n");
   \   000117                ; Setup parameters for call to function sprintf
   \   000117   7C..         MOV     R4,#`?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31` & 0xff
   \   000119   7D..         MOV     R5,#(`?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31` >> 8) & 0xff
   \   00011B   8043         SJMP    ??SampleApp_MessageMSGCB_5
    484                    else if(Channel0_VolSave < TGS822_Mildly)
   \                     ??SampleApp_MessageMSGCB_4:
   \   00011D   90....       MOV     DPTR,#__Constant_3f99999a
   \   000120   78..         MOV     R0,#?V0 + 4
   \   000122   12....       LCALL   ?L_MOV_X
   \   000125   78..         MOV     R0,#?V0 + 0
   \   000127   79..         MOV     R1,#?V0 + 4
   \   000129   12....       LCALL   ?FLT_LT
   \   00012C   5006         JNC     ??SampleApp_MessageMSGCB_6
    485                      sprintf(convert_arr,"Level: Çá¶ÈÎÛÈ¾\r\n");
   \   00012E                ; Setup parameters for call to function sprintf
   \   00012E   7C..         MOV     R4,#`?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31` & 0xff
   \   000130   7D..         MOV     R5,#(`?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31` >> 8) & 0xff
   \   000132   802C         SJMP    ??SampleApp_MessageMSGCB_5
    486                    else if(Channel0_VolSave < TGS822_Moderate)
   \                     ??SampleApp_MessageMSGCB_6:
   \   000134   90....       MOV     DPTR,#__Constant_3fe66666
   \   000137   78..         MOV     R0,#?V0 + 4
   \   000139   12....       LCALL   ?L_MOV_X
   \   00013C   78..         MOV     R0,#?V0 + 0
   \   00013E   79..         MOV     R1,#?V0 + 4
   \   000140   12....       LCALL   ?FLT_LT
   \   000143   5006         JNC     ??SampleApp_MessageMSGCB_7
    487                      sprintf(convert_arr,"Level: ÖÐ¶ÈÎÛÈ¾\r\n");
   \   000145                ; Setup parameters for call to function sprintf
   \   000145   7C..         MOV     R4,#`?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31` & 0xff
   \   000147   7D..         MOV     R5,#(`?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31` >> 8) & 0xff
   \   000149   8015         SJMP    ??SampleApp_MessageMSGCB_5
    488                    else if(Channel0_VolSave < TGS822_Severe)
   \                     ??SampleApp_MessageMSGCB_7:
   \   00014B   90....       MOV     DPTR,#__Constant_40133333
   \   00014E   78..         MOV     R0,#?V0 + 4
   \   000150   12....       LCALL   ?L_MOV_X
   \   000153   78..         MOV     R0,#?V0 + 0
   \   000155   79..         MOV     R1,#?V0 + 4
   \   000157   12....       LCALL   ?FLT_LT
   \   00015A   5011         JNC     ??SampleApp_MessageMSGCB_8
    489                      sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
   \   00015C                ; Setup parameters for call to function sprintf
   \   00015C   7C..         MOV     R4,#`?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31` & 0xff
   \   00015E   7D..         MOV     R5,#(`?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31` >> 8) & 0xff
   \                     ??SampleApp_MessageMSGCB_5:
   \   000160   85..82       MOV     DPL,?XSP + 0
   \   000163   85..83       MOV     DPH,?XSP + 1
   \   000166   AA82         MOV     R2,DPL
   \   000168   AB83         MOV     R3,DPH
   \   00016A   12....       LCALL   ??sprintf?relay
    490                //      sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
    491                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

    uint8 convert_u16[20];
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",437  Warning[Pe550]: 
          variable "convert_u16" was set but never used

    uint8 add[]={0xfe,0x10,0x69,0x01,0x83,0xf2,0x2e,0x01,0x00,0x4b,0x12,0x01};//³õÊ¼ÀàÎª01£¬µØÖ·01£¬Ö¡Í·
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",443  Warning[Pe177]: 
          variable "add" was declared but never referenced

    uint8 end[]={0x77,0x88,0x12};  //Ö¡Î²
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",444  Warning[Pe177]: 
          variable "end" was declared but never referenced

    u16   sensor_value=0;
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",446  Warning[Pe177]: 
          variable "sensor_value" was declared but never referenced
   \                     ??SampleApp_MessageMSGCB_8:
   \   00016D                ; Setup parameters for call to function HalUARTWrite
   \   00016D                ; Setup parameters for call to function strlen
   \   00016D   12....       LCALL   ?Subroutine11 & 0xFFFF
    492                    //    sprintf(convert_arr,"concen0£º%dppm\r\n",BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])),i+=2;
    493                //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    494                //    sprintf(convert_arr,"Flag0:0x%x\r\n",(pkt->cmd.Data)[i]),i++;
    495                //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    496                #endif
    497                  
    498                   //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
    499                  for(count=0;count<=6;count++)
   \                     ??CrossCallReturnLabel_20:
   \   000170   7C00         MOV     R4,#0x0
    500                  {
    501                    send_data_CO[count]=(pkt->cmd.Data)[count+8];
   \                     ??SampleApp_MessageMSGCB_9:
   \   000172   8C82         MOV     DPL,R4
   \   000174   A882         MOV     R0,DPL
   \   000176   12....       LCALL   ?Subroutine5 & 0xFFFF
    502                  }
   \                     ??CrossCallReturnLabel_9:
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \   000182   C0E0         PUSH    A
   \   000184   74..         MOV     A,#send_data_CO & 0xff
   \   000186   28           ADD     A,R0
   \   000187   F582         MOV     DPL,A
   \   000189   74..         MOV     A,#(send_data_CO >> 8) & 0xff
   \   00018B   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00018E   D0E0         POP     A
   \   000190   F0           MOVX    @DPTR,A
   \   000191   0C           INC     R4
   \   000192   EC           MOV     A,R4
   \   000193   C3           CLR     C
   \   000194   9407         SUBB    A,#0x7
   \   000196   40DA         JC      ??SampleApp_MessageMSGCB_9
    503                  for(count=0;count<=5;count++)
   \   000198   7C00         MOV     R4,#0x0
    504                  {
    505                    send_data_HCL[count]=(pkt->cmd.Data)[count+15];
   \                     ??SampleApp_MessageMSGCB_10:
   \   00019A   12....       LCALL   ?Subroutine6 & 0xFFFF
    506                  }
   \                     ??CrossCallReturnLabel_11:
   \   00019D   240F         ADD     A,#0xf
   \   00019F   F582         MOV     DPL,A
   \   0001A1   E9           MOV     A,R1
   \   0001A2   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0001A5   C0E0         PUSH    A
   \   0001A7   74..         MOV     A,#send_data_HCL & 0xff
   \   0001A9   2A           ADD     A,R2
   \   0001AA   F582         MOV     DPL,A
   \   0001AC   74..         MOV     A,#(send_data_HCL >> 8) & 0xff
   \   0001AE   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0001B1   D0E0         POP     A
   \   0001B3   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001B6   40E2         JC      ??SampleApp_MessageMSGCB_10
    507                  for(count=0;count<=5;count++)
   \   0001B8   7C00         MOV     R4,#0x0
    508                  {
    509                    send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
   \                     ??SampleApp_MessageMSGCB_11:
   \   0001BA   12....       LCALL   ?Subroutine6 & 0xFFFF
    510                  }
   \                     ??CrossCallReturnLabel_12:
   \   0001BD   2415         ADD     A,#0x15
   \   0001BF   F582         MOV     DPL,A
   \   0001C1   E9           MOV     A,R1
   \   0001C2   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0001C5   C0E0         PUSH    A
   \   0001C7   74..         MOV     A,#send_data_MQ3 & 0xff
   \   0001C9   2A           ADD     A,R2
   \   0001CA   F582         MOV     DPL,A
   \   0001CC   74..         MOV     A,#(send_data_MQ3 >> 8) & 0xff
   \   0001CE   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0001D1   D0E0         POP     A
   \   0001D3   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001D6   40E2         JC      ??SampleApp_MessageMSGCB_11
    511                  HalUARTWrite(0, "CO:", 3);
   \   0001D8                ; Setup parameters for call to function HalUARTWrite
   \   0001D8   7C03         MOV     R4,#0x3
   \   0001DA   7D00         MOV     R5,#0x0
   \   0001DC   7A..         MOV     R2,#`?<Constant "CO:">` & 0xff
   \   0001DE   7B..         MOV     R3,#(`?<Constant "CO:">` >> 8) & 0xff
   \   0001E0   7900         MOV     R1,#0x0
   \   0001E2   12....       LCALL   ??HalUARTWrite?relay
    512                  HalUARTWrite(0, send_data_CO, 7); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   0001E5                ; Setup parameters for call to function HalUARTWrite
   \   0001E5   7C07         MOV     R4,#0x7
   \   0001E7   7D00         MOV     R5,#0x0
   \   0001E9   7A..         MOV     R2,#send_data_CO & 0xff
   \   0001EB   7B..         MOV     R3,#(send_data_CO >> 8) & 0xff
   \   0001ED   7900         MOV     R1,#0x0
   \   0001EF   12....       LCALL   ??HalUARTWrite?relay
    513                  HalUARTWrite(0, "ppm", 3);
   \   0001F2   75....       MOV     ?V0 + 0,#`?<Constant "ppm">` & 0xff
   \   0001F5   75....       MOV     ?V0 + 1,#(`?<Constant "ppm">` >> 8) & 0xff
   \   0001F8                ; Setup parameters for call to function HalUARTWrite
   \   0001F8   12....       LCALL   ?Subroutine13 & 0xFFFF
    514                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    515                  
    516                  HalUARTWrite(0, "HCL:", 4);
   \                     ??CrossCallReturnLabel_33:
   \   0001FB                ; Setup parameters for call to function HalUARTWrite
   \   0001FB   7C04         MOV     R4,#0x4
   \   0001FD   7D00         MOV     R5,#0x0
   \   0001FF   7A..         MOV     R2,#`?<Constant "HCL:">` & 0xff
   \   000201   7B..         MOV     R3,#(`?<Constant "HCL:">` >> 8) & 0xff
   \   000203   12....       LCALL   ?Subroutine3 & 0xFFFF
    517                  HalUARTWrite(0, send_data_HCL, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \                     ??CrossCallReturnLabel_30:
   \   000206   7A..         MOV     R2,#send_data_HCL & 0xff
   \   000208   7B..         MOV     R3,#(send_data_HCL >> 8) & 0xff
   \   00020A   12....       LCALL   ?Subroutine0 & 0xFFFF
    518                  HalUARTWrite(0, "ppm", 3);
    519                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    520                  
    521                  HalUARTWrite(0, "AOL:", 4);
   \                     ??CrossCallReturnLabel_0:
   \   00020D                ; Setup parameters for call to function HalUARTWrite
   \   00020D   7C04         MOV     R4,#0x4
   \   00020F   7D00         MOV     R5,#0x0
   \   000211   7A..         MOV     R2,#`?<Constant "AOL:">` & 0xff
   \   000213   7B..         MOV     R3,#(`?<Constant "AOL:">` >> 8) & 0xff
   \   000215   12....       LCALL   ?Subroutine3 & 0xFFFF
    522                  HalUARTWrite(0, send_data_MQ3, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \                     ??CrossCallReturnLabel_31:
   \   000218   7A..         MOV     R2,#send_data_MQ3 & 0xff
   \   00021A   7B..         MOV     R3,#(send_data_MQ3 >> 8) & 0xff
   \   00021C   12....       LCALL   ?Subroutine0 & 0xFFFF
    523                  HalUARTWrite(0, "ppm", 3);
    524                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    525                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
   \                     ??CrossCallReturnLabel_1:
   \   00021F                ; Setup parameters for call to function HalUARTWrite
   \   00021F   7C02         MOV     R4,#0x2
   \   000221   7D00         MOV     R5,#0x0
   \   000223   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   000225   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000227   12....       LCALL   ?Subroutine1 & 0xFFFF
    526                  HalUARTWrite(0, "\r\n", 2);
    527                  //sprintf(text,"HELLO!",(pkt->cmd.Data)[i]);
    528                  
    529                  contin=1;
    530                            //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
    531          
    532                }
   \                     ??CrossCallReturnLabel_2:
   \   00022A   7401         MOV     A,#0x1
   \   00022C   804C         SJMP    ??SampleApp_MessageMSGCB_12
    533                if(EDid==2&&contin==1)
   \                     ??SampleApp_MessageMSGCB_2:
   \   00022E   7402         MOV     A,#0x2
   \   000230   68           XRL     A,R0
   \   000231   7048         JNZ     ??SampleApp_MessageMSGCB_1
   \   000233   90....       MOV     DPTR,#contin
   \   000236   E0           MOVX    A,@DPTR
   \   000237   6401         XRL     A,#0x1
   \   000239   7040         JNZ     ??SampleApp_MessageMSGCB_1
    534                {
    535                  for(count=0;count<6;count++)
   \   00023B   7C00         MOV     R4,#0x0
    536                  {
    537                    send_data_PM25[count]=(pkt->cmd.Data)[count];
   \                     ??SampleApp_MessageMSGCB_13:
   \   00023D   8C82         MOV     DPL,R4
   \   00023F   A882         MOV     R0,DPL
   \   000241   7900         MOV     R1,#0x0
   \   000243   12....       LCALL   ?Subroutine5 & 0xFFFF
    538                  }
   \                     ??CrossCallReturnLabel_10:
   \   000246   E0           MOVX    A,@DPTR
   \   000247   C0E0         PUSH    A
   \   000249   74..         MOV     A,#send_data_PM25 & 0xff
   \   00024B   28           ADD     A,R0
   \   00024C   F582         MOV     DPL,A
   \   00024E   74..         MOV     A,#(send_data_PM25 >> 8) & 0xff
   \   000250   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000253   D0E0         POP     A
   \   000255   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000258   40E3         JC      ??SampleApp_MessageMSGCB_13
    539                  HalUARTWrite(0, "PM2.5:", 6);
   \   00025A                ; Setup parameters for call to function HalUARTWrite
   \   00025A   7C06         MOV     R4,#0x6
   \   00025C   7D00         MOV     R5,#0x0
   \   00025E   7A..         MOV     R2,#`?<Constant "PM2.5:">` & 0xff
   \   000260   7B..         MOV     R3,#(`?<Constant "PM2.5:">` >> 8) & 0xff
   \   000262   12....       LCALL   ??Subroutine17_0 & 0xFFFF
    540                  HalUARTWrite(0, send_data_PM25, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \                     ??CrossCallReturnLabel_32:
   \   000265   7A..         MOV     R2,#send_data_PM25 & 0xff
   \   000267   7B..         MOV     R3,#(send_data_PM25 >> 8) & 0xff
   \   000269   7900         MOV     R1,#0x0
   \   00026B   12....       LCALL   ??HalUARTWrite?relay
    541                  HalUARTWrite(0, "ug/m3", 5);
   \   00026E                ; Setup parameters for call to function HalUARTWrite
   \   00026E   7C05         MOV     R4,#0x5
   \   000270   7D00         MOV     R5,#0x0
   \   000272   7A..         MOV     R2,#`?<Constant "ug/m3">` & 0xff
   \   000274   7B..         MOV     R3,#(`?<Constant "ug/m3">` >> 8) & 0xff
   \   000276   12....       LCALL   ?Subroutine1 & 0xFFFF
    542                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    543          
    544                  contin=0;
    545                }
    546          #endif
    547          
    548          #if defined (uint8_Printf_not) //ÉèÖÃÎª16½øÖÆÏÔÊ¾Êä³ö,È¡ÏûÊä³ö¾Í¼Ó¸ö_not
    549                if(EDid==1&&contin1==0)
    550                {
    551                
    552                    i=0;
    553                    add[3] =0x01;
    554                    add[11]=0x01; //ÉèÖÃÎÂ¶ÈÎïÀíµØÖ·Îª01
    555                    convert_u16[0]   = 0x00;
    556                    convert_u16[1]   = (pkt->cmd.Data)[i++]; 
    557                    HalUARTWrite(0,add,12);
    558                    HalUARTWrite(0,convert_u16,6);   //ÎÂ¶È
    559                    HalUARTWrite(0,end,3);
    560                    add[3] =0x02;
    561                    add[11]=0x02; //ÉèÖÃÊª¶ÈÎïÀíµØÖ·Îª02         
    562                    convert_u16[0]   = 0x00;
    563                    convert_u16[1]   = (pkt->cmd.Data)[i++];   
    564                    HalUARTWrite(0,add,12);
    565                    HalUARTWrite(0,convert_u16,6);   //Êª¶È
    566                    HalUARTWrite(0,end,3);
    567                    i++;  //Ìø¹ýÎÂÊª¶È´«¸ÐÊý¾ÝµÄ±êÖ¾Î»
    568                
    569                #if (defined Channel_0_GasSensor_Busy)
    570                    //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
    571                    Channel0_VolSave =  (float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i]);  //²»³Ë1000£¬ÈÃÆäÖµÃ»ÓÐ¸¡µã£¬µ«ÊÇ¹ýºóÒª³ýÒÔ1000
    572                    sensor_value     =   Channel0_VolSave;
    573                    convert_u16[0]   =   sensor_value>>8;
    574                    convert_u16[1]   =   (sensor_value&0x00ff);
    575                    add[3] =0x03;
    576                    add[11]=0x03;   //ÉèÖÃÓÐ»úÈÜ¼ÁÎïÀíµØÖ·Îª03
    577                    HalUARTWrite(0,add,12);
    578                    HalUARTWrite(0,convert_u16,6); 
    579                    HalUARTWrite(0,end,3);
    580                #endif
    581                  
    582                   //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
    583                  for(count=0;count<=6;count++)
    584                  {
    585                    send_data_CO[count]=(pkt->cmd.Data)[count+8];
    586                  }
    587                  for(count=0;count<=5;count++)
    588                  {
    589                    send_data_HCL[count]=(pkt->cmd.Data)[count+15];
    590                  }
    591                  for(count=0;count<=5;count++)
    592                  {
    593                    send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
    594                  }
    595                 
    596                  sensor_value = atof(send_data_CO)*10;  //½«¸¡µãÊý×ª»»³ÉÕûÊý
    597                  if(atof(send_data_CO)<0) sensor_value=0;
    598                  convert_u16[0]   =   sensor_value>>8;
    599                  convert_u16[1]   =   (sensor_value&0x00ff);
    600                  add[3] =0x04;
    601                  add[11]=0x04;   
    602                  HalUARTWrite(0,add,12);
    603                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    604                  HalUARTWrite(0,end,3);  
    605          
    606                  sensor_value = atof(send_data_HCL)*10;
    607                  if(atof(send_data_HCL)<0) sensor_value=0;
    608                  convert_u16[0]   =   sensor_value>>8;
    609                  convert_u16[1]   =   (sensor_value&0x00ff);
    610                  add[3] =0x05;
    611                  add[11]=0x05;
    612                  HalUARTWrite(0,add,12);
    613                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    614                  HalUARTWrite(0,end,3);     
    615          
    616                  sensor_value = atof(send_data_MQ3)*10;
    617                  if(atof(send_data_MQ3)<0) sensor_value=0;
    618                  convert_u16[0]   =   sensor_value>>8;
    619                  convert_u16[1]   =   (sensor_value&0x00ff);
    620                  add[3] =0x06;       
    621                  add[11]=0x06;
    622                  HalUARTWrite(0,add,12);
    623                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    624                  HalUARTWrite(0,end,3);
    625               
    626                  contin1=1;
    627                }
    628                if(EDid==2&&contin1==1)
    629                {  
    630                  /*¹¹½¨PM25Ö¡*/
    631                  for(count=0;count<6;count++)
    632                  {
    633                    send_data_PM25[count]=(pkt->cmd.Data)[count];
    634                  }
    635                  sensor_value = atof(send_data_PM25)*100;
    636                  if(atof(send_data_PM25)<0) sensor_value=0;
    637                  convert_u16[0]   =   sensor_value>>8;
    638                  convert_u16[1]   =   (sensor_value&0x00ff);
    639                  add[3] =0x07;
    640                  add[11]=0x07;
    641                  HalUARTWrite(0,add,12);
    642                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    643                  HalUARTWrite(0,end,3);
    644                  contin1=0;
    645                }      
    646          #endif
    647                break;
    648            }
   \                     ??CrossCallReturnLabel_3:
   \   000279   E4           CLR     A
   \                     ??SampleApp_MessageMSGCB_12:
   \   00027A   F0           MOVX    @DPTR,A
    649          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   00027B   7414         MOV     A,#0x14
   \   00027D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000280   7F08         MOV     R7,#0x8
   \   000282   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   12....       LCALL   ??strlen?relay
   \   00000D   EA           MOV     A,R2
   \   00000E   FC           MOV     R4,A
   \   00000F   EB           MOV     A,R3
   \   000010   FD           MOV     R5,A
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   AA82         MOV     R2,DPL
   \   000019   AB83         MOV     R3,DPH
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   ??HalUARTWrite?relay
   \   000020   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8C82         MOV     DPL,R4
   \   000002   AA82         MOV     R2,DPL
   \   000004   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000007   2A           ADD     A,R2
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \   00000E   E8           MOV     A,R0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   28           ADD     A,R0
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   3400         ADDC    A,#0x0
   \   000009   8A82         MOV     DPL,R2
   \   00000B   F583         MOV     DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   0C           INC     R4
   \   000002   EC           MOV     A,R4
   \   000003   C3           CLR     C
   \   000004   9406         SUBB    A,#0x6
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7900         MOV     R1,#0x0
   \   000002                REQUIRE ??Subroutine17_0
   \   000002                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   12....       LCALL   ??HalUARTWrite?relay
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003   7C06         MOV     R4,#0x6
   \   000005   7D00         MOV     R5,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003                ; Setup parameters for call to function sprintf
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   90....       MOV     DPTR,#contin
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7C03         MOV     R4,#0x3
   \   000002   7D00         MOV     R5,#0x0
   \   000004   AA..         MOV     R2,?V0 + 0
   \   000006   AB..         MOV     R3,?V0 + 1
   \   000008                REQUIRE ??Subroutine18_0
   \   000008                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C02         MOV     R4,#0x2
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??sprintf?relay
   \   000007   7404         MOV     A,#0x4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    650          
    651          
    652          /*********************************************************************
    653           * @fn      SampleAPP_SendGasSensorMessage
    654           *
    655           * @brief   Send the flash message to group 1.
    656           *
    657           * @param   flashTime - in milliseconds
    658           *
    659           * @return  none
    660           */
    661          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    662          void SampleAPP_SendGasSensorMessage(void)
   \                     SampleAPP_SendGasSensorMessage:
    663          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    664            
    665            uint8 Transmit_data[28];              //ÐèÒª·¢ËÍµÄÊý¾Ý    °ü=¹«¹²Êý¾Ý(ÎÂÊª¶ÈÊý¾ÝºÍ±êÖ¾Î»)+Í¨µÀ0Êý¾ÝºÍ±êÖ¾+Í¨µÀ1Êý¾ÝºÍ±êÖ¾£¬ºóÃæÁ½¸öÊý¾Ý¿ÉÑ¡
    666            float val,val1,co_value,HCL_value,mq3_value;
    667            //Ò»¸ö½Úµã ÎÂÊª¶ÈºÍ¾Æ¾«
    668            //¹«¹²°ü
    669            
    670            char temp;                   //ÎÂ¶È
    671            unsigned char humi;          //Êª¶È
    672            uint8 PublicFlag=0;         //¸Ã±äÁ¿¼ÇÂ¼ÁËDHT11µÄ×´Ì¬£¨ÊÇ·ñ¶ÁÈ¡³É¹¦)£¬»¹¿ÉÒÔ¼ÇÂ¼ÆäËû×´Ì¬
    673            Transmit_data[27]=1;//½Úµã1±ê¼Ç
   \   00000A   7424         MOV     A,#0x24
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
    674          #if (defined Channel_0_GasSensor_Busy)
    675            float  ADC_Channel_0_Vol=0;             //ADCµçÑ¹
    676            uint16 ADC_Channel_0_Vol_ForTx = 0;    //½«µçÑ¹Öµ³ËÉÏ1000£¬ÓÃÓÚ·¢ËÍ³öÈ¥
    677            uint16 ADC_Channel_0_RegData;          //ADC¼Ä´æÆ÷Êý¾Ý
    678            uint16 Channel_0_GasSenDataSave=0;     //±£´æÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
    679          #endif
    680          
    681            uint8 i=0;                            //Ñ­»·ÒªÓÃµ½
    682            uint8 TxPackLength=0;                 //¼ÇÂ¼°ü³¤¶È
    683            PublicFlag =0;                        //Çå¿Õ±êÖ¾Î»
   \   000012   7E00         MOV     R6,#0x0
    684          
    685            uint8 ADC_Result_ASCII[20];
    686            //ADC²âÊÔ½á¹û£¬Ê¹ÓÃÄÚ²¿²Î¿¼µçÑ¹ÊÇ×î×¼È·µÄ2017 2 19
    687            //×¢Òâ¶Å°îÏßµÄÑ¹½µÐèÒª²¹³¥£¬Êµ¼ÊµçÂ·ÖÐ£¬Îñ±Ø²âÊÔ´«¸ÐÆ÷Òý½Åµ½ADCÒý½ÅµÄÑ¹½µ£¬È»ºóÈí¼þ¼ÓÒÔ²¹³¥¡£2017 2 19
    688            //ÎÂ¶È´«¸ÐÆ÷  DHT11
    689            //DHT11¶ÁÈ¡Ê§°Ü£¬¿ÉÄÜDHT11Ëð»µ£¬¿ÉÄÜDHT11±»°Î³ö»òÕßÁ¬ÏßËÉ¶¯
    690              if(dht11_value(&temp , &humi , DHT11_UINT8) != 0)
                                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000014                ; Setup parameters for call to function dht11_value
   \   000014   7902         MOV     R1,#0x2
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   AC82         MOV     R4,DPL
   \   00001E   AD83         MOV     R5,DPH
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   AA82         MOV     R2,DPL
   \   000025   AB83         MOV     R3,DPH
   \   000027   12....       LCALL   ??dht11_value?relay
   \   00002A   E9           MOV     A,R1
   \   00002B   6012         JZ      ??SampleAPP_SendGasSensorMessage_0
    691              {
    692                temp = DHT11_TEMP_DEFAULT;  //ÉèÖÃÎÂÊª¶ÈÎªÄ¬ÈÏÖµ
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7419         MOV     A,#0x19
   \   000034   F0           MOVX    @DPTR,A
    693                humi = DHT11_HUMI_DEFAULT;
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   7441         MOV     A,#0x41
   \   00003D   F0           MOVX    @DPTR,A
    694                PublicFlag |= (1<<0);     //ÖÃÎ»±êÖ¾Î»
   \   00003E   0E           INC     R6
    695              }
    696              Transmit_data[TxPackLength] = (uint8)temp , TxPackLength++;                     //×°ÈëÎÂ¶È,TxPackLength=0
   \                     ??SampleAPP_SendGasSensorMessage_0:
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C0E0         PUSH    A
   \   000047   7409         MOV     A,#0x9
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   D0E0         POP     A
   \   00004E   F0           MOVX    @DPTR,A
    697              Transmit_data[TxPackLength] = (uint8)humi , TxPackLength++;                     //×°ÈëÊª¶È
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   C0E0         PUSH    A
   \   000058   740A         MOV     A,#0xa
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   D0E0         POP     A
   \   00005F   F0           MOVX    @DPTR,A
    698              Transmit_data[TxPackLength] =  PublicFlag , TxPackLength++;                    //×°Èë¹«¹²±êÖ¾Î»
   \   000060   740B         MOV     A,#0xb
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   EE           MOV     A,R6
   \   000066   F0           MOVX    @DPTR,A
    699          
    700          //Èç¹ûÓÃµ½ÁËchanne0Ôò±àÒë£¬Ê¹ÓÃP0.0£¬½«Í¨µÀ0Êý¾ÝºÍ±êÖ¾Î»×°Èë·¢ËÍ°üÖÐ
    701          #if (defined Channel_0_GasSensor_Busy)
    702              //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
    703              ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_1,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_1£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
   \   000067                ; Setup parameters for call to function HalAdcRead
   \   000067   7A04         MOV     R2,#0x4
   \   000069   7901         MOV     R1,#0x1
   \   00006B   12....       LCALL   ??HalAdcRead?relay
   \   00006E   8A..         MOV     ?V0 + 0,R2
   \   000070   8B..         MOV     ?V0 + 1,R3
   \   000072   AE..         MOV     R6,?V0 + 0
   \   000074   AF..         MOV     R7,?V0 + 1
    704              for(i=0;i<10;i++)
   \   000076   75..0A       MOV     ?V0 + 0,#0xa
    705              {
    706                ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_1,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_1,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
    707                ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
   \                     ??SampleAPP_SendGasSensorMessage_1:
   \   000079                ; Setup parameters for call to function HalAdcRead
   \   000079   7A04         MOV     R2,#0x4
   \   00007B   7901         MOV     R1,#0x1
   \   00007D   12....       LCALL   ??HalAdcRead?relay
   \   000080   8A..         MOV     ?V0 + 2,R2
   \   000082   8B..         MOV     ?V0 + 3,R3
   \   000084   EE           MOV     A,R6
   \   000085   25..         ADD     A,?V0 + 2
   \   000087   FE           MOV     R6,A
   \   000088   EF           MOV     A,R7
   \   000089   35..         ADDC    A,?V0 + 3
   \   00008B   C3           CLR     C
   \   00008C   13           RRC     A
   \   00008D   FF           MOV     R7,A
   \   00008E   EE           MOV     A,R6
   \   00008F   13           RRC     A
   \   000090   FE           MOV     R6,A
    708              }
   \   000091   15..         DEC     ?V0 + 0
   \   000093   E5..         MOV     A,?V0 + 0
   \   000095   70E2         JNZ     ??SampleAPP_SendGasSensorMessage_1
    709              ADC_Channel_0_Vol =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ
   \   000097   8E..         MOV     ?V0 + 0,R6
   \   000099   8F..         MOV     ?V0 + 1,R7
   \   00009B   E4           CLR     A
   \   00009C   F5..         MOV     ?V0 + 2,A
   \   00009E   F5..         MOV     ?V0 + 3,A
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?UL_TO_FLT
   \   0000A5   90....       MOV     DPTR,#__Constant_4051eb85
   \   0000A8   78..         MOV     R0,#?V0 + 4
   \   0000AA   12....       LCALL   ?L_MOV_X
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   79..         MOV     R1,#?V0 + 4
   \   0000B1   12....       LCALL   ?FLT_MUL
   \   0000B4   90....       MOV     DPTR,#__Constant_39000000
   \   0000B7   78..         MOV     R0,#?V0 + 4
   \   0000B9   12....       LCALL   ?L_MOV_X
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   79..         MOV     R1,#?V0 + 4
   \   0000C0   12....       LCALL   ?FLT_MUL
    710              ADC_Channel_0_Vol_ForTx = (uint16)(ADC_Channel_0_Vol * 1000);
   \   0000C3   85....       MOV     ?V0 + 4,?V0 + 0
   \   0000C6   85....       MOV     ?V0 + 5,?V0 + 1
   \   0000C9   85....       MOV     ?V0 + 6,?V0 + 2
   \   0000CC   85....       MOV     ?V0 + 7,?V0 + 3
   \   0000CF   90....       MOV     DPTR,#__Constant_447a0000
   \   0000D2   78..         MOV     R0,#?V0 + 8
   \   0000D4   12....       LCALL   ?L_MOV_X
   \   0000D7   78..         MOV     R0,#?V0 + 4
   \   0000D9   79..         MOV     R1,#?V0 + 8
   \   0000DB   12....       LCALL   ?FLT_MUL
   \   0000DE   78..         MOV     R0,#?V0 + 4
   \   0000E0   12....       LCALL   ?FLT_TO_L
   \   0000E3   AE..         MOV     R6,?V0 + 4
    711          
    712              //Gas sensor»ñÈ¡Êý¾Ý,±£´æÆðÀ´
    713              Channel_0_GasSenDataSave = (uint16)PointGetConcentrationForChannel_0(ADC_Channel_0_Vol,temp,humi);
   \   0000E5                ; Setup parameters for indirect call
   \   0000E5   85..82       MOV     DPL,?XSP + 0
   \   0000E8   85..83       MOV     DPH,?XSP + 1
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F5..         MOV     ?V0 + 4,A
   \   0000EE   78..         MOV     R0,#?V0 + 4
   \   0000F0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F3   7402         MOV     A,#0x2
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F9           MOV     R1,A
   \   0000FA   AA..         MOV     R2,?V0 + 0
   \   0000FC   AB..         MOV     R3,?V0 + 1
   \   0000FE   AC..         MOV     R4,?V0 + 2
   \   000100   AD..         MOV     R5,?V0 + 3
   \   000102   90....       MOV     DPTR,#PointGetConcentrationForChannel_0
   \   000105   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000108   12....       LCALL   ?CALL_IND
   \   00010B   7401         MOV     A,#0x1
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
    714          
    715              Transmit_data[TxPackLength] = HI_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
   \   000110   740C         MOV     A,#0xc
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   E5..         MOV     A,?V0 + 5
   \   000117   F0           MOVX    @DPTR,A
    716              Transmit_data[TxPackLength] = LO_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
   \   000118   740D         MOV     A,#0xd
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   EE           MOV     A,R6
   \   00011E   F0           MOVX    @DPTR,A
    717              Transmit_data[TxPackLength] = HI_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶È¸ß°ËÎ»
   \   00011F   740E         MOV     A,#0xe
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   EB           MOV     A,R3
   \   000125   F0           MOVX    @DPTR,A
    718              Transmit_data[TxPackLength] = LO_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶ÈµÍ°ËÎ»
   \   000126   740F         MOV     A,#0xf
   \   000128   12....       LCALL   ?XSTACK_DISP0_8
   \   00012B   EA           MOV     A,R2
   \   00012C   F0           MOVX    @DPTR,A
    719              Transmit_data[TxPackLength] = *GasSensorFlagForChannel_0, TxPackLength++;                  //×°Èë±êÖ¾Î»
   \   00012D   90....       MOV     DPTR,#GasSensorFlagForChannel_0
   \   000130   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000133   C0E0         PUSH    A
   \   000135   7410         MOV     A,#0x10
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   D0E0         POP     A
   \   00013C   F0           MOVX    @DPTR,A
    720          #endif
    721              
    722              //COÊý¾Ý²É¼¯ 
    723              uint8 data[7];
    724              char num;
    725              val=ValreadP0_4();//¶ÁÈ¡COµÄµçÑ¹Öµ
   \   00013D                ; Setup parameters for call to function ValreadP0_4
   \   00013D   12....       LCALL   ??ValreadP0_4?relay
   \   000140   8A..         MOV     ?V0 + 0,R2
   \   000142   8B..         MOV     ?V0 + 1,R3
   \   000144   8C..         MOV     ?V0 + 2,R4
   \   000146   8D..         MOV     ?V0 + 3,R5
    726              co_value=val*2000+3.67*2;
    727              //co_value=val*1000;
    728              memset(data,0,7);
   \   000148                ; Setup parameters for call to function memset
   \   000148   75..07       MOV     ?V0 + 4,#0x7
   \   00014B   75..00       MOV     ?V0 + 5,#0x0
   \   00014E   78..         MOV     R0,#?V0 + 4
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000153   7C00         MOV     R4,#0x0
   \   000155   7D00         MOV     R5,#0x0
   \   000157   7404         MOV     A,#0x4
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   AA82         MOV     R2,DPL
   \   00015E   AB83         MOV     R3,DPH
   \   000160   12....       LCALL   ??memset?relay
   \   000163   7402         MOV     A,#0x2
   \   000165   12....       LCALL   ?DEALLOC_XSTACK8
    729              sprintf(data,"%.1f",co_value);
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000168                ; Setup parameters for call to function sprintf
   \   000168   90....       MOV     DPTR,#__Constant_44fa0000
   \   00016B   78..         MOV     R0,#?V0 + 4
   \   00016D   12....       LCALL   ?L_MOV_X
   \   000170   78..         MOV     R0,#?V0 + 0
   \   000172   79..         MOV     R1,#?V0 + 4
   \   000174   12....       LCALL   ?FLT_MUL
   \   000177   90....       MOV     DPTR,#__Constant_40eae148
   \   00017A   78..         MOV     R0,#?V0 + 4
   \   00017C   12....       LCALL   ?L_MOV_X
   \   00017F   78..         MOV     R0,#?V0 + 0
   \   000181   79..         MOV     R1,#?V0 + 4
   \   000183   12....       LCALL   ?FLT_ADD
   \   000186   78..         MOV     R0,#?V0 + 0
   \   000188   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00018B   7C..         MOV     R4,#`?<Constant "%.1f">` & 0xff
   \   00018D   7D..         MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
   \   00018F   7406         MOV     A,#0x6
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000197   12....       LCALL   ?DEALLOC_XSTACK8
    730              for(num=0;num<=6;num++)//×°COµÄÊý¾Ý
   \   00019A   7A00         MOV     R2,#0x0
    731              {
    732                Transmit_data[num+8]=data[num];
   \                     ??SampleAPP_SendGasSensorMessage_2:
   \   00019C   8A82         MOV     DPL,R2
   \   00019E   A882         MOV     R0,DPL
   \   0001A0   7402         MOV     A,#0x2
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   12....       LCALL   ?Subroutine7 & 0xFFFF
    733              }
   \                     ??CrossCallReturnLabel_46:
   \   0001A8   C0E0         PUSH    A
   \   0001AA   7409         MOV     A,#0x9
   \   0001AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AF   E582         MOV     A,DPL
   \   0001B1   28           ADD     A,R0
   \   0001B2   F582         MOV     DPL,A
   \   0001B4   E583         MOV     A,DPH
   \   0001B6   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   A3           INC     DPTR
   \   0001C1   D0E0         POP     A
   \   0001C3   F0           MOVX    @DPTR,A
   \   0001C4   0A           INC     R2
   \   0001C5   EA           MOV     A,R2
   \   0001C6   C3           CLR     C
   \   0001C7   9407         SUBB    A,#0x7
   \   0001C9   40D1         JC      ??SampleAPP_SendGasSensorMessage_2
    734              
    735              //HCLÊý¾Ý²É¼¯
    736              val1=ValreadP0_0();//¶ÁÈ¡HCLµÄµçÑ¹Öµ
   \   0001CB                ; Setup parameters for call to function ValreadP0_0
   \   0001CB   12....       LCALL   ??ValreadP0_0?relay
   \   0001CE   8A..         MOV     ?V0 + 0,R2
   \   0001D0   8B..         MOV     ?V0 + 1,R3
   \   0001D2   8C..         MOV     ?V0 + 2,R4
   \   0001D4   8D..         MOV     ?V0 + 3,R5
    737              if(val1>3.6)//Êý¾ÝÅÅ²é
   \   0001D6   90....       MOV     DPTR,#__Constant_40666667
   \   0001D9   78..         MOV     R0,#?V0 + 4
   \   0001DB   12....       LCALL   ?L_MOV_X
   \   0001DE   78..         MOV     R0,#?V0 + 0
   \   0001E0   79..         MOV     R1,#?V0 + 4
   \   0001E2   12....       LCALL   ?FLT_GE
   \   0001E5   5008         JNC     ??SampleAPP_SendGasSensorMessage_3
    738                  val1=0;
   \   0001E7   90....       MOV     DPTR,#__Constant_0
   \   0001EA   78..         MOV     R0,#?V0 + 0
   \   0001EC   12....       LCALL   ?L_MOV_X
    739              HCL_value = (val1*1000-330)*20/1427;
    740              memset(data,0,7);//Çå³ýÊý×é
   \                     ??SampleAPP_SendGasSensorMessage_3:
   \   0001EF                ; Setup parameters for call to function memset
   \   0001EF   75..07       MOV     ?V0 + 4,#0x7
   \   0001F2   75..00       MOV     ?V0 + 5,#0x0
   \   0001F5   78..         MOV     R0,#?V0 + 4
   \   0001F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FA   7C00         MOV     R4,#0x0
   \   0001FC   7D00         MOV     R5,#0x0
   \   0001FE   7404         MOV     A,#0x4
   \   000200   12....       LCALL   ?XSTACK_DISP0_8
   \   000203   AA82         MOV     R2,DPL
   \   000205   AB83         MOV     R3,DPH
   \   000207   12....       LCALL   ??memset?relay
   \   00020A   7402         MOV     A,#0x2
   \   00020C   12....       LCALL   ?DEALLOC_XSTACK8
    741              sprintf(data,"%.1f",HCL_value);//½«Êý¾Ý×ª»¯³É×Ö·û´®£¬²¢ÇÒ×°½øÊý×éÀïÃæ
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   00020F                ; Setup parameters for call to function sprintf
   \   00020F   90....       MOV     DPTR,#__Constant_447a0000
   \   000212   78..         MOV     R0,#?V0 + 4
   \   000214   12....       LCALL   ?L_MOV_X
   \   000217   78..         MOV     R0,#?V0 + 0
   \   000219   79..         MOV     R1,#?V0 + 4
   \   00021B   12....       LCALL   ?FLT_MUL
   \   00021E   90....       MOV     DPTR,#__Constant_c3a50000
   \   000221   78..         MOV     R0,#?V0 + 4
   \   000223   12....       LCALL   ?L_MOV_X
   \   000226   78..         MOV     R0,#?V0 + 0
   \   000228   79..         MOV     R1,#?V0 + 4
   \   00022A   12....       LCALL   ?FLT_ADD
   \   00022D   90....       MOV     DPTR,#__Constant_41a00000
   \   000230   78..         MOV     R0,#?V0 + 4
   \   000232   12....       LCALL   ?L_MOV_X
   \   000235   78..         MOV     R0,#?V0 + 0
   \   000237   79..         MOV     R1,#?V0 + 4
   \   000239   12....       LCALL   ?FLT_MUL
   \   00023C   90....       MOV     DPTR,#__Constant_44b26000
   \   00023F   78..         MOV     R0,#?V0 + 4
   \   000241   12....       LCALL   ?L_MOV_X
   \   000244   78..         MOV     R0,#?V0 + 0
   \   000246   79..         MOV     R1,#?V0 + 4
   \   000248   12....       LCALL   ?FLT_DIV
   \   00024B   78..         MOV     R0,#?V0 + 0
   \   00024D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000250   7C..         MOV     R4,#`?<Constant "%.1f">` & 0xff
   \   000252   7D..         MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
   \   000254   7406         MOV     A,#0x6
   \   000256   12....       LCALL   ?XSTACK_DISP0_8
   \   000259   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00025C   12....       LCALL   ?DEALLOC_XSTACK8
    742              
    743              for(num=0;num<=5;num++)//×°HCLµÄÊý¾Ý
   \   00025F   7A00         MOV     R2,#0x0
    744              {
    745                Transmit_data[num+15]=data[num];
   \                     ??SampleAPP_SendGasSensorMessage_4:
   \   000261   8A82         MOV     DPL,R2
   \   000263   A882         MOV     R0,DPL
   \   000265   7402         MOV     A,#0x2
   \   000267   12....       LCALL   ?XSTACK_DISP0_8
   \   00026A   12....       LCALL   ?Subroutine7 & 0xFFFF
    746              }
   \                     ??CrossCallReturnLabel_47:
   \   00026D   C0E0         PUSH    A
   \   00026F   7409         MOV     A,#0x9
   \   000271   12....       LCALL   ?XSTACK_DISP0_8
   \   000274   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000277   240F         ADD     A,#0xf
   \   000279   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00027C   D0E0         POP     A
   \   00027E   F0           MOVX    @DPTR,A
   \   00027F   0A           INC     R2
   \   000280   EA           MOV     A,R2
   \   000281   C3           CLR     C
   \   000282   9406         SUBB    A,#0x6
   \   000284   40DB         JC      ??SampleAPP_SendGasSensorMessage_4
    747              
    748              //¾Æ¾«mq3Êý¾Ý²É¼¯
    749              val1=ValreadP0_5();//¶ÁÈ¡MQ3µÄµçÑ¹Öµ
   \   000286                ; Setup parameters for call to function ValreadP0_5
   \   000286   12....       LCALL   ??ValreadP0_5?relay
    750              //mq3_value = val1;  //µçÑ¹Öµ¸³¸ø¾Æ¾«µçÑ¹Öµ
    751              mq3_value=55.1;
    752              memset(data,0,7);//Çå³ýÊý×é
   \   000289                ; Setup parameters for call to function memset
   \   000289   75..07       MOV     ?V0 + 0,#0x7
   \   00028C   75..00       MOV     ?V0 + 1,#0x0
   \   00028F   78..         MOV     R0,#?V0 + 0
   \   000291   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000294   7C00         MOV     R4,#0x0
   \   000296   7D00         MOV     R5,#0x0
   \   000298   7404         MOV     A,#0x4
   \   00029A   12....       LCALL   ?XSTACK_DISP0_8
   \   00029D   AA82         MOV     R2,DPL
   \   00029F   AB83         MOV     R3,DPH
   \   0002A1   12....       LCALL   ??memset?relay
   \   0002A4   7402         MOV     A,#0x2
   \   0002A6   12....       LCALL   ?DEALLOC_XSTACK8
    753              sprintf(data,"%.1f",mq3_value);//½«Êý¾Ý×ª»¯³É×Ö·û´®£¬²¢ÇÒ×°½øÊý×éÀïÃæ
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

    uint8 ADC_Result_ASCII[20];
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",685  Warning[Pe177]: 
          variable "ADC_Result_ASCII" was declared but never referenced
   \   0002A9                ; Setup parameters for call to function sprintf
   \   0002A9   90....       MOV     DPTR,#__Constant_425c6666
   \   0002AC   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0002AF   7C..         MOV     R4,#`?<Constant "%.1f">` & 0xff
   \   0002B1   7D..         MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
   \   0002B3   7406         MOV     A,#0x6
   \   0002B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B8   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0002BB   12....       LCALL   ?DEALLOC_XSTACK8
    754              for(num=0;num<=5;num++)//×°MQ3µÄÊý¾Ý
   \   0002BE   7A00         MOV     R2,#0x0
    755              {
    756                Transmit_data[num+21]=data[num];
   \                     ??SampleAPP_SendGasSensorMessage_5:
   \   0002C0   8A82         MOV     DPL,R2
   \   0002C2   A882         MOV     R0,DPL
   \   0002C4   7402         MOV     A,#0x2
   \   0002C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C9   12....       LCALL   ?Subroutine7 & 0xFFFF
    757              }
   \                     ??CrossCallReturnLabel_48:
   \   0002CC   C0E0         PUSH    A
   \   0002CE   7409         MOV     A,#0x9
   \   0002D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D3   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0002D6   2415         ADD     A,#0x15
   \   0002D8   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0002DB   D0E0         POP     A
   \   0002DD   F0           MOVX    @DPTR,A
   \   0002DE   0A           INC     R2
   \   0002DF   EA           MOV     A,R2
   \   0002E0   C3           CLR     C
   \   0002E1   9406         SUBB    A,#0x6
   \   0002E3   40DB         JC      ??SampleAPP_SendGasSensorMessage_5
    758              
    759              //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
    760              if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
    761                               SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
    762                               28,                   //Êý¾ÝÁ¿£¨³¤¶È£©
    763                               Transmit_data,                  //Êý¾ÝÊ×µØÖ·
    764                               &SampleApp_TransID,
    765                               AF_DISCV_ROUTE,
    766                               AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0002E5                ; Setup parameters for call to function AF_DataRequest
   \   0002E5   75..1E       MOV     ?V0 + 0,#0x1e
   \   0002E8   78..         MOV     R0,#?V0 + 0
   \   0002EA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002ED   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0002F0   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0002F3   78..         MOV     R0,#?V0 + 0
   \   0002F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002F8   740C         MOV     A,#0xc
   \   0002FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FD   8582..       MOV     ?V0 + 0,DPL
   \   000300   8583..       MOV     ?V0 + 1,DPH
   \   000303   78..         MOV     R0,#?V0 + 0
   \   000305   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000308   75..1C       MOV     ?V0 + 0,#0x1c
   \   00030B   75..00       MOV     ?V0 + 1,#0x0
   \   00030E   78..         MOV     R0,#?V0 + 0
   \   000310   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000313   75..06       MOV     ?V0 + 0,#0x6
   \   000316   78..         MOV     R0,#?V0 + 0
   \   000318   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00031B   7920         MOV     R1,#0x20
   \   00031D   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00031F   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000321   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000323   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000325   12....       LCALL   ??AF_DataRequest?relay
   \   000328   7409         MOV     A,#0x9
   \   00032A   12....       LCALL   ?DEALLOC_XSTACK8
    767              {
    768              }
    769            
    770            
    771            //½Úµã2
    772            //PM2.5Êý¾Ý²É¼¯
    773            /*
    774            Transmit_data[27]=2;//½Úµã2±ê¼Ç
    775            Transmit_data[0] = PM_data[0];
    776            Transmit_data[1] = PM_data[1];
    777            Transmit_data[2] = PM_data[2];
    778            Transmit_data[3] = PM_data[3];
    779            Transmit_data[5] = PM_data[5];
    780            Transmit_data[4] = PM_data[4];
    781            Transmit_data[6] = (pm_data>>8);
    782            Transmit_data[7] = (pm_data&0x00ff);
    783            //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
    784              if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
    785                               SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
    786                               28,                   //Êý¾ÝÁ¿£¨³¤¶È£©
    787                               Transmit_data,                  //Êý¾ÝÊ×µØÖ·
    788                               &SampleApp_TransID,
    789                               AF_DISCV_ROUTE,
    790                               AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    791              {
    792              }
    793            */
    794          }
   \   00032D   7425         MOV     A,#0x25
   \   00032F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000332   7F0C         MOV     R7,#0xc
   \   000334   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F8           MOV     R0,A
   \   000004   E583         MOV     A,DPH
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F582         MOV     DPL,A
   \   000002   E9           MOV     A,R1
   \   000003                REQUIRE ??Subroutine19_0
   \   000003                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007                REQUIRE ??Subroutine20_0
   \   000007                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for text>`:
   \   000000   32           DB 50
   \   000001   32           DB 50

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for PointGetConcentrationForChan`:
   \   000000   ....         DW ??TGS822GetConcentration?relay

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for GasSensorFlagForChannel_0>`:
   \   000000   ....         DW TGS822GasSen_Flag

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleAPP_SendGasSensorMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleAPP_SendGasSensorMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World\\n">`:
   \   000000   48656C6C     DB "Hello World\012"
   \            6F20576F
   \            726C640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TEMP\\243\\272%d C\\r\\n">`:
   \   000000   54454D50     DB "TEMP\243\272%d C\015\012"
   \            A3BA2564
   \            20430D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HUMI\\243\\272%dRH\\r\\n">`:
   \   000000   48554D49     DB "HUMI\243\272%dRH\015\012"
   \            A3BA2564
   \            52480D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DHT11 Error!\\r\\n">`:
   \   000000   44485431     DB "DHT11 Error!\015\012"
   \            31204572
   \            726F7221
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "vol0\\243\\272%.3fV\\r\\n">`:
   \   000000   766F6C30     DB "vol0\243\272%.3fV\015\012"
   \            A3BA252E
   \            3366560D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31`:
   \   000000   4C657665     DB "Level: \303\273\323\320\316\333\310\276\015\012"
   \            6C3A20C3
   \            BBD3D0CE
   \            DBC8BE0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31`:
   \   000000   4C657665     DB "Level: \307\341\266\310\316\333\310\276\015\012"
   \            6C3A20C7
   \            E1B6C8CE
   \            DBC8BE0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31`:
   \   000000   4C657665     DB "Level: \326\320\266\310\316\333\310\276\015\012"
   \            6C3A20D6
   \            D0B6C8CE
   \            DBC8BE0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31`:
   \   000000   4C657665     DB "Level: \326\330\266\310\316\333\310\276\015\012"
   \            6C3A20D6
   \            D8B6C8CE
   \            DBC8BE0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CO:">`:
   \   000000   434F3A00     DB "CO:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ppm">`:
   \   000000   70706D00     DB "ppm"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HCL:">`:
   \   000000   48434C3A     DB "HCL:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AOL:">`:
   \   000000   414F4C3A     DB "AOL:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PM2.5:">`:
   \   000000   504D322E     DB "PM2.5:"
   \            353A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ug/m3">`:
   \   000000   75672F6D     DB "ug/m3"
   \            3300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%.1f">`:
   \   000000   252E3166     DB "%.1f"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_447a0000:
   \   000000   00007A44     DD 447A0000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f4ccccd:
   \   000000   CDCC4C3F     DD 3F4CCCCDH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f99999a:
   \   000000   9A99993F     DD 3F99999AH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3fe66666:
   \   000000   6666E63F     DD 3FE66666H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40133333:
   \   000000   33331340     DD 40133333H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4051eb85:
   \   000000   85EB5140     DD 4051EB85H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_39000000:
   \   000000   00000039     DD 39000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_44fa0000:
   \   000000   0000FA44     DD 44FA0000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40eae148:
   \   000000   48E1EA40     DD 40EAE148H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40666667:
   \   000000   67666640     DD 40666667H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c3a50000:
   \   000000   0000A5C3     DD 0C3A50000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_41a00000:
   \   000000   0000A041     DD 41A00000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_44b26000:
   \   000000   0060B244     DD 44B26000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_425c6666:
   \   000000   66665C42     DD 425C6666H
    795          
    796          /*********************************************************************
    797          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleAPP_SendGasSensorMessage     1      0     78
       -> dht11_value                   0      0    114
       -> HalAdcRead                    0      0    114
       -> HalAdcRead                    0      0    114
       -> ValreadP0_4                   0      0    114
       -> memset                        0      0    118
       -> sprintf                       0      0    122
       -> ValreadP0_0                   0      0    114
       -> memset                        0      0    118
       -> sprintf                       0      0    122
       -> ValreadP0_5                   0      0    114
       -> memset                        0      0    118
       -> sprintf                       0      0    122
       -> AF_DataRequest                0      0    132
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> PM2_5Init                     0      0     22
       -> HalAdcInit                    0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
     SampleApp_MessageMSGCB             1      0     52
       -> sprintf                       0      0     76
       -> strlen                        0      0     72
       -> HalUARTWrite                  0      0     72
       -> sprintf                       0      0     76
       -> strlen                        0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> sprintf                       0      0     80
       -> strlen                        0      0     72
       -> HalUARTWrite                  0      0     72
       -> sprintf                       0      0     72
       -> sprintf                       0      0     72
       -> sprintf                       0      0     72
       -> sprintf                       0      0     72
       -> strlen                        0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
       -> HalUARTWrite                  0      0     72
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleAPP_SendGasSensorMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     _A_P1                                             1
     contin                                            1
     contin1                                           1
     send_data_PM25                                    8
     send_data_CO                                      7
     send_data_HCL                                     6
     send_data_MQ3                                     6
     text                                              2
     SampleApp_ClusterList                             6
     SampleApp_SimpleDesc                             12
     SampleApp_epDesc                                  6
     SampleApp_TaskID                                  1
     SampleApp_NwkState                                1
     SampleApp_TransID                                 1
     SampleApp_Periodic_DstAddr                       12
     SampleApp_Flash_DstAddr                          12
     SampleApp_Point_To_Point_DstAddr
                                                      12
     SampleApp_Group                                  18
     SampleAppPeriodicCounter                          1
     SampleAppFlashCounter                             1
     PointGetConcentrationForChannel_0
                                                       2
     GasSensorFlagForChannel_0                         2
     SampleApp_Init                                  197
     SampleApp_ProcessEvent                          152
     SampleApp_MessageMSGCB                          645
     ?Subroutine11                                     4
     ?Subroutine15                                    33
     ?Subroutine6                                     16
     ?Subroutine5                                     14
     ?Subroutine16                                    12
     ?Subroutine4                                      7
     ?Subroutine3                                      2
     ??Subroutine17_0                                  8
     ?Subroutine2                                     14
     ?Subroutine1                                      7
     ?Subroutine0                                      9
     ?Subroutine13                                     8
     ??Subroutine18_0                                 19
     ?Subroutine14                                     9
     ?Subroutine10                                    10
     ??Subroutine19_0                                  5
     ?Subroutine8                                      5
     ??Subroutine20_0                                  6
     SampleAPP_SendGasSensorMessage                  823
     ?Subroutine12                                    11
     ?Subroutine9                                      3
     ?Subroutine7                                      7
     ?<Initializer for text>                           2
     ?<Initializer for PointGetConcentrationForChan    2
     ?<Initializer for GasSensorFlagForChannel_0>      2
     ??SampleApp_Init?relay                            6
     ??SampleApp_ProcessEvent?relay                    6
     ??SampleApp_MessageMSGCB?relay                    6
     ??SampleAPP_SendGasSensorMessage?relay            6
     ?<Constant "Hello World\n">                      13
     ?<Constant "Group 1">                             8
     ?<Constant "TEMP\243\272%d C\r\n">               13
     ?<Constant "HUMI\243\272%dRH\r\n">               13
     ?<Constant "DHT11 Error!\r\n">                   15
     ?<Constant "vol0\243\272%.3fV\r\n">              14
     ?<Constant "Level: \303\273\323\320\316\333\31   18
     ?<Constant "Level: \307\341\266\310\316\333\31   18
     ?<Constant "Level: \326\320\266\310\316\333\31   18
     ?<Constant "Level: \326\330\266\310\316\333\31   18
     ?<Constant "CO:">                                 4
     ?<Constant "ppm">                                 4
     ?<Constant "\r\n">                                3
     ?<Constant "HCL:">                                5
     ?<Constant "AOL:">                                5
     ?<Constant "PM2.5:">                              7
     ?<Constant "ug/m3">                               6
     ?<Constant "%.1f">                                5
     __Constant_447a0000                               4
     __Constant_3f4ccccd                               4
     __Constant_3f99999a                               4
     __Constant_3fe66666                               4
     __Constant_40133333                               4
     __Constant_4051eb85                               4
     __Constant_39000000                               4
     __Constant_44fa0000                               4
     __Constant_40eae148                               4
     __Constant_40666667                               4
     __Constant_0                                      4
     __Constant_c3a50000                               4
     __Constant_41a00000                               4
     __Constant_44b26000                               4
     __Constant_425c6666                               4

 
 2 026 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     6 bytes in segment XDATA_I
     6 bytes in segment XDATA_ID
   265 bytes in segment XDATA_ROM_C
    94 bytes in segment XDATA_Z
 
 2 056 bytes of CODE  memory
   205 bytes of CONST memory (+ 60 bytes shared)
     0 bytes of DATA  memory (+  1 byte  shared)
   100 bytes of XDATA memory

Errors: none
Warnings: 13
