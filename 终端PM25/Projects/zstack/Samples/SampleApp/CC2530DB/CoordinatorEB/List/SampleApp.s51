///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        17/Nov/2018  11:04:13 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\Source\Sample /
//                          App.c                                             /
//    Command line       =  -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO /
//                          +HCL\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ   /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO /
//                          +HCL\Projects\zstack\Samples\SampleApp\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wConfig.cfg              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF00                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\77564\Desktop\¼à² /
//                          âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\ /
//                          SampleApp\Source\SampleApp.c -D ZTOOL_P1 -D       /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          xLCD_SUPPORTED=DEBUG -D Channel_0_For_TGS822 -D   /
//                          Channel_1_For_TGS813 -D uint8_Printf -D           /
//                          ASCII_Printf -lC C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\ /
//                          ¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\CoordinatorEB\List\ -lA              /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\Coor /
//                          dinatorEB\List\ --diag_suppress Pe001,Pa010 -o    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\Coor /
//                          dinatorEB\Obj\ -e --no_code_motion --debug        /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\ -I  /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\S /
//                          ource\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+ /
//                          PM25+CO+HCL\Projects\zstack\Samples\SampleApp\CC2 /
//                          530DB\..\..\..\ZMain\TI2530DB\ -I                 /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\hal\include\ -I             /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\hal\target\CC2530EB\ -I     /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\mac\include\ -I             /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\mac\high_level\ -I          /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\mac\low_level\srf04\ -I     /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\mac\low_level\srf04\single_ /
//                          chip\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+P /
//                          M25+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\mt\ -I             /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\osal\include\ -I            /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\services\saddr\ -I          /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\services\sdata\ -I          /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\stack\af\ -I                /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\stack\nwk\ -I               /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\stack\sapi\ -I              /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\stack\sec\ -I               /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\stack\sys\ -I               /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\stack\zdo\ -I               /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\zmac\ -I                    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\..\. /
//                          .\..\..\..\Components\zmac\f8w\ -Ohz              /
//    List file          =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HC /
//                          L\Projects\zstack\Samples\SampleApp\CC2530DB\Coor /
//                          dinatorEB\List\SampleApp.s51                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_DIV
        EXTERN ?FLT_GE
        EXTERN ?FLT_LT
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SampleAPP_SendGasSensorMessage?relay
        FUNCTION ??SampleAPP_SendGasSensorMessage?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC GasSensorFlagForChannel_0
        PUBLIC PointGetConcentrationForChannel_0
        PUBLIC SampleAPP_SendGasSensorMessage
        FUNCTION SampleAPP_SendGasSensorMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 66, STACK
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_Point_To_Point_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBWEAK _A_P1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_39000000
        PUBWEAK __Constant_3f4ccccd
        PUBWEAK __Constant_3f99999a
        PUBWEAK __Constant_3fe66666
        PUBWEAK __Constant_40133333
        PUBWEAK __Constant_4051eb85
        PUBWEAK __Constant_40666667
        PUBWEAK __Constant_40eae148
        PUBWEAK __Constant_41a00000
        PUBWEAK __Constant_425c6666
        PUBWEAK __Constant_447a0000
        PUBWEAK __Constant_44b26000
        PUBWEAK __Constant_44fa0000
        PUBWEAK __Constant_c3a50000
        PUBLIC contin
        PUBLIC contin1
        PUBLIC send_data_CO
        PUBLIC send_data_HCL
        PUBLIC send_data_MQ3
        PUBLIC send_data_PM25
        PUBLIC text
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
HalUARTWrite        SYMBOL "HalUARTWrite"
PM2_5Init           SYMBOL "PM2_5Init"
HalAdcInit          SYMBOL "HalAdcInit"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_rand           SYMBOL "osal_rand"
sprintf             SYMBOL "sprintf"
strlen              SYMBOL "strlen"
dht11_value         SYMBOL "dht11_value"
HalAdcRead          SYMBOL "HalAdcRead"
ValreadP0_4         SYMBOL "ValreadP0_4"
memset              SYMBOL "memset"
ValreadP0_0         SYMBOL "ValreadP0_0"
ValreadP0_5         SYMBOL "ValreadP0_5"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalAdcInit?relay  SYMBOL "?relay", HalAdcInit
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??PM2_5Init?relay   SYMBOL "?relay", PM2_5Init
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
`?<Name TGS822GetConcentrati 30>` SYMBOL "TGS822GetConcentration"
??TGS822GetConcentration?relay SYMBOL "?relay", `?<Name TGS822GetConcentrati 30>`
??ValreadP0_0?relay SYMBOL "?relay", ValreadP0_0
??ValreadP0_4?relay SYMBOL "?relay", ValreadP0_4
??ValreadP0_5?relay SYMBOL "?relay", ValreadP0_5
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??dht11_value?relay SYMBOL "?relay", dht11_value
??memset?relay      SYMBOL "?relay", memset
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
??strlen?relay      SYMBOL "?relay", strlen
SampleAPP_SendGasSensorMessage SYMBOL "SampleAPP_SendGasSensorMessage"
??SampleAPP_SendGasSensorMessage?relay SYMBOL "?relay", SampleAPP_SendGasSensorMessage
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PM2_5Init
        FUNCTION PM2_5Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcInit
        FUNCTION HalAdcInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dht11_value
        FUNCTION dht11_value,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ValreadP0_4
        FUNCTION ValreadP0_4,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ValreadP0_0
        FUNCTION ValreadP0_0,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ValreadP0_5
        FUNCTION ValreadP0_5,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalAdcInit?relay
        FUNCTION ??HalAdcInit?relay,00H
        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??PM2_5Init?relay
        FUNCTION ??PM2_5Init?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??TGS822GetConcentration?relay
        FUNCTION ??TGS822GetConcentration?relay,00H
        EXTERN ??ValreadP0_0?relay
        FUNCTION ??ValreadP0_0?relay,00H
        EXTERN ??ValreadP0_4?relay
        FUNCTION ??ValreadP0_4?relay,00H
        EXTERN ??ValreadP0_5?relay
        FUNCTION ??ValreadP0_5?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??dht11_value?relay
        FUNCTION ??dht11_value?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN TGS822GasSen_Flag

// C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä×é²¥+PM25+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 
//   65 #include "SampleApp.h"
//   66 #include "SampleAppHw.h"
//   67 
//   68 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 #include "hal_led.h"
//   73 #include "hal_key.h"
//   74 #include "hal_adc.h"
//   75 //´Ë´¦ÓÃÓÚ´®¿Ú
//   76 #include  "MT_UART.h"
//   77 //ÎÂÊª¶È´«¸ÐÆ÷
//   78 #include "dht11.h"
//   79 //CÓïÑÔ±ê×¼¿â
//   80 #include <string.h>
//   81 #include <stdlib.h>
//   82 #include <stdio.h>
//   83 #include <math.h>
//   84 //GasSensor »ñÈ¡Êý¾ÝµÄÍ·ÎÄ¼þ
//   85 #include "MQ3.h"
//   86 #include "TGS822.h"
//   87 
//   88 //CO
//   89 #include <CO.h>
//   90 
//   91 //PM2.5
//   92 #include <PM25.h>
//   93 /*********************************************************************
//   94  * MACROS
//   95  */
//   96 
//   97 
//   98 #define AMS1117_3_ADC_VOL     3.28   //ºê¶¨ÒåAMS1117 3.3 ADC²Î¿¼µçÑ¹£¬¸ÃÖµ¿ÉÄÜÔÚ3.2-3.4¸¡¶¯
//   99 //Èç¹û¶¨ÒåÁËchannel0»òÕßchannel1¸øÆøÌå´«¸ÐÆ÷£¬Ôò
//  100 #if (defined Channel_0_For_TGS813) || (defined Channel_0_For_TGS822)
//  101 #define Channel_0_GasSensor_Busy
//  102 #endif
//  103 #if (defined Channel_1_For_TGS813) || (defined Channel_1_For_TGS822)
//  104 #define Channel_1_GasSensor_Busy
//  105 #endif
//  106 //Èç¹û¶à¸öÆøÌå´«¸ÐÆ÷Í¬Ê±Õ¼ÓÃÍ¬Ò»¸öchannel£¬ÔòÌáÊ¾
//  107 #if (defined Channel_0_For_TGS813) && (defined Channel_0_For_TGS822)
//  108 #error "Channel0 is just for one gas sensor.Check the micro!"
//  109 #endif
//  110 #if (defined Channel_1_For_TGS813) && (defined Channel_1_For_TGS822)
//  111 #error "Channel1 is just for one gas sensor.Check the micro!"
//  112 
//  113 #endif
//  114 #if (!defined Channel_0_GasSensor_Busy) && (!defined Channel_1_GasSensor_Busy)
//  115 #warning "Do you want to use the Gas Sensor? if yes,please define it,if not please ignore this message."
//  116 #endif
//  117 
//  118 // ÉèÖÃ²»Í¬´«¸ÐÆ÷µçÑ¹ãÐÖµ
//  119 // TGS813
//  120 #define TGS813_Safe 0.8
//  121 #define TGS813_Mildly 1.2
//  122 #define TGS813_Moderate 1.8
//  123 #define TGS813_Severe 2.3
//  124 // TGS822
//  125 #define TGS822_Safe 0.8
//  126 #define TGS822_Mildly 1.2
//  127 #define TGS822_Moderate 1.8
//  128 #define TGS822_Severe 2.3
//  129 
//  130 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131 char contin=0;
contin:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 char contin1=0;
contin1:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  133 extern uint8 PM_data[6];
//  134 extern unsigned short pm_data;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 uint8 send_data_PM25[8];
send_data_PM25:
        DS 8
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 uint8 send_data_CO[7];
send_data_CO:
        DS 7
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 uint8 send_data_HCL[6];
send_data_HCL:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 uint8 send_data_MQ3[6];
send_data_MQ3:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  139 uint8 text[2]={'2','2'};
text:
        DATA16
        DS 2
        REQUIRE `?<Initializer for text>`
        REQUIRE __INIT_XDATA_I
//  140 /*********************************************************************
//  141  * CONSTANTS
//  142  */
//  143 
//  144 /*********************************************************************
//  145  * TYPEDEFS
//  146  */
//  147 
//  148 /*********************************************************************
//  149  * GLOBAL VARIABLES
//  150  */
//  151 
//  152 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  153 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 0
//  154 {
//  155   SAMPLEAPP_PERIODIC_CLUSTERID,
//  156   SAMPLEAPP_FLASH_CLUSTERID
//  157 };
//  158 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  159 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 3
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 3
        DATA16
        DW SampleApp_ClusterList
//  160 {
//  161   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  162   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  163   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  164   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  165   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  166   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  167   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  168   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  169   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  170 };
//  171 
//  172 // This is the Endpoint/Interface description.  It is defined here, but
//  173 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  174 // in the structure here and make it a "const" (in code space).  The
//  175 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  176 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  177 
//  178 /*********************************************************************
//  179  * EXTERNAL VARIABLES
//  180  */
//  181 
//  182 /*********************************************************************
//  183  * EXTERNAL FUNCTIONS
//  184  */
//  185 
//  186 /*********************************************************************
//  187  * LOCAL VARIABLES
//  188  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  189 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  190                           // This variable will be received when
//  191                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  192 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  193 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  194 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  195 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  196 afAddrType_t SampleApp_Periodic_DstAddr;
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  197 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  198 afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  199 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  200 afAddrType_t SampleApp_Point_To_Point_DstAddr;
SampleApp_Point_To_Point_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  201 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  202 aps_Group_t SampleApp_Group;//·Ö×éÄÚÈÝ
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  203 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  204 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  205 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  206 
//  207 
//  208 //@huang
//  209 //ÉèÖÃchannel0ºÍchannel1»ñÈ¡ÆøÌåÅ¨¶ÈÖ¸ÏòµÄº¯Êý
//  210 #if (defined Channel_0_For_TGS822)

        RSEG XDATA_I:XDATA:NOROOT(0)
//  211 int (*PointGetConcentrationForChannel_0)(float ,char ,unsigned char ) = TGS822GetConcentration;
PointGetConcentrationForChannel_0:
        DATA16
        DS 2
        REQUIRE `?<Initializer for PointGetConcentrationForChan`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  212 uint8 *GasSensorFlagForChannel_0 = &TGS822GasSen_Flag;
GasSensorFlagForChannel_0:
        DATA16
        DS 2
        REQUIRE `?<Initializer for GasSensorFlagForChannel_0>`
        REQUIRE __INIT_XDATA_I
//  213 #elif (defined Channel_1_For_TGS822)
//  214 int (*PointGetConcentrationForChannel_1)(float ,char ,unsigned char ) = TGS822GetConcentration;
//  215 uint8 *GasSensorFlagForChannel_1 = &TGS822GasSen_Flag;
//  216 #endif
//  217 
//  218 
//  219 /*********************************************************************
//  220  * LOCAL FUNCTIONS
//  221  */
//  222 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  223 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  224 void SampleApp_SendPeriodicMessage( void );//¹ã²¥×éÍø
//  225 void SampleApp_SendFlashMessage( uint16 flashTime );//×é²¥×éÍø
//  226 void SampleApp_SendPointMessage( void );//µã²¥×éÍø
//  227 
//  228 //@huang
//  229 void SampleAPP_SendGasSensorMessage(void);//×Ô¼º¶¨ÒåµÄÊý¾Ý·¢ËÍº¯Êý
//  230 void GetChannel1ADC(void);
//  231 void GetChannel2ADC(void);
//  232 /*********************************************************************
//  233  * NETWORK LAYER CALLBACKS
//  234  */
//  235 
//  236 /*********************************************************************
//  237  * PUBLIC FUNCTIONS
//  238  */
//  239 
//  240 /*********************************************************************
//  241  * @fn      SampleApp_Init
//  242  *
//  243  * @brief   Initialization function for the Generic App Task.
//  244  *          This is called during initialization and should contain
//  245  *          any application specific initialization (ie. hardware
//  246  *          initialization/setup, table initialization, power up
//  247  *          notificaiton ... ).
//  248  *
//  249  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  250  *                    used to send messages and set timers.
//  251  *
//  252  * @return  none
//  253  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  254 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  255 {
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, PM2_5Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalAdcInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  256   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  257   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  258   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  259 
//  260   MT_UartInit();                //´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  261   MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  262   HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
        MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  263   PM2_5Init();//³õÊ¼»¯PM2.5º¯Êý
        ; Setup parameters for call to function PM2_5Init
        LCALL   ??PM2_5Init?relay
//  264   HalAdcInit();                 //ADC²Î¿¼µçÑ¹³õÊ¼»¯£¨Ä¬ÈÏÎªÄÚ²¿²Î¿¼µçÑ¹£©
        ; Setup parameters for call to function HalAdcInit
        LCALL   ??HalAdcInit?relay
//  265   // Device hardware initialization can be added here or in main() (Zmain.c).
//  266   // If the hardware is application specific - add it here.
//  267   // If the hardware is other parts of the device add it in main().
//  268 
//  269  #if defined ( BUILD_ALL_DEVICES )
//  270   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  271   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  272   // together - if they are - we will start up a coordinator. Otherwise,
//  273   // the device will start as a router.
//  274   if ( readCoordinatorJumper() )
//  275     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  276   else
//  277     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  278 #endif // BUILD_ALL_DEVICES
//  279 
//  280 #if defined ( HOLD_AUTO_START )
//  281   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  282   //  from starting the device and wait for the application to
//  283   //  start the device.
//  284   ZDOInitDevice(0);
//  285 #endif
//  286 
//  287   // Setup for the periodic message's destination address
//  288   // Broadcast to everyone
//  289   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  290   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  291   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  292 
//  293   // Setup for the flash command's destination address - Group 1 //×é²¥ÉèÖÃ
//  294   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  295   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  296   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×é²¥ºÅ
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  297   //µã²¥½á¹¹ÌåµÄ³õÊ¼»¯
//  298    // Setup for the point command's destination address
//  299   SampleApp_Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥
        MOV     DPTR,#SampleApp_Point_To_Point_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  300   SampleApp_Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  301   SampleApp_Point_To_Point_DstAddr.addr.shortAddr = 0x0000;           //0x0000 Ä¬ÈÏÊÇÐ­µ÷Æ÷µÄµØÖ·
        MOV     DPTR,#SampleApp_Point_To_Point_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  302   // Fill out the endpoint description.
//  303   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  304   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  305   SampleApp_epDesc.simpleDesc
//  306             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  307   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  308 
//  309   // Register the endpoint description with the AF
//  310   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  311 
//  312   // Register for all key events - This app will handle all key events
//  313   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  314 
//  315   // By default, all devices start out in Group 1
//  316   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  317   osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  318   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  319 
//  320 #if defined ( LCD_SUPPORTED )
//  321   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
//  322 #endif
//  323 
//  324   //Èç¹ûÃ»ÓÐÊ¹ÓÃPA£¬ÔòÁÁµÆ£¨»òÕßÆäËû£©£¬Èç¹ûÊ¹ÓÃÁËPA£¬Ôò...
//  325 #if defined (HAL_PA_LNA)
//  326   HAL_TURN_ON_LED2();
        CLR     0x90.1
//  327 #endif
//  328 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE _A_P1
//  329 
//  330 /*********************************************************************
//  331  * @fn      SampleApp_ProcessEvent
//  332  *
//  333  * @brief   Generic Application Task event processor.  This function
//  334  *          is called to process all events for the task.  Events
//  335  *          include timers, messages and any other user defined events.
//  336  *
//  337  * @param   task_id  - The OSAL assigned task ID.
//  338  * @param   events - events to process.  This is a bit map and can
//  339  *                   contain more than one event.
//  340  *
//  341  * @return  none
//  342  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  343 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  344 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleAPP_SendGasSensorMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  345   afIncomingMSGPacket_t *MSGpkt;
//  346   (void)task_id;  // Intentionally unreferenced parameter
//  347 
//  348   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  349   {
//  350     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  351     while ( MSGpkt )
//  352     {
//  353       switch ( MSGpkt->hdr.event )
//  354       {
//  355         /* Received when a key is pressed
//  356         case KEY_CHANGE:
//  357           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  358           break;*/
//  359 
//  360         // Received when a messages is received (OTA) for this endpoint
//  361         case AF_INCOMING_MSG_CMD:
//  362           SampleApp_MessageMSGCB( MSGpkt );
//  363             //¹¤×÷Ö¸Ê¾µÆ
//  364            //HAL_TOGGLE_LED2();
//  365           break;
//  366 
//  367         // Received whenever the device changes state in the network
//  368         case ZDO_STATE_CHANGE:
//  369           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  370           if ( //(SampleApp_NwkState == DEV_ZB_COORD)||       //Ð­µ÷Æ÷²»ÔÊÐí¶Ô×Ô¼ºµã²¥£¬Ö»ÔÊÐíÂ·ÓÉÆ÷ºÍÖÕ¶Ë¶ÔÐ­µ÷Æ÷µã²¥
//  371               (SampleApp_NwkState == DEV_ROUTER)
//  372               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_4
//  373           {
//  374             // Start sending the periodic message in a regular interval.
//  375             osal_start_timerEx( SampleApp_TaskID,                    //¸Ãº¯Êý¶¨Ê±´¥·¢ÊÂ¼þ
//  376                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,        //²ÎÊýÒÀ´ÎÊÇ¡°ÈÎÎñID¡±
//  377                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );  //¡°×¢²áÊÂ¼þ¡±¡°Ñ­»·Ê±¼ä¡±
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  378           }
//  379           else
//  380           {
//  381             // Device is no longer in the network
//  382           }
//  383           break;
//  384 
//  385         default:
//  386           break;
//  387       }
//  388 
//  389       // Release the memory
//  390       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  391 
//  392       // Next - if one is available
//  393       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_4
//  394     }
//  395 
//  396     // return unprocessed events
//  397     return (events ^ SYS_EVENT_MSG);                        //·µ»ØÃ»ÓÐ´¦ÀíµÄÊÂ¼þ
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_7:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_8
//  398   }
//  399 
//  400   // Send a message out - This event is generated by a timer
//  401   //  (setup in SampleApp_Init()).
//  402   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_9
//  403   {
//  404     // Send the periodic message
//  405      SampleAPP_SendGasSensorMessage();      //·¢ËÍ´«¸ÐÆ÷Êý¾ÝµÄº¯Êý
        ; Setup parameters for call to function SampleAPP_SendGasSensorMessage
        LCALL   ??SampleAPP_SendGasSensorMessage?relay
//  406     // Setup to send message again in normal period (+ a little jitter)
//  407     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  408         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x18
        MOV     R4,A
        CLR     A
        ADDC    A,#0x3
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  409 
//  410     // return unprocessed events
//  411     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_7
//  412   }
//  413 
//  414   // Discard unknown events
//  415   return 0;
??SampleApp_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_8:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  416 }
//  417 
//  418 /*********************************************************************
//  419  * LOCAL FUNCTIONS
//  420  */
//  421 
//  422 /*********************************************************************
//  423  * @fn      SampleApp_MessageMSGCB
//  424  *
//  425  * @brief   Data message processor callback.  This function processes
//  426  *          any incoming data - probably from other devices.  So, based
//  427  *          on cluster ID, perform the intended action.
//  428  *
//  429  * @param   none
//  430  *
//  431  * @return  none
//  432  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  433 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  434 {
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  435   float Channel0_VolSave = 0.0f;
//  436   char  convert_arr[20];
//  437   uint8 convert_u16[20];
//  438   //ÓÉÓÚÓÐÁù¸ö×Ö½Ú´«ÊäÊý¾Ý£¬Ö»ÓÃµ½Á½¸ö£¬ËùÒÔºóÃæËÄ¸öÊý¾Ý×Ö½ÚÓÃ0xff±íÊ¾
//  439   convert_u16[2]   = 0xff;
//  440   convert_u16[3]   = 0xff;
//  441   convert_u16[4]   = 0xff;
//  442   convert_u16[5]   = 0xff;  
//  443   uint8 add[]={0xfe,0x10,0x69,0x01,0x83,0xf2,0x2e,0x01,0x00,0x4b,0x12,0x01};//³õÊ¼ÀàÎª01£¬µØÖ·01£¬Ö¡Í·
//  444   uint8 end[]={0x77,0x88,0x12};  //Ö¡Î²
//  445   uint8 i=0;
//  446   u16   sensor_value=0;
//  447   char count;
//  448 
//  449   switch ( pkt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_MessageMSGCB_0:
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
//  450   {
//  451   
//  452   case SAMPLEAPP_GAS_SENSOR_CLUSTERID:
//  453       i=0;//ÓÃÓÚ¼ÇÂ¼Êý¾Ý°üµÄ¼ÆÊý×Ó
//  454       char EDid=0;
//  455       EDid=(pkt->cmd.Data)[27];
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_43:
        ADD     A,#0x1b
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
//  456 #if defined (ASCII_Printf) //ÉèÖÃÎª×Ö·ûÊä³ö
//  457       if(EDid==1&&contin==0)
        MOV     A,#0x1
        XRL     A,R0
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_2 & 0xFFFF
        MOV     DPTR,#contin
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
//  458       //if(1)
//  459       {
//  460         /*ÏÔÊ¾ÊÕµ½µÄÊý¾ÝÁ¿
//  461           sprintf(convert_arr,"DataLength:%d\r\n",pkt->cmd.DataLength);
//  462           HalUARTWrite(0,convert_arr,strlen(convert_arr));*/
//  463       
//  464           //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
//  465           sprintf(convert_arr,"TEMP£º%d C\r\n",(pkt->cmd.Data)[i]),i++; //Òþ²ØTEMP
        MOV     A,R6
        ADD     A,#0x22
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function sprintf
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#`?<Constant "TEMP\\243\\272%d C\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "TEMP\\243\\272%d C\\r\\n">` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
//  466           HalUARTWrite(0,convert_arr,strlen(convert_arr));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine2 & 0xFFFF
//  467           sprintf(convert_arr,"HUMI£º%dRH\r\n",(pkt->cmd.Data)[i]),i++;//Òþ²ØHUMI
??CrossCallReturnLabel_4:
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#`?<Constant "HUMI\\243\\272%dRH\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "HUMI\\243\\272%dRH\\r\\n">` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
//  468           HalUARTWrite(0,convert_arr,strlen(convert_arr));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine2 & 0xFFFF
//  469       
//  470           //ÅÐ¶Ï±êÖ¾Î»£¬²¢¸ø³öÌáÊ¾ÐÅÏ¢
//  471           //DHT³ö´í
//  472           if((pkt->cmd.Data)[i++] & (1<<0))
??CrossCallReturnLabel_5:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_MessageMSGCB_3
//  473           {
//  474             HalUARTWrite(0,"DHT11 Error!\r\n",strlen("DHT11 Error!\r\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "DHT11 Error!\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "DHT11 Error!\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  475           }
//  476       
//  477       #if (defined Channel_0_GasSensor_Busy)
//  478           //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
//  479           Channel0_VolSave =  (float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])/1000;
??SampleApp_MessageMSGCB_3:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
//  480           sprintf(convert_arr,"vol0£º%.3fV\r\n",Channel0_VolSave),i+=2;
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     R4,#`?<Constant "vol0\\243\\272%.3fV\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "vol0\\243\\272%.3fV\\r\\n">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
//  481           HalUARTWrite(0,convert_arr,strlen(convert_arr));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine11 & 0xFFFF
//  482           if(Channel0_VolSave < TGS822_Safe)
??CrossCallReturnLabel_19:
        MOV     DPTR,#__Constant_3f4ccccd
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??SampleApp_MessageMSGCB_4
//  483             sprintf(convert_arr,"Level: Ã»ÓÐÎÛÈ¾\r\n");
        ; Setup parameters for call to function sprintf
        MOV     R4,#`?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31` & 0xff
        MOV     R5,#(`?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31` >> 8) & 0xff
        SJMP    ??SampleApp_MessageMSGCB_5
//  484           else if(Channel0_VolSave < TGS822_Mildly)
??SampleApp_MessageMSGCB_4:
        MOV     DPTR,#__Constant_3f99999a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??SampleApp_MessageMSGCB_6
//  485             sprintf(convert_arr,"Level: Çá¶ÈÎÛÈ¾\r\n");
        ; Setup parameters for call to function sprintf
        MOV     R4,#`?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31` & 0xff
        MOV     R5,#(`?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31` >> 8) & 0xff
        SJMP    ??SampleApp_MessageMSGCB_5
//  486           else if(Channel0_VolSave < TGS822_Moderate)
??SampleApp_MessageMSGCB_6:
        MOV     DPTR,#__Constant_3fe66666
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??SampleApp_MessageMSGCB_7
//  487             sprintf(convert_arr,"Level: ÖÐ¶ÈÎÛÈ¾\r\n");
        ; Setup parameters for call to function sprintf
        MOV     R4,#`?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31` & 0xff
        MOV     R5,#(`?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31` >> 8) & 0xff
        SJMP    ??SampleApp_MessageMSGCB_5
//  488           else if(Channel0_VolSave < TGS822_Severe)
??SampleApp_MessageMSGCB_7:
        MOV     DPTR,#__Constant_40133333
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??SampleApp_MessageMSGCB_8
//  489             sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
        ; Setup parameters for call to function sprintf
        MOV     R4,#`?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31` & 0xff
        MOV     R5,#(`?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31` >> 8) & 0xff
??SampleApp_MessageMSGCB_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
//  490       //      sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
//  491           HalUARTWrite(0,convert_arr,strlen(convert_arr));
??SampleApp_MessageMSGCB_8:
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine11 & 0xFFFF
//  492           //    sprintf(convert_arr,"concen0£º%dppm\r\n",BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])),i+=2;
//  493       //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  494       //    sprintf(convert_arr,"Flag0:0x%x\r\n",(pkt->cmd.Data)[i]),i++;
//  495       //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  496       #endif
//  497         
//  498          //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
//  499         for(count=0;count<=6;count++)
??CrossCallReturnLabel_20:
        MOV     R4,#0x0
//  500         {
//  501           send_data_CO[count]=(pkt->cmd.Data)[count+8];
??SampleApp_MessageMSGCB_9:
        MOV     DPL,R4
        MOV     R0,DPL
        LCALL   ?Subroutine5 & 0xFFFF
//  502         }
??CrossCallReturnLabel_9:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#send_data_CO & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(send_data_CO >> 8) & 0xff
        LCALL   ??Subroutine19_0 & 0xFFFF
??CrossCallReturnLabel_36:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x7
        JC      ??SampleApp_MessageMSGCB_9
//  503         for(count=0;count<=5;count++)
        MOV     R4,#0x0
//  504         {
//  505           send_data_HCL[count]=(pkt->cmd.Data)[count+15];
??SampleApp_MessageMSGCB_10:
        LCALL   ?Subroutine6 & 0xFFFF
//  506         }
??CrossCallReturnLabel_11:
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,R1
        LCALL   ??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_44:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#send_data_HCL & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(send_data_HCL >> 8) & 0xff
        LCALL   ??Subroutine19_0 & 0xFFFF
??CrossCallReturnLabel_37:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        JC      ??SampleApp_MessageMSGCB_10
//  507         for(count=0;count<=5;count++)
        MOV     R4,#0x0
//  508         {
//  509           send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
??SampleApp_MessageMSGCB_11:
        LCALL   ?Subroutine6 & 0xFFFF
//  510         }
??CrossCallReturnLabel_12:
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R1
        LCALL   ??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_45:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#send_data_MQ3 & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(send_data_MQ3 >> 8) & 0xff
        LCALL   ??Subroutine19_0 & 0xFFFF
??CrossCallReturnLabel_38:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        JC      ??SampleApp_MessageMSGCB_11
//  511         HalUARTWrite(0, "CO:", 3);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "CO:">` & 0xff
        MOV     R3,#(`?<Constant "CO:">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  512         HalUARTWrite(0, send_data_CO, 7); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#send_data_CO & 0xff
        MOV     R3,#(send_data_CO >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  513         HalUARTWrite(0, "ppm", 3);
        MOV     ?V0 + 0,#`?<Constant "ppm">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "ppm">` >> 8) & 0xff
        ; Setup parameters for call to function HalUARTWrite
        LCALL   ?Subroutine13 & 0xFFFF
//  514         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  515         
//  516         HalUARTWrite(0, "HCL:", 4);
??CrossCallReturnLabel_33:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "HCL:">` & 0xff
        MOV     R3,#(`?<Constant "HCL:">` >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
//  517         HalUARTWrite(0, send_data_HCL, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
??CrossCallReturnLabel_30:
        MOV     R2,#send_data_HCL & 0xff
        MOV     R3,#(send_data_HCL >> 8) & 0xff
        LCALL   ?Subroutine0 & 0xFFFF
//  518         HalUARTWrite(0, "ppm", 3);
//  519         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  520         
//  521         HalUARTWrite(0, "AOL:", 4);
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AOL:">` & 0xff
        MOV     R3,#(`?<Constant "AOL:">` >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
//  522         HalUARTWrite(0, send_data_MQ3, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
??CrossCallReturnLabel_31:
        MOV     R2,#send_data_MQ3 & 0xff
        MOV     R3,#(send_data_MQ3 >> 8) & 0xff
        LCALL   ?Subroutine0 & 0xFFFF
//  523         HalUARTWrite(0, "ppm", 3);
//  524         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  525         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL   ?Subroutine1 & 0xFFFF
//  526         HalUARTWrite(0, "\r\n", 2);
//  527         //sprintf(text,"HELLO!",(pkt->cmd.Data)[i]);
//  528         
//  529         contin=1;
//  530                   //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
//  531 
//  532       }
??CrossCallReturnLabel_2:
        MOV     A,#0x1
        SJMP    ??SampleApp_MessageMSGCB_12
//  533       if(EDid==2&&contin==1)
??SampleApp_MessageMSGCB_2:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??SampleApp_MessageMSGCB_1
        MOV     DPTR,#contin
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_MessageMSGCB_1
//  534       {
//  535         for(count=0;count<6;count++)
        MOV     R4,#0x0
//  536         {
//  537           send_data_PM25[count]=(pkt->cmd.Data)[count];
??SampleApp_MessageMSGCB_13:
        MOV     DPL,R4
        MOV     R0,DPL
        MOV     R1,#0x0
        LCALL   ?Subroutine5 & 0xFFFF
//  538         }
??CrossCallReturnLabel_10:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#send_data_PM25 & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(send_data_PM25 >> 8) & 0xff
        LCALL   ??Subroutine19_0 & 0xFFFF
??CrossCallReturnLabel_39:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        JC      ??SampleApp_MessageMSGCB_13
//  539         HalUARTWrite(0, "PM2.5:", 6);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "PM2.5:">` & 0xff
        MOV     R3,#(`?<Constant "PM2.5:">` >> 8) & 0xff
        LCALL   ??Subroutine17_0 & 0xFFFF
//  540         HalUARTWrite(0, send_data_PM25, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
??CrossCallReturnLabel_32:
        MOV     R2,#send_data_PM25 & 0xff
        MOV     R3,#(send_data_PM25 >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  541         HalUARTWrite(0, "ug/m3", 5);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "ug/m3">` & 0xff
        MOV     R3,#(`?<Constant "ug/m3">` >> 8) & 0xff
        LCALL   ?Subroutine1 & 0xFFFF
//  542         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  543 
//  544         contin=0;
//  545       }
//  546 #endif
//  547 
//  548 #if defined (uint8_Printf_not) //ÉèÖÃÎª16½øÖÆÏÔÊ¾Êä³ö,È¡ÏûÊä³ö¾Í¼Ó¸ö_not
//  549       if(EDid==1&&contin1==0)
//  550       {
//  551       
//  552           i=0;
//  553           add[3] =0x01;
//  554           add[11]=0x01; //ÉèÖÃÎÂ¶ÈÎïÀíµØÖ·Îª01
//  555           convert_u16[0]   = 0x00;
//  556           convert_u16[1]   = (pkt->cmd.Data)[i++]; 
//  557           HalUARTWrite(0,add,12);
//  558           HalUARTWrite(0,convert_u16,6);   //ÎÂ¶È
//  559           HalUARTWrite(0,end,3);
//  560           add[3] =0x02;
//  561           add[11]=0x02; //ÉèÖÃÊª¶ÈÎïÀíµØÖ·Îª02         
//  562           convert_u16[0]   = 0x00;
//  563           convert_u16[1]   = (pkt->cmd.Data)[i++];   
//  564           HalUARTWrite(0,add,12);
//  565           HalUARTWrite(0,convert_u16,6);   //Êª¶È
//  566           HalUARTWrite(0,end,3);
//  567           i++;  //Ìø¹ýÎÂÊª¶È´«¸ÐÊý¾ÝµÄ±êÖ¾Î»
//  568       
//  569       #if (defined Channel_0_GasSensor_Busy)
//  570           //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
//  571           Channel0_VolSave =  (float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i]);  //²»³Ë1000£¬ÈÃÆäÖµÃ»ÓÐ¸¡µã£¬µ«ÊÇ¹ýºóÒª³ýÒÔ1000
//  572           sensor_value     =   Channel0_VolSave;
//  573           convert_u16[0]   =   sensor_value>>8;
//  574           convert_u16[1]   =   (sensor_value&0x00ff);
//  575           add[3] =0x03;
//  576           add[11]=0x03;   //ÉèÖÃÓÐ»úÈÜ¼ÁÎïÀíµØÖ·Îª03
//  577           HalUARTWrite(0,add,12);
//  578           HalUARTWrite(0,convert_u16,6); 
//  579           HalUARTWrite(0,end,3);
//  580       #endif
//  581         
//  582          //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
//  583         for(count=0;count<=6;count++)
//  584         {
//  585           send_data_CO[count]=(pkt->cmd.Data)[count+8];
//  586         }
//  587         for(count=0;count<=5;count++)
//  588         {
//  589           send_data_HCL[count]=(pkt->cmd.Data)[count+15];
//  590         }
//  591         for(count=0;count<=5;count++)
//  592         {
//  593           send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
//  594         }
//  595        
//  596         sensor_value = atof(send_data_CO)*10;  //½«¸¡µãÊý×ª»»³ÉÕûÊý
//  597         if(atof(send_data_CO)<0) sensor_value=0;
//  598         convert_u16[0]   =   sensor_value>>8;
//  599         convert_u16[1]   =   (sensor_value&0x00ff);
//  600         add[3] =0x04;
//  601         add[11]=0x04;   
//  602         HalUARTWrite(0,add,12);
//  603         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  604         HalUARTWrite(0,end,3);  
//  605 
//  606         sensor_value = atof(send_data_HCL)*10;
//  607         if(atof(send_data_HCL)<0) sensor_value=0;
//  608         convert_u16[0]   =   sensor_value>>8;
//  609         convert_u16[1]   =   (sensor_value&0x00ff);
//  610         add[3] =0x05;
//  611         add[11]=0x05;
//  612         HalUARTWrite(0,add,12);
//  613         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  614         HalUARTWrite(0,end,3);     
//  615 
//  616         sensor_value = atof(send_data_MQ3)*10;
//  617         if(atof(send_data_MQ3)<0) sensor_value=0;
//  618         convert_u16[0]   =   sensor_value>>8;
//  619         convert_u16[1]   =   (sensor_value&0x00ff);
//  620         add[3] =0x06;       
//  621         add[11]=0x06;
//  622         HalUARTWrite(0,add,12);
//  623         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  624         HalUARTWrite(0,end,3);
//  625      
//  626         contin1=1;
//  627       }
//  628       if(EDid==2&&contin1==1)
//  629       {  
//  630         /*¹¹½¨PM25Ö¡*/
//  631         for(count=0;count<6;count++)
//  632         {
//  633           send_data_PM25[count]=(pkt->cmd.Data)[count];
//  634         }
//  635         sensor_value = atof(send_data_PM25)*100;
//  636         if(atof(send_data_PM25)<0) sensor_value=0;
//  637         convert_u16[0]   =   sensor_value>>8;
//  638         convert_u16[1]   =   (sensor_value&0x00ff);
//  639         add[3] =0x07;
//  640         add[11]=0x07;
//  641         HalUARTWrite(0,add,12);
//  642         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  643         HalUARTWrite(0,end,3);
//  644         contin1=0;
//  645       }      
//  646 #endif
//  647       break;
//  648   }
??CrossCallReturnLabel_3:
        CLR     A
??SampleApp_MessageMSGCB_12:
        MOVX    @DPTR,A
//  649 }
??SampleApp_MessageMSGCB_1:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_26:
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_20
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_4
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_5
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     DPL,R4
        MOV     R2,DPL
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_29:
        ADD     A,R2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_28:
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R2
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_12
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_9
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_10
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOVX    @DPTR,A
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x6
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOV     R1,#0x0
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_27:
        ; Setup parameters for call to function sprintf
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_24:
        INC     DPTR
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        LCALL   ??Subroutine18_0 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     DPTR,#contin
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker41 Using cfiCommon1
        CFI (cfiPicker41) NoFunction
        CFI (cfiPicker41) Picker
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_34:
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_0
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_1
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45
        REQUIRE ??Subroutine18_0
        ; // Fall through to label ??Subroutine18_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine18_0:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_3
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_0
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_1
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51
//  650 
//  651 
//  652 /*********************************************************************
//  653  * @fn      SampleAPP_SendGasSensorMessage
//  654  *
//  655  * @brief   Send the flash message to group 1.
//  656  *
//  657  * @param   flashTime - in milliseconds
//  658  *
//  659  * @return  none
//  660  */
//  661 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  662 void SampleAPP_SendGasSensorMessage(void)
SampleAPP_SendGasSensorMessage:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI Function SampleAPP_SendGasSensorMessage
        CODE
//  663 {
        FUNCALL SampleAPP_SendGasSensorMessage, dht11_value
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, ValreadP0_4
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, ValreadP0_0
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, ValreadP0_5
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 37
        MOV     A,#-0x25
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  664   
//  665   uint8 Transmit_data[28];              //ÐèÒª·¢ËÍµÄÊý¾Ý    °ü=¹«¹²Êý¾Ý(ÎÂÊª¶ÈÊý¾ÝºÍ±êÖ¾Î»)+Í¨µÀ0Êý¾ÝºÍ±êÖ¾+Í¨µÀ1Êý¾ÝºÍ±êÖ¾£¬ºóÃæÁ½¸öÊý¾Ý¿ÉÑ¡
//  666   float val,val1,co_value,HCL_value,mq3_value;
//  667   //Ò»¸ö½Úµã ÎÂÊª¶ÈºÍ¾Æ¾«
//  668   //¹«¹²°ü
//  669   
//  670   char temp;                   //ÎÂ¶È
//  671   unsigned char humi;          //Êª¶È
//  672   uint8 PublicFlag=0;         //¸Ã±äÁ¿¼ÇÂ¼ÁËDHT11µÄ×´Ì¬£¨ÊÇ·ñ¶ÁÈ¡³É¹¦)£¬»¹¿ÉÒÔ¼ÇÂ¼ÆäËû×´Ì¬
//  673   Transmit_data[27]=1;//½Úµã1±ê¼Ç
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  674 #if (defined Channel_0_GasSensor_Busy)
//  675   float  ADC_Channel_0_Vol=0;             //ADCµçÑ¹
//  676   uint16 ADC_Channel_0_Vol_ForTx = 0;    //½«µçÑ¹Öµ³ËÉÏ1000£¬ÓÃÓÚ·¢ËÍ³öÈ¥
//  677   uint16 ADC_Channel_0_RegData;          //ADC¼Ä´æÆ÷Êý¾Ý
//  678   uint16 Channel_0_GasSenDataSave=0;     //±£´æÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
//  679 #endif
//  680 
//  681   uint8 i=0;                            //Ñ­»·ÒªÓÃµ½
//  682   uint8 TxPackLength=0;                 //¼ÇÂ¼°ü³¤¶È
//  683   PublicFlag =0;                        //Çå¿Õ±êÖ¾Î»
        MOV     R6,#0x0
//  684 
//  685   uint8 ADC_Result_ASCII[20];
//  686   //ADC²âÊÔ½á¹û£¬Ê¹ÓÃÄÚ²¿²Î¿¼µçÑ¹ÊÇ×î×¼È·µÄ2017 2 19
//  687   //×¢Òâ¶Å°îÏßµÄÑ¹½µÐèÒª²¹³¥£¬Êµ¼ÊµçÂ·ÖÐ£¬Îñ±Ø²âÊÔ´«¸ÐÆ÷Òý½Åµ½ADCÒý½ÅµÄÑ¹½µ£¬È»ºóÈí¼þ¼ÓÒÔ²¹³¥¡£2017 2 19
//  688   //ÎÂ¶È´«¸ÐÆ÷  DHT11
//  689   //DHT11¶ÁÈ¡Ê§°Ü£¬¿ÉÄÜDHT11Ëð»µ£¬¿ÉÄÜDHT11±»°Î³ö»òÕßÁ¬ÏßËÉ¶¯
//  690     if(dht11_value(&temp , &humi , DHT11_UINT8) != 0)
        ; Setup parameters for call to function dht11_value
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??dht11_value?relay
        MOV     A,R1
        JZ      ??SampleAPP_SendGasSensorMessage_0
//  691     {
//  692       temp = DHT11_TEMP_DEFAULT;  //ÉèÖÃÎÂÊª¶ÈÎªÄ¬ÈÏÖµ
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x19
        MOVX    @DPTR,A
//  693       humi = DHT11_HUMI_DEFAULT;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x41
        MOVX    @DPTR,A
//  694       PublicFlag |= (1<<0);     //ÖÃÎ»±êÖ¾Î»
        INC     R6
//  695     }
//  696     Transmit_data[TxPackLength] = (uint8)temp , TxPackLength++;                     //×°ÈëÎÂ¶È,TxPackLength=0
??SampleAPP_SendGasSensorMessage_0:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  697     Transmit_data[TxPackLength] = (uint8)humi , TxPackLength++;                     //×°ÈëÊª¶È
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  698     Transmit_data[TxPackLength] =  PublicFlag , TxPackLength++;                    //×°Èë¹«¹²±êÖ¾Î»
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  699 
//  700 //Èç¹ûÓÃµ½ÁËchanne0Ôò±àÒë£¬Ê¹ÓÃP0.0£¬½«Í¨µÀ0Êý¾ÝºÍ±êÖ¾Î»×°Èë·¢ËÍ°üÖÐ
//  701 #if (defined Channel_0_GasSensor_Busy)
//  702     //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
//  703     ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_1,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_1£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x1
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  704     for(i=0;i<10;i++)
        MOV     ?V0 + 0,#0xa
//  705     {
//  706       ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_1,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_1,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  707       ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
??SampleAPP_SendGasSensorMessage_1:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x1
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 3
        CLR     C
        RRC     A
        MOV     R7,A
        MOV     A,R6
        RRC     A
        MOV     R6,A
//  708     }
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        JNZ     ??SampleAPP_SendGasSensorMessage_1
//  709     ADC_Channel_0_Vol =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4051eb85
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
//  710     ADC_Channel_0_Vol_ForTx = (uint16)(ADC_Channel_0_Vol * 1000);
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     R6,?V0 + 4
//  711 
//  712     //Gas sensor»ñÈ¡Êý¾Ý,±£´æÆðÀ´
//  713     Channel_0_GasSenDataSave = (uint16)PointGetConcentrationForChannel_0(ADC_Channel_0_Vol,temp,humi);
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     DPTR,#PointGetConcentrationForChannel_0
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?CALL_IND
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  714 
//  715     Transmit_data[TxPackLength] = HI_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  716     Transmit_data[TxPackLength] = LO_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  717     Transmit_data[TxPackLength] = HI_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶È¸ß°ËÎ»
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  718     Transmit_data[TxPackLength] = LO_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶ÈµÍ°ËÎ»
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  719     Transmit_data[TxPackLength] = *GasSensorFlagForChannel_0, TxPackLength++;                  //×°Èë±êÖ¾Î»
        MOV     DPTR,#GasSensorFlagForChannel_0
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  720 #endif
//  721     
//  722     //COÊý¾Ý²É¼¯ 
//  723     uint8 data[7];
//  724     char num;
//  725     val=ValreadP0_4();//¶ÁÈ¡COµÄµçÑ¹Öµ
        ; Setup parameters for call to function ValreadP0_4
        LCALL   ??ValreadP0_4?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  726     co_value=val*2000+3.67*2;
//  727     //co_value=val*1000;
//  728     memset(data,0,7);
        ; Setup parameters for call to function memset
        MOV     ?V0 + 4,#0x7
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  729     sprintf(data,"%.1f",co_value);
        ; Setup parameters for call to function sprintf
        MOV     DPTR,#__Constant_44fa0000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_40eae148
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "%.1f">` & 0xff
        MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  730     for(num=0;num<=6;num++)//×°COµÄÊý¾Ý
        MOV     R2,#0x0
//  731     {
//  732       Transmit_data[num+8]=data[num];
??SampleAPP_SendGasSensorMessage_2:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  733     }
??CrossCallReturnLabel_46:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        LCALL   ??Subroutine19_0 & 0xFFFF
??CrossCallReturnLabel_40:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x7
        JC      ??SampleAPP_SendGasSensorMessage_2
//  734     
//  735     //HCLÊý¾Ý²É¼¯
//  736     val1=ValreadP0_0();//¶ÁÈ¡HCLµÄµçÑ¹Öµ
        ; Setup parameters for call to function ValreadP0_0
        LCALL   ??ValreadP0_0?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  737     if(val1>3.6)//Êý¾ÝÅÅ²é
        MOV     DPTR,#__Constant_40666667
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_GE
        JNC     ??SampleAPP_SendGasSensorMessage_3
//  738         val1=0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//  739     HCL_value = (val1*1000-330)*20/1427;
//  740     memset(data,0,7);//Çå³ýÊý×é
??SampleAPP_SendGasSensorMessage_3:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 4,#0x7
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  741     sprintf(data,"%.1f",HCL_value);//½«Êý¾Ý×ª»¯³É×Ö·û´®£¬²¢ÇÒ×°½øÊý×éÀïÃæ
        ; Setup parameters for call to function sprintf
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_c3a50000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        MOV     DPTR,#__Constant_41a00000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_44b26000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "%.1f">` & 0xff
        MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  742     
//  743     for(num=0;num<=5;num++)//×°HCLµÄÊý¾Ý
        MOV     R2,#0x0
//  744     {
//  745       Transmit_data[num+15]=data[num];
??SampleAPP_SendGasSensorMessage_4:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  746     }
??CrossCallReturnLabel_47:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_21:
        ADD     A,#0xf
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_41:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x6
        JC      ??SampleAPP_SendGasSensorMessage_4
//  747     
//  748     //¾Æ¾«mq3Êý¾Ý²É¼¯
//  749     val1=ValreadP0_5();//¶ÁÈ¡MQ3µÄµçÑ¹Öµ
        ; Setup parameters for call to function ValreadP0_5
        LCALL   ??ValreadP0_5?relay
//  750     //mq3_value = val1;  //µçÑ¹Öµ¸³¸ø¾Æ¾«µçÑ¹Öµ
//  751     mq3_value=55.1;
//  752     memset(data,0,7);//Çå³ýÊý×é
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  753     sprintf(data,"%.1f",mq3_value);//½«Êý¾Ý×ª»¯³É×Ö·û´®£¬²¢ÇÒ×°½øÊý×éÀïÃæ
        ; Setup parameters for call to function sprintf
        MOV     DPTR,#__Constant_425c6666
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "%.1f">` & 0xff
        MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  754     for(num=0;num<=5;num++)//×°MQ3µÄÊý¾Ý
        MOV     R2,#0x0
//  755     {
//  756       Transmit_data[num+21]=data[num];
??SampleAPP_SendGasSensorMessage_5:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  757     }
??CrossCallReturnLabel_48:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_22:
        ADD     A,#0x15
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_42:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x6
        JC      ??SampleAPP_SendGasSensorMessage_5
//  758     
//  759     //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
//  760     if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
//  761                      SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
//  762                      28,                   //Êý¾ÝÁ¿£¨³¤¶È£©
//  763                      Transmit_data,                  //Êý¾ÝÊ×µØÖ·
//  764                      &SampleApp_TransID,
//  765                      AF_DISCV_ROUTE,
//  766                      AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 60)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     ?V0 + 0,#0x1c
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 64)
        MOV     ?V0 + 0,#0x6
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  767     {
//  768     }
//  769   
//  770   
//  771   //½Úµã2
//  772   //PM2.5Êý¾Ý²É¼¯
//  773   /*
//  774   Transmit_data[27]=2;//½Úµã2±ê¼Ç
//  775   Transmit_data[0] = PM_data[0];
//  776   Transmit_data[1] = PM_data[1];
//  777   Transmit_data[2] = PM_data[2];
//  778   Transmit_data[3] = PM_data[3];
//  779   Transmit_data[5] = PM_data[5];
//  780   Transmit_data[4] = PM_data[4];
//  781   Transmit_data[6] = (pm_data>>8);
//  782   Transmit_data[7] = (pm_data&0x00ff);
//  783   //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
//  784     if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
//  785                      SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
//  786                      28,                   //Êý¾ÝÁ¿£¨³¤¶È£©
//  787                      Transmit_data,                  //Êý¾ÝÊ×µØÖ·
//  788                      &SampleApp_TransID,
//  789                      AF_DISCV_ROUTE,
//  790                      AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  791     {
//  792     }
//  793   */
//  794 }
        MOV     A,#0x25
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_5
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 58)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_13
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_14
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker58 Using cfiCommon1
        CFI (cfiPicker58) NoFunction
        CFI (cfiPicker58) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+-1
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 40)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+-1
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        MOV     DPL,A
        MOV     A,R1
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69
        REQUIRE ??Subroutine19_0
        ; // Fall through to label ??Subroutine19_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine19_0:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+-1
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+-1
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+-1
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+-1
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+-1
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+-1
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker80 Using cfiCommon1
        CFI (cfiPicker80) NoFunction
        CFI (cfiPicker80) Picker
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_25:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond81 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84
        REQUIRE ??Subroutine20_0
        ; // Fall through to label ??Subroutine20_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine20_0:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for text>`:
        DATA8
        DB 50
        DB 50

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for PointGetConcentrationForChan`:
        DATA16
        DW ??TGS822GetConcentration?relay

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for GasSensorFlagForChannel_0>`:
        DATA16
        DW TGS822GasSen_Flag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleAPP_SendGasSensorMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleAPP_SendGasSensorMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hello World\\n">`:
        DB "Hello World\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TEMP\\243\\272%d C\\r\\n">`:
        DB "TEMP\243\272%d C\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "HUMI\\243\\272%dRH\\r\\n">`:
        DB "HUMI\243\272%dRH\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DHT11 Error!\\r\\n">`:
        DB "DHT11 Error!\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "vol0\\243\\272%.3fV\\r\\n">`:
        DB "vol0\243\272%.3fV\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31`:
        DB "Level: \303\273\323\320\316\333\310\276\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31`:
        DB "Level: \307\341\266\310\316\333\310\276\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31`:
        DB "Level: \326\320\266\310\316\333\310\276\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31`:
        DB "Level: \326\330\266\310\316\333\310\276\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "CO:">`:
        DB "CO:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "ppm">`:
        DB "ppm"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "HCL:">`:
        DB "HCL:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AOL:">`:
        DB "AOL:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "PM2.5:">`:
        DB "PM2.5:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ug/m3">`:
        DB "ug/m3"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%.1f">`:
        DB "%.1f"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_447a0000:
        DD 447A0000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3f4ccccd:
        DD 3F4CCCCDH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3f99999a:
        DD 3F99999AH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3fe66666:
        DD 3FE66666H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40133333:
        DD 40133333H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4051eb85:
        DD 4051EB85H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_39000000:
        DD 39000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_44fa0000:
        DD 44FA0000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40eae148:
        DD 40EAE148H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40666667:
        DD 40666667H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c3a50000:
        DD 0C3A50000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_41a00000:
        DD 41A00000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_44b26000:
        DD 44B26000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_425c6666:
        DD 425C6666H

        END
//  795 
//  796 /*********************************************************************
//  797 *********************************************************************/
// 
// 2 026 bytes in segment BANKED_CODE
//    24 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//     6 bytes in segment XDATA_I
//     6 bytes in segment XDATA_ID
//   265 bytes in segment XDATA_ROM_C
//    94 bytes in segment XDATA_Z
// 
// 2 056 bytes of CODE  memory
//   205 bytes of CONST memory (+ 60 bytes shared)
//     0 bytes of DATA  memory (+  1 byte  shared)
//   100 bytes of XDATA memory
//
//Errors: none
//Warnings: 13
