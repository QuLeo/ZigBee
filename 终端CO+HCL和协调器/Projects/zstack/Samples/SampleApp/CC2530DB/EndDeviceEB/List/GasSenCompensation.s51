///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        22/Feb/2017  22:42:49 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\机器人实践2\TI ZigBee\ZStack For               /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\So /
//                          urce\GasSenCompensation.c                         /
//    Command line       =  -f "D:\机器人实践2\TI ZigBee\ZStack For           /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"      /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f "D:\机器人实践2\TI         /
//                          ZigBee\ZStack For Test（SEA）\For Test\3.6.1      /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"     /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF00                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "D:\机器人实践2\TI         /
//                          ZigBee\ZStack For Test（SEA）\For Test\3.6.1      /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\So /
//                          urce\GasSenCompensation.c" -D NWK_AUTO_POLL -D    /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -lC           /
//                          "D:\机器人实践2\TI ZigBee\ZStack For              /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\EndDeviceEB\List\" -lA "D:\机器人实践2\TI  /
//                          ZigBee\ZStack For Test（SEA）\For Test\3.6.1      /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\EndDeviceEB\List\" --diag_suppress         /
//                          Pe001,Pa010 -o "D:\机器人实践2\TI ZigBee\ZStack   /
//                          For Test（SEA）\For Test\3.6.1                    /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\EndDeviceEB\Obj\" -e --no_code_motion      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "D:\机器人实践2\TI ZigBee\ZStack For           /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\" -I "D:\机器人实践2\TI ZigBee\ZStack For  /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\Source\" -I "D:\机器人实践2\TI          /
//                          ZigBee\ZStack For Test（SEA）\For Test\3.6.1      /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\ZMain\TI2530DB\" -I               /
//                          "D:\机器人实践2\TI ZigBee\ZStack For              /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\hal\include\"    /
//                          -I "D:\机器人实践2\TI ZigBee\ZStack For           /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\hal\target\CC253 /
//                          0EB\" -I "D:\机器人实践2\TI ZigBee\ZStack For     /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\mac\include\"    /
//                          -I "D:\机器人实践2\TI ZigBee\ZStack For           /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\mac\high_level\" /
//                           -I "D:\机器人实践2\TI ZigBee\ZStack For          /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\mac\low_level\sr /
//                          f04\" -I "D:\机器人实践2\TI ZigBee\ZStack For     /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\mac\low_level\sr /
//                          f04\single_chip\" -I "D:\机器人实践2\TI           /
//                          ZigBee\ZStack For Test（SEA）\For Test\3.6.1      /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\mt\" -I          /
//                          "D:\机器人实践2\TI ZigBee\ZStack For              /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\osal\include\"   /
//                          -I "D:\机器人实践2\TI ZigBee\ZStack For           /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\services\saddr\" /
//                           -I "D:\机器人实践2\TI ZigBee\ZStack For          /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\services\sdata\" /
//                           -I "D:\机器人实践2\TI ZigBee\ZStack For          /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\stack\af\" -I    /
//                          "D:\机器人实践2\TI ZigBee\ZStack For              /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\stack\nwk\" -I   /
//                          "D:\机器人实践2\TI ZigBee\ZStack For              /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\stack\sapi\" -I  /
//                          "D:\机器人实践2\TI ZigBee\ZStack For              /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\stack\sec\" -I   /
//                          "D:\机器人实践2\TI ZigBee\ZStack For              /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\stack\sys\" -I   /
//                          "D:\机器人实践2\TI ZigBee\ZStack For              /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\stack\zdo\" -I   /
//                          "D:\机器人实践2\TI ZigBee\ZStack For              /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\zmac\" -I        /
//                          "D:\机器人实践2\TI ZigBee\ZStack For              /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz  /
//                          --require_prototypes                              /
//    List file          =  D:\机器人实践2\TI ZigBee\ZStack For               /
//                          Test（SEA）\For Test\3.6.1                        /
//                          按键流程分析\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\EndDeviceEB\List\GasSenCompensation.s51    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME GasSenCompensation

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_DIV
        EXTERN ?FLT_EQ
        EXTERN ?FLT_GE
        EXTERN ?FLT_LT
        EXTERN ?FLT_MUL
        EXTERN ?FLT_SUB
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?S_SHL
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GasSenConcentration?relay
        FUNCTION ??GasSenConcentration?relay,0203H
        FUNCTION ??GetCookedRo?relay,0203H
        FUNCTION ??GetYFromTwoPoint?relay,0203H
        PUBLIC Fig1Data_Methane
        PUBLIC Fig2_Data
        PUBLIC GasSenConcentration
        FUNCTION GasSenConcentration,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC GasSen_Flag
        PUBLIC GasSen_R
        PUBLIC GasSen_T
        FUNCTION GetCookedRo,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 66, STACK
        FUNCTION GetYFromTwoPoint,0203H
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 4, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_41f00000
        PUBWEAK __Constant_bf800000
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
GasSenConcentration SYMBOL "GasSenConcentration"
??GasSenConcentration?relay SYMBOL "?relay", GasSenConcentration

// D:\机器人实践2\TI ZigBee\ZStack For Test（SEA）\For Test\3.6.1 按键流程分析\Projects\zstack\Samples\SampleApp\Source\GasSenCompensation.c
//    1 /**************************************
//    2 * 网孔法 区间直线法
//    3 * 获取TGS系列传感器的数据
//    4 **************************************/
//    5 #include "GasSenCompensation.h"
//    6 
//    7 //记录figure2中温湿度数据

        RSEG XDATA_I:XDATA:NOROOT(0)
//    8 int GasSen_T[]={-10,0,10,20,30,40};
GasSen_T:
        DATA8
        DS 12
        REQUIRE `?<Initializer for GasSen_T>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//    9 char GasSen_R[]={0,20,40,65,100};
GasSen_R:
        DATA8
        DS 5
        REQUIRE `?<Initializer for GasSen_R>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   10 char GasSen_Flag=0;
GasSen_Flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   11 //Methane 甲烷在figure1中的交点坐标

        RSEG XDATA_I:XDATA:NOROOT(0)
//   12 float Fig1Data_Methane[][2]=
Fig1Data_Methane:
        DATA8
        DS 152
        REQUIRE `?<Initializer for Fig1Data_Methane>`
        REQUIRE __INIT_XDATA_I
//   13 {
//   14 	{500,1.5f},
//   15 	{600,1.4f},
//   16 	{700,1.3f},
//   17 	{800,1.2f},
//   18 	{900,1.1f},
//   19 	{1000,1.0f},
//   20 	{1300,0.9f},
//   21 	{1700,0.8f},
//   22 	{2000,0.73f},
//   23 	{2100,0.7f},
//   24 	{3000,0.6f},
//   25 	{4000,0.53f},
//   26 	{4400,0.5f},
//   27 	{5000,0.47f},
//   28 	{6000,0.43f},
//   29 	{7000,0.41f},
//   30 	{8000,0.38f},
//   31 	{9000,0.36f},
//   32 	{10000,0.35f},
//   33 };
//   34 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   35 float Fig2_Data[GasSen_R_Leghth][GasSen_T_Leghth][2]=
Fig2_Data:
        DATA8
        DS 240
        REQUIRE `?<Initializer for Fig2_Data>`
        REQUIRE __INIT_XDATA_I
//   36 {
//   37 	//0% RH
//   38 	{
//   39 		{-10,1.87f},{0,1.79f},{10,1.74f},{20,1.68f},{30,1.65f},{40,1.61f},
//   40 	},
//   41 	//20% RH
//   42 	{
//   43 		{-10,1.73f},{0,1.52f},{10,1.35f},{20,1.21f},{30,1.12f},{40,1.07f},
//   44 	},
//   45 	//40% RH
//   46 	{
//   47 		{-10,1.68f},{0,1.45f},{10,1.25f},{20,1.1f},{30,0.98f},{40,0.92f},
//   48 	},
//   49 	//65% RH
//   50 	{
//   51 		{-10,1.61f},{0,1.35f},{10,1.15f},{20,1.0f},{30,0.9f},{40,0.86f},
//   52 	},
//   53 	//100% RH
//   54 	{
//   55 		{-10,1.55f},{0,1.3f},{10,1.1f},{20,0.96f},{30,0.86f},{40,0.83f},
//   56 	},
//   57 };
//   58 //参数：RL电阻上的电压值 DHT11温湿度
//   59 //返还：浓度值，500-10000ppm之间
//   60 //注意：TGS813只能测量500-10000ppm浓度的甲烷
//   61 //	当浓度高于10000ppmm,GasSen_Flag的位0被置1;
//   62 //	当浓度低于500ppm,GasSen_Flag的位1被置1;

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   63 float GasSenConcentration(float RL_Vol,char DHT11_T,unsigned char DHT11_R)
GasSenConcentration:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function GasSenConcentration
        CODE
//   64 {
        FUNCALL GasSenConcentration, GetCookedRo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
//   65 	float Rs=0;				
//   66 	float RsR0_Ratio1=0;							//Rs与R0的比率1,比率1用于最终计算浓度结果
//   67 	float concentration=0;							//最后的浓度值
//   68 	char i=0;                                                               //循环用到
//   69         GasSen_Flag = 0;                                                        //清空标志位
        MOV     DPTR,#GasSen_Flag
        CLR     A
        MOVX    @DPTR,A
//   70 
//   71 	Rs = ((GasSen_Vc/RL_Vol)-1)*GasSen_RL;				        //得出Rs的值
//   72 	RsR0_Ratio1 = Rs / GetCookedRo(DHT11_T,DHT11_R);		        //得到比率1,比率1是通过Rs与补偿后的R0的比值获得的。
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#-0x60
        MOV     ?V0 + 3,#0x40
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_bf800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        ; Setup parameters for call to function GetCookedRo
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??GetCookedRo?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
//   73 
//   74 //	printf("Rs:%f\n",Rs);							//输出Rs
//   75 //	printf("Ratio:%f\n",RsR0_Ratio1);					//输出比率
//   76 //	RsR0_Ratio1 = 1.38;						        //软件设定比率，为了测试
//   77 
//   78 	//判断比率，要求比率对应的浓度值在传感器测量的范围里，若不在，置位标志位
//   79 	if(RsR0_Ratio1 > Fig1Data_Methane[0][1])
        MOV     DPTR,#Fig1Data_Methane + 4
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JNC     ??GasSenConcentration_0
//   80 	{
//   81 		//目标气体在0-500ppm之间，不在测试范围返还0
//   82 		GasSen_Flag |= (1<<0);
        MOV     DPTR,#GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//   83 		return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x0
        MOV     R5,#0x0
        LJMP    ??GasSenConcentration_1 & 0xFFFF
//   84 	}
//   85 	else if(RsR0_Ratio1 < Fig1Data_Methane[NumOfFig1Coor-1][1])
??GasSenConcentration_0:
        MOV     DPTR,#Fig1Data_Methane + 148
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??GasSenConcentration_2
//   86 	{
//   87 		//目标气体浓度大于10000ppm，不在测试范围，返还10000
//   88 		GasSen_Flag |= (1<<1);
        MOV     DPTR,#GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//   89 		return 10000;
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     R4,#0x1c
        MOV     R5,#0x46
        LJMP    ??GasSenConcentration_1 & 0xFFFF
//   90 	}
//   91 	//循环，判断比率所在的区间，得到的i值为区间（以坐标数组形式）下标
//   92 	for(i=0;i<NumOfFig1Coor;i++)				
??GasSenConcentration_2:
        MOV     ?V0 + 6,#0x0
//   93 	{	
//   94 		if((RsR0_Ratio1 <= Fig1Data_Methane[i][1]) && (RsR0_Ratio1 >Fig1Data_Methane[i+1][1]))	
??GasSenConcentration_3:
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,#(Fig1Data_Methane + 4) & 0xff
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,#((Fig1Data_Methane + 4) >> 8) & 0xff
        ADDC    A,?V0 + 5
        MOV     DPH,A
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_GE
        JNC     ??GasSenConcentration_4
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,#(Fig1Data_Methane + 12) & 0xff
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,#((Fig1Data_Methane + 12) >> 8) & 0xff
        ADDC    A,?V0 + 5
        MOV     DPH,A
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JC      ??GasSenConcentration_5
//   95 		break;
//   96 	}
??GasSenConcentration_4:
        INC     ?V0 + 6
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,#0x13
        JC      ??GasSenConcentration_3
//   97 	//获得比率对应的浓度值
//   98 	concentration = GetXFromTwoPoint(Fig1Data_Methane[i][0],Fig1Data_Methane[i][1],Fig1Data_Methane[i+1][0],Fig1Data_Methane[i+1][1],RsR0_Ratio1);	
??GasSenConcentration_5:
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     A,#Fig1Data_Methane & 0xff
        ADD     A,?V0 + 6
        MOV     R0,A
        MOV     A,#(Fig1Data_Methane >> 8) & 0xff
        ADDC    A,?V0 + 7
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?XLOAD_R2345
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XLOAD_R2345
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_EQ
        JNZ     ??GasSenConcentration_6
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_EQ
        JNZ     ??GasSenConcentration_7
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        SJMP    ??GasSenConcentration_8
??GasSenConcentration_7:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        SJMP    ??GasSenConcentration_8
??GasSenConcentration_6:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,?V0 + 13
        MOV     ?V0 + 2,?V0 + 14
        MOV     ?V0 + 3,?V0 + 15
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_ADD
//   99 	return concentration;
??GasSenConcentration_8:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
??GasSenConcentration_1:
        MOV     A,#0x9
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  100 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Valid
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  101 
//  102 
//  103 
//  104 //参数：从DHT11获取的温湿度数据，分辨率为1，如果使用更加精准的温湿度传感器，需要改变输入参数的类型
//  105 //返还：补偿后的R0值

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  106 float GetCookedRo(char DHT11_T,unsigned char DHT11_R)
GetCookedRo:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function GetCookedRo
        CODE
//  107 {
        FUNCALL GetCookedRo, GetYFromTwoPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetCookedRo, GetYFromTwoPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetCookedRo, GetYFromTwoPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 26
        MOV     A,#-0x1a
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  108 	char sub_T_Arr=0;
//  109 	char sub_R_Arr=0;		//记录温湿度数据在温度，湿度数组中的下标（即在数组中的位置）
//  110 	float RsR0_Ratio0=0;		//最终需要得到的结果
//  111 	float TwoCoordinate[][2]=	//用于记录求目标数据所在直线的两个点的坐标
//  112 	{
//  113 		{0,0},			//靠左的点
//  114 		{0,0},			//靠右的点
//  115 	};
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {{(0.0F), (0.0F)}, {(0.0F), (0.0F)}` >> 8) & 0xff
        MOV     DPL,#`?<Constant {{(0.0F), (0.0F)}, {(0.0F), (0.0F)}` & 0xff
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  116         char TEMP_ARR[20];
//  117 
//  118 	if(DHT11_T > GasSen_T[GasSen_T_Leghth-1])	//测得的温度值高于范围，置位标志位的位2
        MOV     DPTR,#GasSen_T + 10
        MOV     ?V0 + 0,R7
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        JNC     ??GetCookedRo_0
//  119 	{
//  120           DHT11_T = GasSen_TEMP_MAX;  //设置温湿度为默认值
        MOV     R7,#0x28
//  121 	  GasSen_Flag |=(1<<2);
        MOV     DPTR,#GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.2
        SJMP    ??GetCookedRo_1
//  122 	}
//  123 	else if(DHT11_T < GasSen_T[0])			//测得的温度值低于范围，置位标志位的位3
??GetCookedRo_0:
        MOV     DPTR,#GasSen_T
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        CLR     C
        MOV     A,R7
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_12:
        JNC     ??GetCookedRo_2
//  124 	{
//  125           DHT11_T = (char)GasSen_TEMP_MIN;   //设置温湿度为默认值
        MOV     R7,#-0xa
//  126 	  GasSen_Flag |=(1<<3);
        MOV     DPTR,#GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.3
??GetCookedRo_1:
        MOVX    @DPTR,A
//  127 	}
//  128 
//  129 	if(DHT11_R > GasSen_R[GasSen_R_Leghth-1])	//测得的湿度值高于范围，置位标志位的位4
??GetCookedRo_2:
        MOV     DPTR,#GasSen_R + 4
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        JNC     ??GetCookedRo_3
//  130 	{
//  131            DHT11_R =  GasSen_HUMI_MAX;
        MOV     R6,#0x64
//  132 	   GasSen_Flag |=(1<<4);
        MOV     DPTR,#GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.4
        SJMP    ??GetCookedRo_4
//  133 	}
//  134 	else if(DHT11_R < GasSen_R[0])			//测得的湿度值高于范围,置位标志位的位5
??GetCookedRo_3:
        MOV     DPTR,#GasSen_R
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     ??GetCookedRo_5
//  135 	{
//  136           DHT11_R =  GasSen_HUMI_MIN;
        MOV     R6,#0x0
//  137 	  GasSen_Flag |=(1<<5);
        MOV     DPTR,#GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
??GetCookedRo_4:
        MOVX    @DPTR,A
//  138 	}
//  139 
//  140 	//循环，判断在哪个温度的区间，得到数组的下标
//  141 	for(sub_T_Arr=0; sub_T_Arr<GasSen_T_Leghth; sub_T_Arr++)				
??GetCookedRo_5:
        MOV     ?V0 + 2,#0x0
//  142 	{	
//  143 		if((DHT11_T >= GasSen_T[sub_T_Arr]) && (DHT11_T <= GasSen_T[sub_T_Arr+1]))	
??GetCookedRo_6:
        MOV     ?V0 + 0,R7
        MOV     A,?V0 + 2
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#GasSen_T & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(GasSen_T >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?Subroutine3 & 0xFFFF
//  144 		break;
//  145 	}
??CrossCallReturnLabel_5:
        CLR     C
        MOV     A,?V0 + 0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_13:
        JC      ??GetCookedRo_7
        MOV     A,?V0 + 2
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(GasSen_T + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((GasSen_T + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        JNC     ??GetCookedRo_8
??GetCookedRo_7:
        INC     ?V0 + 2
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x6
        JC      ??GetCookedRo_6
//  146 	//循环，判断在哪个湿度的区间，得到数组的下标
//  147 	for(sub_R_Arr=0; sub_R_Arr<GasSen_R_Leghth; sub_R_Arr++)				
??GetCookedRo_8:
        MOV     R0,#0x0
//  148 	{	
//  149 		if((DHT11_R >= GasSen_R[sub_R_Arr]) && (DHT11_R <= GasSen_R[sub_R_Arr+1]))	
??GetCookedRo_9:
        MOV     ?V0 + 0,R0
        MOV     A,#GasSen_R & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(GasSen_R >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        CLR     C
        SUBB    A,R1
        JC      ??GetCookedRo_10
        MOV     A,#(GasSen_R + 1) & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#((GasSen_R + 1) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        JNC     ??GetCookedRo_11
//  150 		break;
//  151 	}
??GetCookedRo_10:
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0x5
        JC      ??GetCookedRo_9
//  152 	
//  153 	//计算两点坐标
//  154 	TwoCoordinate[0][0] = Fig2_Data[sub_R_Arr][sub_T_Arr][0];
??GetCookedRo_11:
        MOV     DPL,R0
        MOV     ?V0 + 0,DPL
        MOV     A,R0
        MOV     B,#0x30
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#Fig2_Data & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(Fig2_Data >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?XLOAD_R2345
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  155 	TwoCoordinate[1][0] = Fig2_Data[sub_R_Arr][sub_T_Arr+1][0];
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XLOAD_R2345
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R2345
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  156 	TwoCoordinate[0][1] = GetYFromTwoPoint(GasSen_R[sub_R_Arr] , Fig2_Data[sub_R_Arr][sub_T_Arr][1] , GasSen_R[sub_R_Arr+1] , Fig2_Data[sub_R_Arr+1][sub_T_Arr][1],DHT11_R);
        MOV     A,#GasSen_R & 0xff
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,#(GasSen_R >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?UL_TO_FLT
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        CLR     A
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 8
        LCALL   ?UL_TO_FLT
        MOV     ?V0 + 12,R6
        CLR     A
        MOV     ?V0 + 13,A
        MOV     ?V0 + 14,A
        MOV     ?V0 + 15,A
        MOV     R0,#?V0 + 12
        LCALL   ?UL_TO_FLT
        ; Setup parameters for call to function GetYFromTwoPoint
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     A,R0
        ADD     A,#0x34
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   ??GetYFromTwoPoint?relay
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  157 	TwoCoordinate[1][1] = GetYFromTwoPoint(GasSen_R[sub_R_Arr] , Fig2_Data[sub_R_Arr][sub_T_Arr+1][1] , GasSen_R[sub_R_Arr+1] , Fig2_Data[sub_R_Arr+1][sub_T_Arr+1][1],DHT11_R);
        ; Setup parameters for call to function GetYFromTwoPoint
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     A,R0
        ADD     A,#0x3c
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0xc
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   ??GetYFromTwoPoint?relay
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  158 	
//  159 	//得到结果，Rs和R0的比值
//  160 	RsR0_Ratio0 = GetYFromTwoPoint(TwoCoordinate[0][0],TwoCoordinate[0][1],TwoCoordinate[1][0],TwoCoordinate[1][1],DHT11_T);
//  161 
//  162 	return RsR0_Ratio0 * GasSen_Standard_R0;
        ; Setup parameters for call to function GetYFromTwoPoint
        MOV     ?V0 + 8,R7
        CLR     A
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 8
        LCALL   ?UL_TO_FLT
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R2345
        LCALL   ??GetYFromTwoPoint?relay
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#__Constant_41f00000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,#0x1a
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  163 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 62)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_15:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_2
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_3
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 62)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
//  164 
//  165 //对于一条通过两点确定的直线，给定一个y值，返还x值
//  166 float GetXFromTwoPoint(float x1,float y1,float x2,float y2,float y)
//  167 {
//  168 	if(y1 == y2)			
//  169 	{
//  170 		if(x1 == x2)
//  171 		{
//  172 			return 0;		//如果输入的两点重合了，则返回0
//  173 		}				
//  174 		return y1;			//如果两点的y坐标相等，则返还y坐标
//  175 	}
//  176 	
//  177 	else
//  178 		return ((x2-x1)*(y-y1))/(y2-y1) + x1;
//  179 }
//  180 //对于一条通过两点确定的直线，给定一个x值，返还y值

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  181 float GetYFromTwoPoint(float x1,float y1,float x2,float y2,float x)
GetYFromTwoPoint:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function GetYFromTwoPoint
        CODE
//  182 {
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
//  183 	if(x1 == x2)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_EQ
        JNZ     ??GetYFromTwoPoint_0
//  184 	{
//  185 		if(y1 == y2)
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_EQ
        JNZ     ??GetYFromTwoPoint_1
//  186 		{
//  187 			return 0;		//如果输入的两点重合了，则返回0
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x0
        MOV     R5,#0x0
        SJMP    ??GetYFromTwoPoint_2
//  188 		}	
//  189 		return x1;			//如果两点的x坐标相等，则返还x坐标
??GetYFromTwoPoint_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R2345
        SJMP    ??GetYFromTwoPoint_2
//  190 	}
//  191 	else
//  192 		return ((y2-y1)*(x-x1))/(x2-x1) + y1;
??GetYFromTwoPoint_0:
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_SUB
        PUSH    ?V0 + 8
        CFI CFA_SP SP+-1
        PUSH    ?V0 + 9
        CFI CFA_SP SP+-2
        PUSH    ?V0 + 10
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 11
        CFI CFA_SP SP+-4
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_SUB
        POP     ?V0 + 11
        CFI CFA_SP SP+-3
        POP     ?V0 + 10
        CFI CFA_SP SP+-2
        POP     ?V0 + 9
        CFI CFA_SP SP+-1
        POP     ?V0 + 8
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_MUL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_ADD
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
??GetYFromTwoPoint_2:
        MOV     A,#0x4
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock26
//  193 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for GasSen_T>`:
        DATA16
        DW -10
        DW 0
        DW 10
        DW 20
        DW 30
        DW 40

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for GasSen_R>`:
        DATA8
        DB 0
        DB 20
        DB 40
        DB 65
        DB 100

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Fig1Data_Methane>`:
        DATA32
        DD 43FA0000H
        DD 3FC00000H
        DD 44160000H
        DD 3FB33333H
        DD 442F0000H
        DD 3FA66666H
        DD 44480000H
        DD 3F99999AH
        DD 44610000H
        DD 3F8CCCCDH
        DD 447A0000H
        DD 3F800000H
        DD 44A28000H
        DD 3F666666H
        DD 44D48000H
        DD 3F4CCCCDH
        DD 44FA0000H
        DD 3F3AE148H
        DD 45034000H
        DD 3F333333H
        DD 453B8000H
        DD 3F19999AH
        DD 457A0000H
        DD 3F07AE14H
        DD 45898000H
        DD 3F000000H
        DD 459C4000H
        DD 3EF0A3D7H
        DD 45BB8000H
        DD 3EDC28F6H
        DD 45DAC000H
        DD 3ED1EB85H
        DD 45FA0000H
        DD 3EC28F5CH
        DD 460CA000H
        DD 3EB851ECH
        DD 461C4000H
        DD 3EB33333H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Fig2_Data>`:
        DATA32
        DD 0C1200000H
        DD 3FEF5C29H
        DD 0H
        DD 3FE51EB8H
        DD 41200000H
        DD 3FDEB852H
        DD 41A00000H
        DD 3FD70A3DH
        DD 41F00000H
        DD 3FD33333H
        DD 42200000H
        DD 3FCE147BH
        DD 0C1200000H
        DD 3FDD70A4H
        DD 0H
        DD 3FC28F5CH
        DD 41200000H
        DD 3FACCCCDH
        DD 41A00000H
        DD 3F9AE148H
        DD 41F00000H
        DD 3F8F5C29H
        DD 42200000H
        DD 3F88F5C3H
        DD 0C1200000H
        DD 3FD70A3DH
        DD 0H
        DD 3FB9999AH
        DD 41200000H
        DD 3FA00000H
        DD 41A00000H
        DD 3F8CCCCDH
        DD 41F00000H
        DD 3F7AE148H
        DD 42200000H
        DD 3F6B851FH
        DD 0C1200000H
        DD 3FCE147BH
        DD 0H
        DD 3FACCCCDH
        DD 41200000H
        DD 3F933333H
        DD 41A00000H
        DD 3F800000H
        DD 41F00000H
        DD 3F666666H
        DD 42200000H
        DD 3F5C28F6H
        DD 0C1200000H
        DD 3FC66666H
        DD 0H
        DD 3FA66666H
        DD 41200000H
        DD 3F8CCCCDH
        DD 41A00000H
        DD 3F75C28FH
        DD 41F00000H
        DD 3F5C28F6H
        DD 42200000H
        DD 3F547AE1H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GasSenConcentration?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GasSenConcentration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetCookedRo?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetCookedRo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetYFromTwoPoint?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetYFromTwoPoint

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {{(0.0F), (0.0F)}, {(0.0F), (0.0F)}`:
        DATA32
        DD 0H
        DD 0H
        DD 0H
        DD 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bf800000:
        DD 0BF800000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_41f00000:
        DD 41F00000H

        END
//  194 /* For Test in VC++
//  195 void main()
//  196 {
//  197 	printf("Gas concertation:%.0fppm\r\n",GasSenConcentration(0.16129f,20,50));
//  198 } */
// 
// 1 464 bytes in segment BANKED_CODE
//    18 bytes in segment BANK_RELAYS
//   409 bytes in segment XDATA_I
//   409 bytes in segment XDATA_ID
//    28 bytes in segment XDATA_ROM_C
//     1 byte  in segment XDATA_Z
// 
// 1 891 bytes of CODE  memory
//    16 bytes of CONST memory (+ 12 bytes shared)
//   410 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
