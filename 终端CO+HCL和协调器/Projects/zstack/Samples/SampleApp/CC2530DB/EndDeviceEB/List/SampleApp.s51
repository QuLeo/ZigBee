///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        19/Dec/2018  11:52:53 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\Source\ /
//                          SampleApp.c                                       /
//    Command line       =  -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg         /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f C:\Users\77564\Desktop\¼à² /
//                          âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ /
//                          f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0             /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF00                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\77564\Desktop\¼à² /
//                          âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Sa /
//                          mples\SampleApp\Source\SampleApp.c -D             /
//                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D           /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          xLCD_SUPPORTED=DEBUG -D HAL_ADC -D                /
//                          Channel_0_For_TGS822 -D Channel_1_For_TGS813 -lC  /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\EndDeviceEB\List\ -lA                           /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\EndDeviceEB\List\ --diag_suppress Pe001,Pa010   /
//                          -o C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\EndDeviceEB\Obj\ -e --no_code_motion         /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³Ì /
//                          Ðò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\Source\ -I                          /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\ZMain\TI2530DB\ -I                     /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\hal\include\ -I       /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\hal\target\CC2530EB\  /
//                          -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\include\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\mac\high_level\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\mac\low_level\srf04\  /
//                          -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\low_level\srf0 /
//                          4\single_chip\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç /
//                          \¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mt\ /
//                           -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä /
//                          ×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\osal\include\ -I  /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\services\saddr\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\services\sdata\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\af\ -I          /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\nwk\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sapi\ -I        /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sec\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sys\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\zdo\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\ -I              /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\f8w\ -Ohz        /
//    List file          =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\EndDeviceEB\List\SampleApp.s51                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_LT
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SampleAPP_SendGasSensorMessage?relay
        FUNCTION ??SampleAPP_SendGasSensorMessage?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC GasSensorFlagForChannel_0
        PUBLIC PointGetConcentrationForChannel_0
        PUBLIC SampleAPP_SendGasSensorMessage
        FUNCTION SampleAPP_SendGasSensorMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 66, STACK
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_Point_To_Point_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBWEAK _A_P1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_39000000
        PUBWEAK __Constant_4051eb85
        PUBWEAK __Constant_447a0000
        PUBWEAK __Constant_becccccd
        PUBWEAK __Constant_bf4a3d71
        PUBLIC contin
        PUBLIC contin1
        PUBLIC flag
        PUBLIC flag_aol
        PUBLIC flag_co
        PUBLIC flag_hcl
        PUBLIC flag_tgs
        PUBLIC humi_f
        PUBLIC send_data_CO
        PUBLIC send_data_HCL
        PUBLIC send_data_MQ3
        PUBLIC send_data_PM25
        PUBLIC temp_f
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalAdcInit          SYMBOL "HalAdcInit"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_rand           SYMBOL "osal_rand"
dht11_value         SYMBOL "dht11_value"
HalAdcRead          SYMBOL "HalAdcRead"
memset              SYMBOL "memset"
sprintf             SYMBOL "sprintf"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalAdcInit?relay  SYMBOL "?relay", HalAdcInit
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
`?<Name TGS822GetConcentrati 24>` SYMBOL "TGS822GetConcentration"
??TGS822GetConcentration?relay SYMBOL "?relay", `?<Name TGS822GetConcentrati 24>`
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??dht11_value?relay SYMBOL "?relay", dht11_value
??memset?relay      SYMBOL "?relay", memset
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
SampleAPP_SendGasSensorMessage SYMBOL "SampleAPP_SendGasSensorMessage"
??SampleAPP_SendGasSensorMessage?relay SYMBOL "?relay", SampleAPP_SendGasSensorMessage
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcInit
        FUNCTION HalAdcInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dht11_value
        FUNCTION dht11_value,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalAdcInit?relay
        FUNCTION ??HalAdcInit?relay,00H
        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??TGS822GetConcentration?relay
        FUNCTION ??TGS822GetConcentration?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??dht11_value?relay
        FUNCTION ??dht11_value?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN TGS822GasSen_Flag

// C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 
//   65 #include "SampleApp.h"
//   66 #include "SampleAppHw.h"
//   67 
//   68 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 #include "hal_led.h"
//   73 #include "hal_key.h"
//   74 #include "hal_adc.h"
//   75 //´Ë´¦ÓÃÓÚ´®¿Ú
//   76 #include  "MT_UART.h"
//   77 //ÎÂÊª¶È´«¸ÐÆ÷
//   78 #include "dht11.h"
//   79 //CÓïÑÔ±ê×¼¿â
//   80 #include <string.h>
//   81 #include <stdlib.h>
//   82 #include <stdio.h>
//   83 #include <math.h>
//   84 //GasSensor »ñÈ¡Êý¾ÝµÄÍ·ÎÄ¼þ
//   85 #include "MQ3.h"
//   86 #include "TGS822.h"
//   87 
//   88 //CO
//   89 #include <CO.h>
//   90 
//   91 /*********************************************************************
//   92  * MACROS
//   93  */
//   94 
//   95 
//   96 #define AMS1117_3_ADC_VOL     3.28   //ºê¶¨ÒåAMS1117 3.3 ADC²Î¿¼µçÑ¹£¬¸ÃÖµ¿ÉÄÜÔÚ3.2-3.4¸¡¶¯
//   97 //Èç¹û¶¨ÒåÁËchannel0»òÕßchannel1¸øÆøÌå´«¸ÐÆ÷£¬Ôò
//   98 #if (defined Channel_0_For_TGS813) || (defined Channel_0_For_TGS822)
//   99 #define Channel_0_GasSensor_Busy
//  100 #endif
//  101 #if (defined Channel_1_For_TGS813) || (defined Channel_1_For_TGS822)
//  102 #define Channel_1_GasSensor_Busy
//  103 #endif
//  104 //Èç¹û¶à¸öÆøÌå´«¸ÐÆ÷Í¬Ê±Õ¼ÓÃÍ¬Ò»¸öchannel£¬ÔòÌáÊ¾
//  105 #if (defined Channel_0_For_TGS813) && (defined Channel_0_For_TGS822)
//  106 #error "Channel0 is just for one gas sensor.Check the micro!"
//  107 #endif
//  108 #if (defined Channel_1_For_TGS813) && (defined Channel_1_For_TGS822)
//  109 #error "Channel1 is just for one gas sensor.Check the micro!"
//  110 
//  111 #endif
//  112 #if (!defined Channel_0_GasSensor_Busy) && (!defined Channel_1_GasSensor_Busy)
//  113 #warning "Do you want to use the Gas Sensor? if yes,please define it,if not please ignore this message."
//  114 #endif
//  115 
//  116 // ÉèÖÃ²»Í¬´«¸ÐÆ÷µçÑ¹ãÐÖµ
//  117 // TGS813
//  118 #define TGS813_Safe 0.8
//  119 #define TGS813_Mildly 1.2
//  120 #define TGS813_Moderate 1.8
//  121 #define TGS813_Severe 2.3
//  122 // TGS822
//  123 #define TGS822_Safe 0.8
//  124 #define TGS822_Mildly 1.2
//  125 #define TGS822_Moderate 1.8
//  126 #define TGS822_Severe 2.3
//  127 
//  128 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  129 char contin=0;
contin:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  130 char contin1=0;
contin1:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  131 extern uint8 PM_data[6];
//  132 extern unsigned short pm_data;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 uint8 send_data_PM25[8];
send_data_PM25:
        DS 8
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134 uint8 send_data_CO[7];
send_data_CO:
        DS 7
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 uint8 send_data_HCL[6];
send_data_HCL:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 uint8 send_data_MQ3[6];
send_data_MQ3:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 uint8  temp_f;
temp_f:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 uint8  humi_f;
humi_f:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  139 char flag=0,flag_co=0,flag_hcl=0,flag_aol=0,flag_tgs=0;
flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag_co:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag_hcl:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag_aol:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag_tgs:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  140 /*********************************************************************
//  141  * CONSTANTS
//  142  */
//  143 
//  144 /*********************************************************************
//  145  * TYPEDEFS
//  146  */
//  147 
//  148 /*********************************************************************
//  149  * GLOBAL VARIABLES
//  150  */
//  151 
//  152 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  153 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 0
//  154 {
//  155   SAMPLEAPP_PERIODIC_CLUSTERID,
//  156   SAMPLEAPP_FLASH_CLUSTERID
//  157 };
//  158 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  159 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 3
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 3
        DATA16
        DW SampleApp_ClusterList
//  160 {
//  161   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  162   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  163   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  164   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  165   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  166   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  167   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  168   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  169   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  170 };
//  171 
//  172 // This is the Endpoint/Interface description.  It is defined here, but
//  173 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  174 // in the structure here and make it a "const" (in code space).  The
//  175 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  176 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  177 
//  178 /*********************************************************************
//  179  * EXTERNAL VARIABLES
//  180  */
//  181 
//  182 /*********************************************************************
//  183  * EXTERNAL FUNCTIONS
//  184  */
//  185 
//  186 /*********************************************************************
//  187  * LOCAL VARIABLES
//  188  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  189 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  190                           // This variable will be received when
//  191                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  192 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  193 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  194 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  195 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  196 afAddrType_t SampleApp_Periodic_DstAddr;
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  197 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  198 afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  199 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  200 afAddrType_t SampleApp_Point_To_Point_DstAddr;
SampleApp_Point_To_Point_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  201 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  202 aps_Group_t SampleApp_Group;//·Ö×éÄÚÈÝ
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  203 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  204 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  205 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  206 
//  207 
//  208 //@huang
//  209 //ÉèÖÃchannel0ºÍchannel1»ñÈ¡ÆøÌåÅ¨¶ÈÖ¸ÏòµÄº¯Êý
//  210 #if (defined Channel_0_For_TGS822)

        RSEG XDATA_I:XDATA:NOROOT(0)
//  211 int (*PointGetConcentrationForChannel_0)(float ,char ,unsigned char ) = TGS822GetConcentration;
PointGetConcentrationForChannel_0:
        DATA16
        DS 2
        REQUIRE `?<Initializer for PointGetConcentrationForChan`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  212 uint8 *GasSensorFlagForChannel_0 = &TGS822GasSen_Flag;
GasSensorFlagForChannel_0:
        DATA16
        DS 2
        REQUIRE `?<Initializer for GasSensorFlagForChannel_0>`
        REQUIRE __INIT_XDATA_I
//  213 #elif (defined Channel_1_For_TGS822)
//  214 int (*PointGetConcentrationForChannel_1)(float ,char ,unsigned char ) = TGS822GetConcentration;
//  215 uint8 *GasSensorFlagForChannel_1 = &TGS822GasSen_Flag;
//  216 #endif
//  217 
//  218 
//  219 /*********************************************************************
//  220  * LOCAL FUNCTIONS
//  221  */
//  222 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  223 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  224 void SampleApp_SendPeriodicMessage( void );//¹ã²¥×éÍø
//  225 void SampleApp_SendFlashMessage( uint16 flashTime );//×é²¥×éÍø
//  226 void SampleApp_SendPointMessage( void );//µã²¥×éÍø
//  227 
//  228 //@huang
//  229 void SampleAPP_SendGasSensorMessage(void);//×Ô¼º¶¨ÒåµÄÊý¾Ý·¢ËÍº¯Êý
//  230 void GetChannel1ADC(void);
//  231 void GetChannel2ADC(void);
//  232 /*********************************************************************
//  233  * NETWORK LAYER CALLBACKS
//  234  */
//  235 
//  236 /*********************************************************************
//  237  * PUBLIC FUNCTIONS
//  238  */
//  239 
//  240 /*********************************************************************
//  241  * @fn      SampleApp_Init
//  242  *
//  243  * @brief   Initialization function for the Generic App Task.
//  244  *          This is called during initialization and should contain
//  245  *          any application specific initialization (ie. hardware
//  246  *          initialization/setup, table initialization, power up
//  247  *          notificaiton ... ).
//  248  *
//  249  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  250  *                    used to send messages and set timers.
//  251  *
//  252  * @return  none
//  253  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  254 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  255 {
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalAdcInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  256   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  257   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  258   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  259 
//  260   MT_UartInit();                //´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  261   MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  262   HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
        MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  263   HalAdcInit();                 //ADC²Î¿¼µçÑ¹³õÊ¼»¯£¨Ä¬ÈÏÎªÄÚ²¿²Î¿¼µçÑ¹£©
        ; Setup parameters for call to function HalAdcInit
        LCALL   ??HalAdcInit?relay
//  264   // Device hardware initialization can be added here or in main() (Zmain.c).
//  265   // If the hardware is application specific - add it here.
//  266   // If the hardware is other parts of the device add it in main().
//  267 
//  268  #if defined ( BUILD_ALL_DEVICES )
//  269   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  270   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  271   // together - if they are - we will start up a coordinator. Otherwise,
//  272   // the device will start as a router.
//  273   if ( readCoordinatorJumper() )
//  274     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  275   else
//  276     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  277 #endif // BUILD_ALL_DEVICES
//  278 
//  279 #if defined ( HOLD_AUTO_START )
//  280   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  281   //  from starting the device and wait for the application to
//  282   //  start the device.
//  283   ZDOInitDevice(0);
//  284 #endif
//  285 
//  286   // Setup for the periodic message's destination address
//  287   // Broadcast to everyone
//  288   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  289   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  290   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  291 
//  292   // Setup for the flash command's destination address - Group 1 //×é²¥ÉèÖÃ
//  293   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  294   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  295   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×é²¥ºÅ
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  296   //µã²¥½á¹¹ÌåµÄ³õÊ¼»¯
//  297    // Setup for the point command's destination address
//  298   SampleApp_Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥
        MOV     DPTR,#SampleApp_Point_To_Point_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  299   SampleApp_Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  300   SampleApp_Point_To_Point_DstAddr.addr.shortAddr = 0x0000;           //0x0000 Ä¬ÈÏÊÇÐ­µ÷Æ÷µÄµØÖ·
        MOV     DPTR,#SampleApp_Point_To_Point_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  301   // Fill out the endpoint description.
//  302   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  303   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  304   SampleApp_epDesc.simpleDesc
//  305             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  306   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  307 
//  308   // Register the endpoint description with the AF
//  309   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  310 
//  311   // Register for all key events - This app will handle all key events
//  312   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  313 
//  314   // By default, all devices start out in Group 1
//  315   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  316   osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  317   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  318 
//  319 #if defined ( LCD_SUPPORTED )
//  320   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
//  321 #endif
//  322 
//  323   //Èç¹ûÃ»ÓÐÊ¹ÓÃPA£¬ÔòÁÁµÆ£¨»òÕßÆäËû£©£¬Èç¹ûÊ¹ÓÃÁËPA£¬Ôò...
//  324 #if defined (HAL_PA_LNA)
//  325   HAL_TURN_ON_LED2();
        CLR     0x90.1
//  326 #endif
//  327 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE _A_P1
//  328 
//  329 /*********************************************************************
//  330  * @fn      SampleApp_ProcessEvent
//  331  *
//  332  * @brief   Generic Application Task event processor.  This function
//  333  *          is called to process all events for the task.  Events
//  334  *          include timers, messages and any other user defined events.
//  335  *
//  336  * @param   task_id  - The OSAL assigned task ID.
//  337  * @param   events - events to process.  This is a bit map and can
//  338  *                   contain more than one event.
//  339  *
//  340  * @return  none
//  341  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  342 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  343 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleAPP_SendGasSensorMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  344   afIncomingMSGPacket_t *MSGpkt;
//  345   (void)task_id;  // Intentionally unreferenced parameter
//  346 
//  347   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  348   {
//  349     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  350     while ( MSGpkt )
//  351     {
//  352       switch ( MSGpkt->hdr.event )
//  353       {
//  354         /* Received when a key is pressed
//  355         case KEY_CHANGE:
//  356           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  357           break;*/
//  358 
//  359         // Received when a messages is received (OTA) for this endpoint
//  360         case AF_INCOMING_MSG_CMD:
//  361           SampleApp_MessageMSGCB( MSGpkt );
//  362             //¹¤×÷Ö¸Ê¾µÆ
//  363            //HAL_TOGGLE_LED2();
//  364           break;
//  365 
//  366         // Received whenever the device changes state in the network
//  367         case ZDO_STATE_CHANGE:
//  368           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  369           if ( //(SampleApp_NwkState == DEV_ZB_COORD)||       //Ð­µ÷Æ÷²»ÔÊÐí¶Ô×Ô¼ºµã²¥£¬Ö»ÔÊÐíÂ·ÓÉÆ÷ºÍÖÕ¶Ë¶ÔÐ­µ÷Æ÷µã²¥
//  370               (SampleApp_NwkState == DEV_ROUTER)
//  371               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_4
//  372           {
//  373             // Start sending the periodic message in a regular interval.
//  374             osal_start_timerEx( SampleApp_TaskID,                    //¸Ãº¯Êý¶¨Ê±´¥·¢ÊÂ¼þ
//  375                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,        //²ÎÊýÒÀ´ÎÊÇ¡°ÈÎÎñID¡±
//  376                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );  //¡°×¢²áÊÂ¼þ¡±¡°Ñ­»·Ê±¼ä¡±
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  377           }
//  378           else
//  379           {
//  380             // Device is no longer in the network
//  381           }
//  382           break;
//  383 
//  384         default:
//  385           break;
//  386       }
//  387 
//  388       // Release the memory
//  389       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  390 
//  391       // Next - if one is available
//  392       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_4
//  393     }
//  394 
//  395     // return unprocessed events
//  396     return (events ^ SYS_EVENT_MSG);                        //·µ»ØÃ»ÓÐ´¦ÀíµÄÊÂ¼þ
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_7:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_8
//  397   }
//  398 
//  399   // Send a message out - This event is generated by a timer
//  400   //  (setup in SampleApp_Init()).
//  401   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_9
//  402   {
//  403     // Send the periodic message
//  404      SampleAPP_SendGasSensorMessage();      //·¢ËÍ´«¸ÐÆ÷Êý¾ÝµÄº¯Êý
        ; Setup parameters for call to function SampleAPP_SendGasSensorMessage
        LCALL   ??SampleAPP_SendGasSensorMessage?relay
//  405     // Setup to send message again in normal period (+ a little jitter)
//  406     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  407         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x18
        MOV     R4,A
        CLR     A
        ADDC    A,#0x3
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  408 
//  409     // return unprocessed events
//  410     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_7
//  411   }
//  412 
//  413   // Discard unknown events
//  414   return 0;
??SampleApp_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_8:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  415 }
//  416 
//  417 /*********************************************************************
//  418  * LOCAL FUNCTIONS
//  419  */
//  420 
//  421 /*********************************************************************
//  422  * @fn      SampleApp_MessageMSGCB
//  423  *
//  424  * @brief   Data message processor callback.  This function processes
//  425  *          any incoming data - probably from other devices.  So, based
//  426  *          on cluster ID, perform the intended action.
//  427  *
//  428  * @param   none
//  429  *
//  430  * @return  none
//  431  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  432 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  433 {
        ; Saved register size: 0
        ; Auto size: 0
//  434   float Channel0_VolSave = 0.0f;
//  435   char  convert_arr[20];
//  436   uint8 convert_u16[20];
//  437   //ÓÉÓÚÓÐÁù¸ö×Ö½Ú´«ÊäÊý¾Ý£¬Ö»ÓÃµ½Á½¸ö£¬ËùÒÔºóÃæËÄ¸öÊý¾Ý×Ö½ÚÓÃ0xff±íÊ¾
//  438   convert_u16[2]   = 0xff;
//  439   convert_u16[3]   = 0xff;
//  440   convert_u16[4]   = 0xff;
//  441   convert_u16[5]   = 0xff;  
//  442   uint8 add[]={0xfe,0x10,0x69,0x01,0x83,0xf2,0x2e,0x01,0x00,0x4b,0x12,0x01};//³õÊ¼ÀàÎª01£¬µØÖ·01£¬Ö¡Í·
//  443   uint8 end[]={0x77,0x88,0x12};  //Ö¡Î²
//  444   uint8 i=0;
//  445   uint16   sensor_value=0;
//  446   char count;
//  447 
//  448   switch ( pkt->clusterId )
//  449   {
//  450   
//  451   case SAMPLEAPP_GAS_SENSOR_CLUSTERID:
//  452       i=0;//ÓÃÓÚ¼ÇÂ¼Êý¾Ý°üµÄ¼ÆÊý×Ó
//  453       char EDid=0;
//  454       float p=0;
//  455       EDid=(pkt->cmd.Data)[27];
//  456 #if defined (ASCII_Printf) //ÉèÖÃÎª×Ö·ûÊä³ö,È¡ÏûÊä³ö¾Í¼Ó¸ö_not
//  457       if(EDid==1&&contin==0)
//  458       //if(1)
//  459       {
//  460         /*ÏÔÊ¾ÊÕµ½µÄÊý¾ÝÁ¿
//  461           sprintf(convert_arr,"DataLength:%d\r\n",pkt->cmd.DataLength);
//  462           HalUARTWrite(0,convert_arr,strlen(convert_arr));*/
//  463       
//  464           //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
//  465           sprintf(convert_arr,"TEMP£º%d C\r\n",(pkt->cmd.Data)[i]),i++; //Òþ²ØTEMP
//  466           HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  467           sprintf(convert_arr,"HUMI£º%dRH\r\n",(pkt->cmd.Data)[i]),i++;//Òþ²ØHUMI
//  468           HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  469       
//  470           //ÅÐ¶Ï±êÖ¾Î»£¬²¢¸ø³öÌáÊ¾ÐÅÏ¢
//  471           //DHT³ö´í
//  472           if((pkt->cmd.Data)[i++] & (1<<0))
//  473           {
//  474             HalUARTWrite(0,"DHT11 Error!\r\n",strlen("DHT11 Error!\r\n"));
//  475           }
//  476       
//  477       #if (defined Channel_0_GasSensor_Busy)
//  478           //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
//  479           Channel0_VolSave =  ((float)((pkt->cmd.Data)[i+1]+(pkt->cmd.Data)[i]*256))/1000;
//  480           sprintf(convert_arr,"vol0£º%.3fV\r\n",Channel0_VolSave),i+=2;
//  481           HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  482           if(Channel0_VolSave < TGS822_Safe)
//  483             sprintf(convert_arr,"Level: Ã»ÓÐÎÛÈ¾\r\n");
//  484           else if(Channel0_VolSave < TGS822_Mildly)
//  485             sprintf(convert_arr,"Level: Çá¶ÈÎÛÈ¾\r\n");
//  486           else if(Channel0_VolSave < TGS822_Moderate)
//  487             sprintf(convert_arr,"Level: ÖÐ¶ÈÎÛÈ¾\r\n");
//  488           else if(Channel0_VolSave < TGS822_Severe)
//  489             sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
//  490       //      sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
//  491        //   HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  492           //    sprintf(convert_arr,"concen0£º%dppm\r\n",BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])),i+=2;
//  493       //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  494       //    sprintf(convert_arr,"Flag0:0x%x\r\n",(pkt->cmd.Data)[i]),i++;
//  495       //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  496       #endif
//  497         
//  498          //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
//  499         for(count=0;count<=6;count++)
//  500         {
//  501           send_data_CO[count]=(pkt->cmd.Data)[count+8];
//  502         }
//  503         for(count=0;count<=5;count++)
//  504         {
//  505           send_data_HCL[count]=(pkt->cmd.Data)[count+15];
//  506         }
//  507         for(count=0;count<=5;count++)
//  508         {
//  509           send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
//  510         }
//  511         HalUARTWrite(0, "CO:", 3);
//  512         HalUARTWrite(0, send_data_CO, 7); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  513         HalUARTWrite(0, "ppm", 3);
//  514         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  515         
//  516         HalUARTWrite(0, "HCL:", 4);
//  517         HalUARTWrite(0, send_data_HCL, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  518         HalUARTWrite(0, "ppm", 3);
//  519         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  520         
//  521         HalUARTWrite(0, "AOL:", 4);
//  522         HalUARTWrite(0, send_data_MQ3, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  523         HalUARTWrite(0, "ppm", 3);
//  524         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  525         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  526         HalUARTWrite(0, "\r\n", 2);
//  527         
//  528     if((Channel0_VolSave>0.15)&&((atof(send_data_MQ3))>200)&&((Channel0_VolSave*1000)>atof(send_data_MQ3)))
//  529           flag_tgs++;
//  530         
//  531     if((Channel0_VolSave>0.15)&&((atof(send_data_MQ3))>200)&&((Channel0_VolSave*1000)<atof(send_data_MQ3)))
//  532           flag_aol++;
//  533     
//  534         
//  535     if(++flag==5)
//  536         
//  537       {
//  538            
//  539            flag=0;      
//  540            
//  541            if(flag_tgs>=3)
//  542               HalUARTWrite(0, "ÆûÓÍÐ¹Â©\r\n", 10);
//  543                   
//  544            if(flag_aol>=3)
//  545              HalUARTWrite(0, "¾Æ¾«Ð¹Â©\r\n", 10);
//  546            flag_tgs=0;flag_aol=0;       
//  547        
//  548       }        
//  549         contin=1;
//  550                   //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
//  551 
//  552       }
//  553       if(EDid==2&&contin==1)
//  554       {
//  555         for(count=0;count<6;count++)
//  556         {
//  557           send_data_PM25[count]=(pkt->cmd.Data)[count];
//  558         }
//  559         HalUARTWrite(0, "PM2.5:", 6);
//  560         HalUARTWrite(0, send_data_PM25, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  561         HalUARTWrite(0, "ug/m3", 5);
//  562         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  563 
//  564         contin=0;
//  565       }
//  566 #endif
//  567 
//  568 #if defined (uint8_Printf_not) //ÉèÖÃÎª16½øÖÆÏÔÊ¾Êä³ö,È¡ÏûÊä³ö¾Í¼Ó¸ö_not
//  569       if(EDid==1&&contin1==0)
//  570       {
//  571       
//  572           i=0;
//  573           add[3] =0x01;
//  574           add[11]=0x01; //ÉèÖÃÎÂ¶ÈÎïÀíµØÖ·Îª01
//  575           convert_u16[0]   = 0x00;
//  576           convert_u16[1]   = (pkt->cmd.Data)[i++]; 
//  577           HalUARTWrite(0,add,12);
//  578           HalUARTWrite(0,convert_u16,6);   //ÎÂ¶È
//  579           HalUARTWrite(0,end,3);
//  580           add[3] =0x02;
//  581           add[11]=0x02; //ÉèÖÃÊª¶ÈÎïÀíµØÖ·Îª02         
//  582           convert_u16[0]   = 0x00;
//  583           convert_u16[1]   = (pkt->cmd.Data)[i++];   
//  584           HalUARTWrite(0,add,12);
//  585           HalUARTWrite(0,convert_u16,6);   //Êª¶È
//  586           HalUARTWrite(0,end,3);
//  587           i++;  //Ìø¹ýÎÂÊª¶È´«¸ÐÊý¾ÝµÄ±êÖ¾Î»
//  588       
//  589       #if (defined Channel_0_GasSensor_Busy)
//  590           //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
//  591           Channel0_VolSave =  (float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i]);  //²»³Ë1000£¬ÈÃÆäÖµÃ»ÓÐ¸¡µã£¬µ«ÊÇ¹ýºóÒª³ýÒÔ1000
//  592           sensor_value     =   Channel0_VolSave;
//  593           convert_u16[0]   =   sensor_value>>8;
//  594           convert_u16[1]   =   (sensor_value&0x00ff);
//  595           add[3] =0x03;
//  596           add[11]=0x03;   //ÉèÖÃÓÐ»úÈÜ¼ÁÎïÀíµØÖ·Îª03
//  597           HalUARTWrite(0,add,12);
//  598           HalUARTWrite(0,convert_u16,6); 
//  599           HalUARTWrite(0,end,3);
//  600       #endif
//  601         
//  602          //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
//  603         for(count=0;count<=6;count++)
//  604         {
//  605           send_data_CO[count]=(pkt->cmd.Data)[count+8];
//  606         }
//  607         for(count=0;count<=5;count++)
//  608         {
//  609           send_data_HCL[count]=(pkt->cmd.Data)[count+15];
//  610         }
//  611         for(count=0;count<=5;count++)
//  612         {
//  613           send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
//  614         }
//  615        
//  616         sensor_value = atof(send_data_CO)*10;  //½«¸¡µãÊý×ª»»³ÉÕûÊý
//  617         if(atof(send_data_CO)<0) sensor_value=0;
//  618         convert_u16[0]   =   sensor_value>>8;
//  619         convert_u16[1]   =   (sensor_value&0x00ff);
//  620         add[3] =0x04;
//  621         add[11]=0x04;   
//  622         HalUARTWrite(0,add,12);
//  623         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  624         HalUARTWrite(0,end,3);  
//  625 
//  626         sensor_value = atof(send_data_HCL)*10;
//  627         if(atof(send_data_HCL)<0) sensor_value=0;
//  628         convert_u16[0]   =   sensor_value>>8;
//  629         convert_u16[1]   =   (sensor_value&0x00ff);
//  630         add[3] =0x05;
//  631         add[11]=0x05;
//  632         HalUARTWrite(0,add,12);
//  633         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  634         HalUARTWrite(0,end,3);     
//  635 
//  636         sensor_value = atof(send_data_MQ3)*10;
//  637         if(atof(send_data_MQ3)<0) sensor_value=0;
//  638         convert_u16[0]   =   sensor_value>>8;
//  639         convert_u16[1]   =   (sensor_value&0x00ff);
//  640         add[3] =0x06;       
//  641         add[11]=0x06;
//  642         HalUARTWrite(0,add,12);
//  643         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  644         HalUARTWrite(0,end,3);
//  645      
//  646         contin1=1;
//  647       }
//  648       if(EDid==2&&contin1==1)
//  649       {  
//  650         /*¹¹½¨PM25Ö¡*/
//  651         for(count=0;count<6;count++)
//  652         {
//  653           send_data_PM25[count]=(pkt->cmd.Data)[count];
//  654         }
//  655         sensor_value = atof(send_data_PM25)*100;
//  656         if(atof(send_data_PM25)<0) sensor_value=0;
//  657         convert_u16[0]   =   sensor_value>>8;
//  658         convert_u16[1]   =   (sensor_value&0x00ff);
//  659         add[3] =0x07;
//  660         add[11]=0x07;
//  661         HalUARTWrite(0,add,12);
//  662         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  663         HalUARTWrite(0,end,3);
//  664         contin1=0;
//  665       }      
//  666 #endif
//  667       break;
//  668   }
//  669 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
//  670 
//  671 
//  672 /*********************************************************************
//  673  * @fn      SampleAPP_SendGasSensorMessage
//  674  *
//  675  * @brief   Send the flash message to group 1.
//  676  *
//  677  * @param   flashTime - in milliseconds
//  678  *
//  679  * @return  none
//  680  */
//  681 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  682 void SampleAPP_SendGasSensorMessage(void)
SampleAPP_SendGasSensorMessage:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SampleAPP_SendGasSensorMessage
        CODE
//  683 {
        FUNCALL SampleAPP_SendGasSensorMessage, dht11_value
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 37
        MOV     A,#-0x25
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  684   
//  685   uint8 Transmit_data[28];              //ÐèÒª·¢ËÍµÄÊý¾Ý    °ü=¹«¹²Êý¾Ý(ÎÂÊª¶ÈÊý¾ÝºÍ±êÖ¾Î»)+Í¨µÀ0Êý¾ÝºÍ±êÖ¾+Í¨µÀ1Êý¾ÝºÍ±êÖ¾£¬ºóÃæÁ½¸öÊý¾Ý¿ÉÑ¡
//  686   float val,val1,co_value,HCL_value,mq3_value;
//  687   //½Úµã1--ÎÂÊª¶ÈºÍ¾Æ¾«£¬Ò»Ñõ»¯Ì¼£¬ÂÈ»¯Çâ£¬
//  688   
//  689   char temp;                   //ÎÂ¶È
//  690   unsigned char humi;          //Êª¶È
//  691   uint8 PublicFlag=0;         //¸Ã±äÁ¿¼ÇÂ¼ÁËDHT11µÄ×´Ì¬£¨ÊÇ·ñ¶ÁÈ¡³É¹¦)£¬»¹¿ÉÒÔ¼ÇÂ¼ÆäËû×´Ì¬
//  692   Transmit_data[27]=1;//½Úµã1±ê¼Ç
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  693 #if (defined Channel_0_GasSensor_Busy)
//  694   float  ADC_Channel_0_Vol=0;             //ADCµçÑ¹
//  695   uint16 ADC_Channel_0_Vol_ForTx = 0;    //½«µçÑ¹Öµ³ËÉÏ1000£¬ÓÃÓÚ·¢ËÍ³öÈ¥
//  696   uint16 ADC_Channel_0_RegData;          //ADC¼Ä´æÆ÷Êý¾Ý
//  697   uint16 Channel_0_GasSenDataSave=0;     //±£´æÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
//  698 #endif
//  699 
//  700   uint8 i=0;                            //Ñ­»·ÒªÓÃµ½
//  701   uint8 TxPackLength=0;                 //¼ÇÂ¼°ü³¤¶È
//  702   PublicFlag =0;                        //Çå¿Õ±êÖ¾Î»
        MOV     R6,#0x0
//  703 
//  704   uint8 ADC_Result_ASCII[20];
//  705   //ADC²âÊÔ½á¹û£¬Ê¹ÓÃÄÚ²¿²Î¿¼µçÑ¹ÊÇ×î×¼È·µÄ2017 2 19
//  706   //×¢Òâ¶Å°îÏßµÄÑ¹½µÐèÒª²¹³¥£¬Êµ¼ÊµçÂ·ÖÐ£¬Îñ±Ø²âÊÔ´«¸ÐÆ÷Òý½Åµ½ADCÒý½ÅµÄÑ¹½µ£¬È»ºóÈí¼þ¼ÓÒÔ²¹³¥¡£2017 2 19
//  707   //ÎÂ¶È´«¸ÐÆ÷  DHT11
//  708   //DHT11¶ÁÈ¡Ê§°Ü£¬¿ÉÄÜDHT11Ëð»µ£¬¿ÉÄÜDHT11±»°Î³ö»òÕßÁ¬ÏßËÉ¶¯
//  709     if(dht11_value(&temp , &humi , DHT11_UINT8) != 0)
        ; Setup parameters for call to function dht11_value
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??dht11_value?relay
        MOV     A,R1
        JZ      ??SampleAPP_SendGasSensorMessage_0
//  710     {
//  711       temp = DHT11_TEMP_DEFAULT;  //ÉèÖÃÎÂÊª¶ÈÎªÄ¬ÈÏÖµ
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x19
        MOVX    @DPTR,A
//  712       humi = DHT11_HUMI_DEFAULT;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x41
        MOVX    @DPTR,A
//  713       PublicFlag |= (1<<0);     //ÖÃÎ»±êÖ¾Î»
        INC     R6
        SJMP    ??SampleAPP_SendGasSensorMessage_1
//  714     }
//  715     
//  716     if(temp != 0)
??SampleAPP_SendGasSensorMessage_0:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??SampleAPP_SendGasSensorMessage_2
//  717         
//  718       temp_f = temp;
??SampleAPP_SendGasSensorMessage_1:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#temp_f
        MOVX    @DPTR,A
//  719     
//  720     if(humi != 0)
??SampleAPP_SendGasSensorMessage_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??SampleAPP_SendGasSensorMessage_3
//  721         
//  722       humi_f = humi;
        MOV     DPTR,#humi_f
        MOVX    @DPTR,A
//  723     
//  724     Transmit_data[TxPackLength] = (uint8)temp_f , TxPackLength++;                     //×°ÈëÎÂ¶È,TxPackLength=0
??SampleAPP_SendGasSensorMessage_3:
        MOV     DPTR,#temp_f
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  725     Transmit_data[TxPackLength] = (uint8)humi_f , TxPackLength++;                     //×°ÈëÊª¶È
        MOV     DPTR,#humi_f
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  726     Transmit_data[TxPackLength] =  PublicFlag , TxPackLength++;                    //×°Èë¹«¹²±êÖ¾Î»
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  727 
//  728 //Èç¹ûÓÃµ½ÁËchanne0Ôò±àÒë£¬Ê¹ÓÃP0.0£¬½«Í¨µÀ0Êý¾ÝºÍ±êÖ¾Î»×°Èë·¢ËÍ°üÖÐ
//  729 #if (defined Channel_0_GasSensor_Busy)
//  730     //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
//  731     ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_2,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_1£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x2
        LCALL   ?Subroutine2 & 0xFFFF
//  732     for(i=0;i<10;i++)
//  733     {
//  734       ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_2,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_1,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  735       ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x2
        LCALL   ?Subroutine0 & 0xFFFF
//  736     }
??CrossCallReturnLabel_0:
        JNZ     ??CrossCallReturnLabel_7
//  737     ADC_Channel_0_Vol =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ
//  738     ADC_Channel_0_Vol-=0.79;   //È¥³ýÁãµãÆ¯ÒÆ
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4051eb85
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_bf4a3d71
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
//  739     ADC_Channel_0_Vol_ForTx = (ADC_Channel_0_Vol * 1000);
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     R6,?V0 + 4
//  740     if(ADC_Channel_0_Vol_ForTx<0) ADC_Channel_0_Vol_ForTx=0;
//  741     
//  742    // ADC_Channel_0_Vol_ForTx =3215;//ÓÃÓÚtext
//  743 
//  744     //Gas sensor»ñÈ¡Êý¾Ý,±£´æÆðÀ´
//  745     Channel_0_GasSenDataSave = (uint16)PointGetConcentrationForChannel_0(ADC_Channel_0_Vol,temp,humi);
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?CALL_IND
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  746 
//  747     //Transmit_data[TxPackLength] = HI_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
//  748     //Transmit_data[TxPackLength] = LO_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
//  749     Transmit_data[TxPackLength] = ADC_Channel_0_Vol_ForTx>>8 , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  750     Transmit_data[TxPackLength] = (ADC_Channel_0_Vol_ForTx&0x00ff) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  751     Transmit_data[TxPackLength] = HI_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶È¸ß°ËÎ»
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  752     Transmit_data[TxPackLength] = LO_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶ÈµÍ°ËÎ»
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  753     Transmit_data[TxPackLength] = *GasSensorFlagForChannel_0, TxPackLength++;                  //×°Èë±êÖ¾Î»
        MOV     DPTR,#GasSensorFlagForChannel_0
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_18:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  754 #endif
//  755     
//  756     //COÊý¾Ý²É¼¯ 
//  757     uint8 data[7];
//  758     char num;
//  759     ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_0£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ?Subroutine2 & 0xFFFF
//  760     for(i=0;i<10;i++)
//  761     {
//  762       ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_0,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  763       ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
??CrossCallReturnLabel_8:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ?Subroutine0 & 0xFFFF
//  764     }
??CrossCallReturnLabel_1:
        JNZ     ??CrossCallReturnLabel_8
//  765     co_value =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ*/
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4051eb85
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
//  766     //co_value -=1.292;//È¥³ýÁãµã
//  767     //co_value  =(210.0/221.0)*co_value*1000-1050/221;
//  768     if(co_value<0) co_value=0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??SampleAPP_SendGasSensorMessage_4
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//  769     memset(data,0,7);
??SampleAPP_SendGasSensorMessage_4:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 4,#0x7
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  770     sprintf(data,"%.1f",co_value);
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "%.1f">` & 0xff
        MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  771     for(num=0;num<=6;num++)//×°COµÄÊý¾Ý
        MOV     R2,#0x0
//  772     {
//  773       Transmit_data[num+8]=data[num];
??SampleAPP_SendGasSensorMessage_5:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  774     }
??CrossCallReturnLabel_11:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_16:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x7
        JC      ??SampleAPP_SendGasSensorMessage_5
//  775     
//  776     //HCLÊý¾Ý²É¼¯
//  777     //val1=ValreadP0_0();//¶ÁÈ¡HCLµÄµçÑ¹Öµ
//  778     //if(val1>3.6)//Êý¾ÝÅÅ²é
//  779     //    val1=0;
//  780     //HCL_value = (val1*1000-330)*20/1427;
//  781     //HCL_value=val;  //´Ë¾äÓÃÓÚ²âÊÔ£¬¼ÇµÃÉ¾³ý
//  782     ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_4£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ?Subroutine2 & 0xFFFF
//  783     for(i=0;i<10;i++)
//  784     {
//  785       ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  786       ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ?Subroutine0 & 0xFFFF
//  787     }
??CrossCallReturnLabel_2:
        JNZ     ??CrossCallReturnLabel_9
//  788     HCL_value =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ*/
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4051eb85
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
//  789    // HCL_value-=0.04;  //È¥³ýÁãµãÆ¯ÒÆ
//  790     //HCL_value=(1.0/30.0)*HCL_value*1000-8;
//  791     if(HCL_value<0) HCL_value=0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??SampleAPP_SendGasSensorMessage_6
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//  792     memset(data,0,7);//Çå³ýÊý×é
??SampleAPP_SendGasSensorMessage_6:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 4,#0x7
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  793     sprintf(data,"%.1f",HCL_value);//½«Êý¾Ý×ª»¯³É×Ö·û´®£¬²¢ÇÒ×°½øÊý×éÀïÃæ
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "%.1f">` & 0xff
        MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  794     
//  795     for(num=0;num<=5;num++)//×°HCLµÄÊý¾Ý
        MOV     R2,#0x0
//  796     {
//  797       Transmit_data[num+15]=data[num];
??SampleAPP_SendGasSensorMessage_7:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  798     }
??CrossCallReturnLabel_12:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_14:
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x6
        JC      ??SampleAPP_SendGasSensorMessage_7
//  799     
//  800     //¾Æ¾«mq3Êý¾Ý²É¼¯
//  801     ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_5,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_5£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x5
        LCALL   ?Subroutine2 & 0xFFFF
//  802     for(i=0;i<10;i++)
//  803     {
//  804       ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_5,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_5,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  805       ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x5
        LCALL   ?Subroutine0 & 0xFFFF
//  806     }
??CrossCallReturnLabel_3:
        JNZ     ??CrossCallReturnLabel_10
//  807     val =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192-0.4;         //¼ÆËãµÃµçÑ¹Öµ
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4051eb85
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_becccccd
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
//  808     
//  809     //mq3_value=val*(8.0/500.0)-1.6/500.0;
//  810     mq3_value=val;
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
//  811     
//  812     if(((uint16)PointGetConcentrationForChannel_0(val,temp,humi))!=0)
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?CALL_IND
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
        MOV     ?V0 + 9,R3
        MOV     A,R2
        ORL     A,?V0 + 9
        JZ      ??SampleAPP_SendGasSensorMessage_8
//  813         mq3_value = (uint16)PointGetConcentrationForChannel_0(val,temp,humi);
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?CALL_IND
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?UL_TO_FLT
//  814     
//  815     memset(data,0,7);//Çå³ýÊý×é
??SampleAPP_SendGasSensorMessage_8:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  816     sprintf(data,"%.1f",mq3_value);//½«Êý¾Ý×ª»¯³É×Ö·û´®£¬²¢ÇÒ×°½øÊý×éÀïÃæ
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "%.1f">` & 0xff
        MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  817     for(num=0;num<=5;num++)//×°MQ3µÄÊý¾Ý
        MOV     R2,#0x0
//  818     {
//  819       Transmit_data[num+21]=data[num];
??SampleAPP_SendGasSensorMessage_9:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  820     }
??CrossCallReturnLabel_13:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_15:
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x6
        JC      ??SampleAPP_SendGasSensorMessage_9
//  821     
//  822     //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
//  823     if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
//  824                      SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
//  825                      28,                   //Êý¾ÝÁ¿£¨³¤¶È£©
//  826                      Transmit_data,                  //Êý¾ÝÊ×µØÖ·
//  827                      &SampleApp_TransID,
//  828                      AF_DISCV_ROUTE,
//  829                      AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 60)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     ?V0 + 0,#0x1c
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 64)
        MOV     ?V0 + 0,#0x6
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  830     {
//  831     }
//  832 }
        MOV     A,#0x25
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+-1
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_17:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_11
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_12
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_13
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        MOV     ?V0 + 0,#0xa
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 58)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 58)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 58)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     DPTR,#PointGetConcentrationForChannel_0
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_19:
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_4
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 58)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_5
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 58)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_6
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 58)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 3
        CLR     C
        RRC     A
        MOV     R7,A
        MOV     A,R6
        RRC     A
        MOV     R6,A
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for PointGetConcentrationForChan`:
        DATA16
        DW ??TGS822GetConcentration?relay

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for GasSensorFlagForChannel_0>`:
        DATA16
        DW TGS822GasSen_Flag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleAPP_SendGasSensorMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleAPP_SendGasSensorMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hello World\\n">`:
        DB "Hello World\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%.1f">`:
        DB "%.1f"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4051eb85:
        DD 4051EB85H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_39000000:
        DD 39000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bf4a3d71:
        DD 0BF4A3D71H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_447a0000:
        DD 447A0000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_becccccd:
        DD 0BECCCCCDH

        END
//  833 
//  834 /*********************************************************************
//  835 *********************************************************************/
// 
// 1 481 bytes in segment BANKED_CODE
//    24 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//     4 bytes in segment XDATA_I
//     4 bytes in segment XDATA_ID
//    68 bytes in segment XDATA_ROM_C
//   101 bytes in segment XDATA_Z
// 
// 1 509 bytes of CODE  memory
//    44 bytes of CONST memory (+ 24 bytes shared)
//     0 bytes of DATA  memory (+  1 byte  shared)
//   105 bytes of XDATA memory
//
//Errors: none
//Warnings: 18
