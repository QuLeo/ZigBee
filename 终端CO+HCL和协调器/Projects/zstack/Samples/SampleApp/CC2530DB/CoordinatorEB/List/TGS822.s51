///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        16/Dec/2018  22:39:54 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\Source\ /
//                          TGS822.c                                          /
//    Command line       =  -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg         /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg        /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF00                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\77564\Desktop\¼à² /
//                          âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Sa /
//                          mples\SampleApp\Source\TGS822.c -D ZTOOL_P1 -D    /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          xLCD_SUPPORTED=DEBUG -D Channel_0_For_TGS822 -D   /
//                          Channel_1_For_TGS813 -D uint8_Printf -D           /
//                          ASCII_Printf -lC C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\ /
//                          ¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\CoordinatorEB\List\ -lA        /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\CoordinatorEB\List\ --diag_suppress             /
//                          Pe001,Pa010 -o C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä /
//                          ÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\CoordinatorEB\Obj\ -e            /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\ /
//                          ¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\C /
//                          C2530DB\..\Source\ -I C:\Users\77564\Desktop\¼à²â /
//                          ÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\  /
//                          -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\hal\include\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\hal\target\CC2530EB\  /
//                          -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\include\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\mac\high_level\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\mac\low_level\srf04\  /
//                          -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\low_level\srf0 /
//                          4\single_chip\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç /
//                          \¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mt\ /
//                           -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä /
//                          ×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\osal\include\ -I  /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\services\saddr\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\services\sdata\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\af\ -I          /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\nwk\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sapi\ -I        /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sec\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sys\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\zdo\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\ -I              /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\f8w\ -Ohz        /
//    List file          =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\CoordinatorEB\List\TGS822.s51                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME TGS822

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_DIV
        EXTERN ?FLT_EQ
        EXTERN ?FLT_GE
        EXTERN ?FLT_LT
        EXTERN ?FLT_MUL
        EXTERN ?FLT_SUB
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?R2345_FLT_TO_L
        EXTERN ?S_SHL
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??GetYFromTwoPoint?relay,0203H
        PUBLIC ??TGS822GetConcentration?relay
        FUNCTION ??TGS822GetConcentration?relay,0203H
        FUNCTION ??TGS822GetCookedRo?relay,0203H
        FUNCTION GetYFromTwoPoint,0203H
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 4, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC TGS822Fig1Data
        PUBLIC TGS822Fig2Data
        PUBLIC TGS822GasSen_Flag
        PUBLIC TGS822GasSen_R
        PUBLIC TGS822GasSen_T
        PUBLIC TGS822GetConcentration
        FUNCTION TGS822GetConcentration,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        FUNCTION TGS822GetCookedRo,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 66, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_3fd9999a
        PUBWEAK __Constant_bc23d70a
        PUBWEAK __Constant_bf800000
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
TGS822GetConcentration SYMBOL "TGS822GetConcentration"
??TGS822GetConcentration?relay SYMBOL "?relay", TGS822GetConcentration

// C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\TGS822.c
//    1 /**************************************
//    2 * Íø¿×·¨ Çø¼äÖ±Ïß·¨
//    3 * »ñÈ¡TGSÏµÁÐ´«¸ÐÆ÷µÄÊý¾Ý
//    4 **************************************/
//    5 #include "TGS822.h"
//    6 
//    7 #if (defined Channel_0_For_TGS822) || (defined Channel_1_For_TGS822)   //±ØÐëºê¶¨ÒåÁËTGS822µÄÍ¨µÀ²Å±àÒëÏÂÃæµÄ³ÌÐò
//    8 
//    9 //¼ÇÂ¼figure2ÖÐÎÂÊª¶ÈÊý¾Ý

        RSEG XDATA_I:XDATA:NOROOT(0)
//   10 int TGS822GasSen_T[]={-10,0,10,20,30,40};
TGS822GasSen_T:
        DATA8
        DS 12
        REQUIRE `?<Initializer for TGS822GasSen_T>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   11 char TGS822GasSen_R[]={35,50,65,100};
TGS822GasSen_R:
        DATA32
        DS 4
        REQUIRE `?<Initializer for TGS822GasSen_R>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   12 unsigned char TGS822GasSen_Flag=0;
TGS822GasSen_Flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   13 //Methane ¼×ÍéÔÚfigure1ÖÐµÄ½»µã×ø±ê

        RSEG XDATA_I:XDATA:NOROOT(0)
//   14 float TGS822Fig1Data[][2]=
TGS822Fig1Data:
        DATA8
        DS 216
        REQUIRE `?<Initializer for TGS822Fig1Data>`
        REQUIRE __INIT_XDATA_I
//   15 {
//   16 	{50,2.84f},
//   17 	{60,2.64f},
//   18 	{70,2.39f},
//   19 	{80,2.22f},
//   20 	{90,2.05f},
//   21 	{93,2.0f},
//   22 	{100,1.94f},
//   23 	{200,1.35f},
//   24 	{300,1.0f},
//   25 	{400,0.9f},
//   26 	{458,0.8f},
//   27 	{500,0.74f},
//   28 	{530,0.7f},
//   29 	{600,0.64f},
//   30 	{671,0.6f},
//   31 	{700,0.59f},
//   32 	{800,0.53f},
//   33 	{867,0.5f},
//   34 	{900,0.49f},
//   35 	{1000,0.46f},
//   36 	{1290,0.4f},
//   37 	{1896,0.3f},
//   38 	{2000,0.29f},
//   39 	{3000,0.22f},
//   40 	{3309,0.2f},
//   41 	{4000,0.18f},
//   42 	{5000,0.16f},
//   43 };
//   44 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   45 float TGS822Fig2Data[TGS822GasSen_R_Leghth][TGS822GasSen_T_Leghth][2]=
TGS822Fig2Data:
        DATA8
        DS 192
        REQUIRE `?<Initializer for TGS822Fig2Data>`
        REQUIRE __INIT_XDATA_I
//   46 {
//   47 	//35% RH
//   48 	{
//   49 		{-10,1.69f},{0,1.69f},{10,1.69f},{20,1.34f},{30,1.09f},{40,0.88f},
//   50 	},
//   51 	//50% RH
//   52 	{
//   53 		{-10,1.53f},{0,1.53f},{10,1.53f},{20,1.17f},{30,0.92f},{40,0.76f},
//   54 	},
//   55 
//   56 	//65% RH
//   57 	{
//   58 		{-10,1.81f},{0,1.81f},{10,1.38f},{20,1.01f},{30,0.83f},{40,0.68f},
//   59 	},
//   60 	//100% RH
//   61 	{
//   62 		{-10,2.28f},{0,1.59f},{10,1.1f},{20,0.87f},{30,0.72f},{40,0.61f},
//   63 	},
//   64 };
//   65 //²ÎÊý£ºRLµç×èÉÏµÄµçÑ¹Öµ DHT11ÎÂÊª¶È
//   66 //·µ»¹£ºÅ¨¶ÈÖµ£¬50-5000ppmÖ®¼ä
//   67 //×¢Òâ£ºTGS822Ö»ÄÜ²âÁ¿50-5000ppmÅ¨¶ÈµÄ¾Æ¾«
//   68 //	µ±Å¨¶È¸ßÓÚ5000ppmm,TGS822GasSen_FlagµÄÎ»0±»ÖÃ1;
//   69 //	µ±Å¨¶ÈµÍÓÚ50ppm,TGS822GasSen_FlagµÄÎ»1±»ÖÃ1;

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   70 int TGS822GetConcentration(float RL_Vol,char DHT11_T,unsigned char DHT11_R)
TGS822GetConcentration:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function TGS822GetConcentration
        CODE
//   71 {
        FUNCALL TGS822GetConcentration, TGS822GetCookedRo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
//   72 	float Rs=0;				
//   73 	float RsR0_Ratio1=0;							//RsÓëR0µÄ±ÈÂÊ1,±ÈÂÊ1ÓÃÓÚ×îÖÕ¼ÆËãÅ¨¶È½á¹û
//   74 	int concentration=0;							//×îºóµÄÅ¨¶ÈÖµ
//   75 	char i=0;                                                               //Ñ­»·ÓÃµ½
//   76 
//   77         TGS822GasSen_Flag = 0;                                                  //Çå¿Õ±êÖ¾Î»
        MOV     DPTR,#TGS822GasSen_Flag
        CLR     A
        MOVX    @DPTR,A
//   78 	
//   79 	RL_Vol += (float)TGS822GasSen_Wire_Compensation;			//²¹³¥ÏßÂ·µÄÑ¹½µ
//   80 	Rs = ((TGS822GasSen_Vc/RL_Vol)-1)*TGS822GasSen_RL;			//µÃ³öRsµÄÖµ
//   81 	RsR0_Ratio1 = Rs / TGS822GetCookedRo(DHT11_T,DHT11_R);		        //µÃµ½±ÈÂÊ1,±ÈÂÊ1ÊÇÍ¨¹ýRsÓë²¹³¥ºóµÄR0µÄ±ÈÖµ»ñµÃµÄ¡£
        MOV     ?V0 + 0,#-0xa
        MOV     ?V0 + 1,#0x28
        MOV     ?V0 + 2,#-0x64
        MOV     ?V0 + 3,#0x40
        MOV     DPTR,#__Constant_bc23d70a
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_ADD
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_bf800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        ; Setup parameters for call to function TGS822GetCookedRo
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??TGS822GetCookedRo?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
//   82 
//   83 //	printf("Rs:%f\n",Rs);							//Êä³öRs
//   84 //	printf("Ratio:%f\n",RsR0_Ratio1);					//Êä³ö±ÈÂÊ
//   85 //	RsR0_Ratio1 = 0.18;						        //Èí¼þÉè¶¨±ÈÂÊ£¬ÎªÁË²âÊÔ
//   86 
//   87 	//ÅÐ¶Ï±ÈÂÊ£¬ÒªÇó±ÈÂÊ¶ÔÓ¦µÄÅ¨¶ÈÖµÔÚ´«¸ÐÆ÷²âÁ¿µÄ·¶Î§Àï£¬Èô²»ÔÚ£¬ÖÃÎ»±êÖ¾Î»
//   88 	if(RsR0_Ratio1 > TGS822Fig1Data[0][1])
        MOV     DPTR,#TGS822Fig1Data + 4
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JNC     ??TGS822GetConcentration_0
//   89 	{
//   90 		//Ä¿±êÆøÌåÔÚ0-500ppmÖ®¼ä£¬²»ÔÚ²âÊÔ·¶Î§·µ»¹0
//   91 		TGS822GasSen_Flag |= (1<<0);
        MOV     DPTR,#TGS822GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//   92 		return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??TGS822GetConcentration_1 & 0xFFFF
//   93 	}
//   94 	else if(RsR0_Ratio1 < TGS822Fig1Data[TGS822NumOfFig1Coor-1][1])
??TGS822GetConcentration_0:
        MOV     DPTR,#TGS822Fig1Data + 212
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??TGS822GetConcentration_2
//   95 	{
//   96 		//Ä¿±êÆøÌåÅ¨¶È´óÓÚ10000ppm£¬²»ÔÚ²âÊÔ·¶Î§£¬·µ»¹10000
//   97 		TGS822GasSen_Flag |= (1<<1);
        MOV     DPTR,#TGS822GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//   98 		return (int)TGS822Fig1Data[TGS822NumOfFig1Coor-1][0];
        MOV     DPTR,#TGS822Fig1Data + 208
        LCALL   ?XLOAD_R2345
        LCALL   ?R2345_FLT_TO_L
        LJMP    ??TGS822GetConcentration_3 & 0xFFFF
//   99 	}
//  100 	//Ñ­»·£¬ÅÐ¶Ï±ÈÂÊËùÔÚµÄÇø¼ä£¬µÃµ½µÄiÖµÎªÇø¼ä£¨ÒÔ×ø±êÊý×éÐÎÊ½£©ÏÂ±ê
//  101 	for(i=0;i<TGS822NumOfFig1Coor;i++)				
??TGS822GetConcentration_2:
        MOV     ?V0 + 6,#0x0
//  102 	{	
//  103 		if((RsR0_Ratio1 <= TGS822Fig1Data[i][1]) && (RsR0_Ratio1 >TGS822Fig1Data[i+1][1]))	
??TGS822GetConcentration_4:
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,#(TGS822Fig1Data + 4) & 0xff
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,#((TGS822Fig1Data + 4) >> 8) & 0xff
        ADDC    A,?V0 + 5
        MOV     DPH,A
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_GE
        JNC     ??TGS822GetConcentration_5
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,#(TGS822Fig1Data + 12) & 0xff
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,#((TGS822Fig1Data + 12) >> 8) & 0xff
        ADDC    A,?V0 + 5
        MOV     DPH,A
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JC      ??TGS822GetConcentration_6
//  104 		break;
//  105 	}
??TGS822GetConcentration_5:
        INC     ?V0 + 6
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,#0x1b
        JC      ??TGS822GetConcentration_4
//  106 	//»ñµÃ±ÈÂÊ¶ÔÓ¦µÄÅ¨¶ÈÖµ
//  107 	concentration = (int)GetXFromTwoPoint(TGS822Fig1Data[i][0],TGS822Fig1Data[i][1],TGS822Fig1Data[i+1][0],TGS822Fig1Data[i+1][1],RsR0_Ratio1);	
??TGS822GetConcentration_6:
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     A,#TGS822Fig1Data & 0xff
        ADD     A,?V0 + 6
        MOV     R0,A
        MOV     A,#(TGS822Fig1Data >> 8) & 0xff
        ADDC    A,?V0 + 7
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?XLOAD_R2345
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XLOAD_R2345
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_EQ
        JNZ     ??TGS822GetConcentration_7
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_EQ
        JNZ     ??TGS822GetConcentration_8
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        SJMP    ??TGS822GetConcentration_9
??TGS822GetConcentration_8:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        SJMP    ??TGS822GetConcentration_9
??TGS822GetConcentration_7:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,?V0 + 13
        MOV     ?V0 + 2,?V0 + 14
        MOV     ?V0 + 3,?V0 + 15
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_ADD
//  108 	return concentration;
??TGS822GetConcentration_9:
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
??TGS822GetConcentration_3:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
??TGS822GetConcentration_1:
        MOV     A,#0x9
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  109 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Valid
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  110 
//  111 
//  112 
//  113 //²ÎÊý£º´ÓDHT11»ñÈ¡µÄÎÂÊª¶ÈÊý¾Ý£¬·Ö±æÂÊÎª1£¬Èç¹ûÊ¹ÓÃ¸ü¼Ó¾«×¼µÄÎÂÊª¶È´«¸ÐÆ÷£¬ÐèÒª¸Ä±äÊäÈë²ÎÊýµÄÀàÐÍ
//  114 //·µ»¹£º²¹³¥ºóµÄR0Öµ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  115 float TGS822GetCookedRo(char DHT11_T,unsigned char DHT11_R)
TGS822GetCookedRo:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function TGS822GetCookedRo
        CODE
//  116 {
        FUNCALL TGS822GetCookedRo, GetYFromTwoPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TGS822GetCookedRo, GetYFromTwoPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TGS822GetCookedRo, GetYFromTwoPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 26
        MOV     A,#-0x1a
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  117 	char sub_T_Arr=0;
//  118 	char sub_R_Arr=0;		//¼ÇÂ¼ÎÂÊª¶ÈÊý¾ÝÔÚÎÂ¶È£¬Êª¶ÈÊý×éÖÐµÄÏÂ±ê£¨¼´ÔÚÊý×éÖÐµÄÎ»ÖÃ£©
//  119 	float RsR0_Ratio0=0;		//×îÖÕÐèÒªµÃµ½µÄ½á¹û
//  120 	float TwoCoordinate[][2]=	//ÓÃÓÚ¼ÇÂ¼ÇóÄ¿±êÊý¾ÝËùÔÚÖ±ÏßµÄÁ½¸öµãµÄ×ø±ê
//  121 	{
//  122 		{0,0},			//¿¿×óµÄµã
//  123 		{0,0},			//¿¿ÓÒµÄµã
//  124 	};
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {{(0.0F), (0.0F)}, {(0.0F), (0.0F)}` >> 8) & 0xff
        MOV     DPL,#`?<Constant {{(0.0F), (0.0F)}, {(0.0F), (0.0F)}` & 0xff
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  125         char TEMP_ARR[20];
//  126 
//  127 	if(DHT11_T > TGS822GasSen_T[TGS822GasSen_T_Leghth-1])	//²âµÃµÄÎÂ¶ÈÖµ¸ßÓÚ·¶Î§£¬ÖÃÎ»±êÖ¾Î»µÄÎ»2
        MOV     DPTR,#TGS822GasSen_T + 10
        MOV     ?V0 + 0,R7
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        JNC     ??TGS822GetCookedRo_0
//  128 	{
//  129           DHT11_T = TGS822GasSen_TEMP_MAX;  //ÉèÖÃÎÂÊª¶ÈÎªÄ¬ÈÏÖµ
        MOV     R7,#0x28
//  130 		TGS822GasSen_Flag |=(1<<2);
        MOV     DPTR,#TGS822GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.2
        SJMP    ??TGS822GetCookedRo_1
//  131 	}
//  132 	else if(DHT11_T < TGS822GasSen_T[0])			//²âµÃµÄÎÂ¶ÈÖµµÍÓÚ·¶Î§£¬ÖÃÎ»±êÖ¾Î»µÄÎ»3
??TGS822GetCookedRo_0:
        MOV     DPTR,#TGS822GasSen_T
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        CLR     C
        MOV     A,R7
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_12:
        JNC     ??TGS822GetCookedRo_2
//  133 	{
//  134           DHT11_T = (char)TGS822GasSen_TEMP_MIN;   //ÉèÖÃÎÂÊª¶ÈÎªÄ¬ÈÏÖµ
        MOV     R7,#-0xa
//  135 	  TGS822GasSen_Flag |=(1<<3);
        MOV     DPTR,#TGS822GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.3
??TGS822GetCookedRo_1:
        MOVX    @DPTR,A
//  136 	}
//  137 
//  138 	if(DHT11_R > TGS822GasSen_R[TGS822GasSen_R_Leghth-1])	//²âµÃµÄÊª¶ÈÖµ¸ßÓÚ·¶Î§£¬ÖÃÎ»±êÖ¾Î»µÄÎ»4
??TGS822GetCookedRo_2:
        MOV     DPTR,#TGS822GasSen_R + 3
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        JNC     ??TGS822GetCookedRo_3
//  139 	{
//  140            DHT11_R =  TGS822GasSen_HUMI_MAX;
        MOV     R6,#0x64
//  141 	   TGS822GasSen_Flag |=(1<<4);
        MOV     DPTR,#TGS822GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.4
        SJMP    ??TGS822GetCookedRo_4
//  142 	}
//  143 	else if(DHT11_R < TGS822GasSen_R[0])			//²âµÃµÄÊª¶ÈÖµ¸ßÓÚ·¶Î§,ÖÃÎ»±êÖ¾Î»µÄÎ»5
??TGS822GetCookedRo_3:
        MOV     DPTR,#TGS822GasSen_R
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     ??TGS822GetCookedRo_5
//  144 	{
//  145           DHT11_R =  TGS822GasSen_HUMI_MIN;
        MOV     R6,#0x23
//  146 	  TGS822GasSen_Flag |=(1<<5);
        MOV     DPTR,#TGS822GasSen_Flag
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
??TGS822GetCookedRo_4:
        MOVX    @DPTR,A
//  147 	}
//  148 
//  149 	//Ñ­»·£¬ÅÐ¶ÏÔÚÄÄ¸öÎÂ¶ÈµÄÇø¼ä£¬µÃµ½Êý×éµÄÏÂ±ê
//  150 	for(sub_T_Arr=0; sub_T_Arr<TGS822GasSen_T_Leghth; sub_T_Arr++)				
??TGS822GetCookedRo_5:
        MOV     ?V0 + 2,#0x0
//  151 	{	
//  152 		if((DHT11_T >= TGS822GasSen_T[sub_T_Arr]) && (DHT11_T <= TGS822GasSen_T[sub_T_Arr+1]))	
??TGS822GetCookedRo_6:
        MOV     ?V0 + 0,R7
        MOV     A,?V0 + 2
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#TGS822GasSen_T & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(TGS822GasSen_T >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?Subroutine3 & 0xFFFF
//  153 		break;
//  154 	}
??CrossCallReturnLabel_5:
        CLR     C
        MOV     A,?V0 + 0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_13:
        JC      ??TGS822GetCookedRo_7
        MOV     A,?V0 + 2
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(TGS822GasSen_T + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((TGS822GasSen_T + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        JNC     ??TGS822GetCookedRo_8
??TGS822GetCookedRo_7:
        INC     ?V0 + 2
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x6
        JC      ??TGS822GetCookedRo_6
//  155 	//Ñ­»·£¬ÅÐ¶ÏÔÚÄÄ¸öÊª¶ÈµÄÇø¼ä£¬µÃµ½Êý×éµÄÏÂ±ê
//  156 	for(sub_R_Arr=0; sub_R_Arr<TGS822GasSen_R_Leghth; sub_R_Arr++)				
??TGS822GetCookedRo_8:
        MOV     R0,#0x0
//  157 	{	
//  158 		if((DHT11_R >= TGS822GasSen_R[sub_R_Arr]) && (DHT11_R <= TGS822GasSen_R[sub_R_Arr+1]))	
??TGS822GetCookedRo_9:
        MOV     ?V0 + 0,R0
        MOV     A,#TGS822GasSen_R & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(TGS822GasSen_R >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        CLR     C
        SUBB    A,R1
        JC      ??TGS822GetCookedRo_10
        MOV     A,#(TGS822GasSen_R + 1) & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#((TGS822GasSen_R + 1) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        JNC     ??TGS822GetCookedRo_11
//  159 		break;
//  160 	}
??TGS822GetCookedRo_10:
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0x4
        JC      ??TGS822GetCookedRo_9
//  161 	
//  162 	//¼ÆËãÁ½µã×ø±ê
//  163 	TwoCoordinate[0][0] = TGS822Fig2Data[sub_R_Arr][sub_T_Arr][0];
??TGS822GetCookedRo_11:
        MOV     DPL,R0
        MOV     ?V0 + 0,DPL
        MOV     A,R0
        MOV     B,#0x30
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#TGS822Fig2Data & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(TGS822Fig2Data >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?XLOAD_R2345
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  164 	TwoCoordinate[1][0] = TGS822Fig2Data[sub_R_Arr][sub_T_Arr+1][0];
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XLOAD_R2345
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R2345
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  165 	TwoCoordinate[0][1] = GetYFromTwoPoint(TGS822GasSen_R[sub_R_Arr] , TGS822Fig2Data[sub_R_Arr][sub_T_Arr][1] , TGS822GasSen_R[sub_R_Arr+1] , TGS822Fig2Data[sub_R_Arr+1][sub_T_Arr][1],DHT11_R);
        MOV     A,#TGS822GasSen_R & 0xff
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,#(TGS822GasSen_R >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?UL_TO_FLT
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        CLR     A
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 8
        LCALL   ?UL_TO_FLT
        MOV     ?V0 + 12,R6
        CLR     A
        MOV     ?V0 + 13,A
        MOV     ?V0 + 14,A
        MOV     ?V0 + 15,A
        MOV     R0,#?V0 + 12
        LCALL   ?UL_TO_FLT
        ; Setup parameters for call to function GetYFromTwoPoint
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     A,R0
        ADD     A,#0x34
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   ??GetYFromTwoPoint?relay
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  166 	TwoCoordinate[1][1] = GetYFromTwoPoint(TGS822GasSen_R[sub_R_Arr] , TGS822Fig2Data[sub_R_Arr][sub_T_Arr+1][1] , TGS822GasSen_R[sub_R_Arr+1] , TGS822Fig2Data[sub_R_Arr+1][sub_T_Arr+1][1],DHT11_R);
        ; Setup parameters for call to function GetYFromTwoPoint
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     A,R0
        ADD     A,#0x3c
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0xc
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   ??GetYFromTwoPoint?relay
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  167 	
//  168 	//µÃµ½½á¹û£¬RsºÍR0µÄ±ÈÖµ
//  169 	RsR0_Ratio0 = GetYFromTwoPoint(TwoCoordinate[0][0],TwoCoordinate[0][1],TwoCoordinate[1][0],TwoCoordinate[1][1],DHT11_T);
//  170 
//  171 	return RsR0_Ratio0 * TGS822GasSen_Standard_R0;
        ; Setup parameters for call to function GetYFromTwoPoint
        MOV     ?V0 + 8,R7
        CLR     A
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 8
        LCALL   ?UL_TO_FLT
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R2345
        LCALL   ??GetYFromTwoPoint?relay
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#__Constant_3fd9999a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,#0x1a
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  172 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 54)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 62)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_15:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_2
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_3
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 62)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 50)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 50)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
//  173 
//  174 //¶ÔÓÚÒ»ÌõÍ¨¹ýÁ½µãÈ·¶¨µÄÖ±Ïß£¬¸ø¶¨Ò»¸öyÖµ£¬·µ»¹xÖµ
//  175 float GetXFromTwoPoint(float x1,float y1,float x2,float y2,float y)
//  176 {
//  177 	if(y1 == y2)			
//  178 	{
//  179 		if(x1 == x2)
//  180 		{
//  181 			return 0;		//Èç¹ûÊäÈëµÄÁ½µãÖØºÏÁË£¬Ôò·µ»Ø0
//  182 		}				
//  183 		return y1;			//Èç¹ûÁ½µãµÄy×ø±êÏàµÈ£¬Ôò·µ»¹y×ø±ê
//  184 	}
//  185 	
//  186 	else
//  187 		return ((x2-x1)*(y-y1))/(y2-y1) + x1;
//  188 }
//  189 //¶ÔÓÚÒ»ÌõÍ¨¹ýÁ½µãÈ·¶¨µÄÖ±Ïß£¬¸ø¶¨Ò»¸öxÖµ£¬·µ»¹yÖµ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  190 float GetYFromTwoPoint(float x1,float y1,float x2,float y2,float x)
GetYFromTwoPoint:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function GetYFromTwoPoint
        CODE
//  191 {
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
//  192 	if(x1 == x2)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_EQ
        JNZ     ??GetYFromTwoPoint_0
//  193 	{
//  194 		if(y1 == y2)
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_EQ
        JNZ     ??GetYFromTwoPoint_1
//  195 		{
//  196 			return 0;		//Èç¹ûÊäÈëµÄÁ½µãÖØºÏÁË£¬Ôò·µ»Ø0
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x0
        MOV     R5,#0x0
        SJMP    ??GetYFromTwoPoint_2
//  197 		}	
//  198 		return x1;			//Èç¹ûÁ½µãµÄx×ø±êÏàµÈ£¬Ôò·µ»¹x×ø±ê
??GetYFromTwoPoint_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R2345
        SJMP    ??GetYFromTwoPoint_2
//  199 	}
//  200 	else
//  201 		return ((y2-y1)*(x-x1))/(x2-x1) + y1;
??GetYFromTwoPoint_0:
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_SUB
        PUSH    ?V0 + 8
        CFI CFA_SP SP+-1
        PUSH    ?V0 + 9
        CFI CFA_SP SP+-2
        PUSH    ?V0 + 10
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 11
        CFI CFA_SP SP+-4
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_SUB
        POP     ?V0 + 11
        CFI CFA_SP SP+-3
        POP     ?V0 + 10
        CFI CFA_SP SP+-2
        POP     ?V0 + 9
        CFI CFA_SP SP+-1
        POP     ?V0 + 8
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_MUL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_ADD
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
??GetYFromTwoPoint_2:
        MOV     A,#0x4
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock26
//  202 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for TGS822GasSen_T>`:
        DATA16
        DW -10
        DW 0
        DW 10
        DW 20
        DW 30
        DW 40

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for TGS822GasSen_R>`:
        DATA8
        DB 35
        DB 50
        DB 65
        DB 100

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for TGS822Fig1Data>`:
        DATA32
        DD 42480000H
        DD 4035C28FH
        DD 42700000H
        DD 4028F5C3H
        DD 428C0000H
        DD 4018F5C3H
        DD 42A00000H
        DD 400E147BH
        DD 42B40000H
        DD 40033333H
        DD 42BA0000H
        DD 40000000H
        DD 42C80000H
        DD 3FF851ECH
        DD 43480000H
        DD 3FACCCCDH
        DD 43960000H
        DD 3F800000H
        DD 43C80000H
        DD 3F666666H
        DD 43E50000H
        DD 3F4CCCCDH
        DD 43FA0000H
        DD 3F3D70A4H
        DD 44048000H
        DD 3F333333H
        DD 44160000H
        DD 3F23D70AH
        DD 4427C000H
        DD 3F19999AH
        DD 442F0000H
        DD 3F170A3DH
        DD 44480000H
        DD 3F07AE14H
        DD 4458C000H
        DD 3F000000H
        DD 44610000H
        DD 3EFAE148H
        DD 447A0000H
        DD 3EEB851FH
        DD 44A14000H
        DD 3ECCCCCDH
        DD 44ED0000H
        DD 3E99999AH
        DD 44FA0000H
        DD 3E947AE1H
        DD 453B8000H
        DD 3E6147AEH
        DD 454ED000H
        DD 3E4CCCCDH
        DD 457A0000H
        DD 3E3851ECH
        DD 459C4000H
        DD 3E23D70AH

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for TGS822Fig2Data>`:
        DATA32
        DD 0C1200000H
        DD 3FD851ECH
        DD 0H
        DD 3FD851ECH
        DD 41200000H
        DD 3FD851ECH
        DD 41A00000H
        DD 3FAB851FH
        DD 41F00000H
        DD 3F8B851FH
        DD 42200000H
        DD 3F6147AEH
        DD 0C1200000H
        DD 3FC3D70AH
        DD 0H
        DD 3FC3D70AH
        DD 41200000H
        DD 3FC3D70AH
        DD 41A00000H
        DD 3F95C28FH
        DD 41F00000H
        DD 3F6B851FH
        DD 42200000H
        DD 3F428F5CH
        DD 0C1200000H
        DD 3FE7AE14H
        DD 0H
        DD 3FE7AE14H
        DD 41200000H
        DD 3FB0A3D7H
        DD 41A00000H
        DD 3F8147AEH
        DD 41F00000H
        DD 3F547AE1H
        DD 42200000H
        DD 3F2E147BH
        DD 0C1200000H
        DD 4011EB85H
        DD 0H
        DD 3FCB851FH
        DD 41200000H
        DD 3F8CCCCDH
        DD 41A00000H
        DD 3F5EB852H
        DD 41F00000H
        DD 3F3851ECH
        DD 42200000H
        DD 3F1C28F6H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TGS822GetConcentration?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TGS822GetConcentration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TGS822GetCookedRo?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    TGS822GetCookedRo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetYFromTwoPoint?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetYFromTwoPoint

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {{(0.0F), (0.0F)}, {(0.0F), (0.0F)}`:
        DATA32
        DD 0H
        DD 0H
        DD 0H
        DD 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bc23d70a:
        DD 0BC23D70AH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bf800000:
        DD 0BF800000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3fd9999a:
        DD 3FD9999AH

        END
//  203 /* For Test in VC++
//  204 void main()
//  205 {
//  206 	printf("Gas concertation:%dppm\r\n",TGS822GetConcentration(0.16129f,30,80));
//  207 }*/
//  208 #endif
// 
// 1 479 bytes in segment BANKED_CODE
//    18 bytes in segment BANK_RELAYS
//   424 bytes in segment XDATA_I
//   424 bytes in segment XDATA_ID
//    32 bytes in segment XDATA_ROM_C
//     1 byte  in segment XDATA_Z
// 
// 1 921 bytes of CODE  memory
//    16 bytes of CONST memory (+ 16 bytes shared)
//   425 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
