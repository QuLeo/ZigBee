///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        20/Dec/2018  14:42:32 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\Source\ /
//                          SampleApp.c                                       /
//    Command line       =  -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg         /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg        /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF00                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\77564\Desktop\¼à² /
//                          âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Sa /
//                          mples\SampleApp\Source\SampleApp.c -D ZTOOL_P1    /
//                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       /
//                          xLCD_SUPPORTED=DEBUG -D Channel_0_For_TGS822 -D   /
//                          Channel_1_For_TGS813 -D uint8_Printf -D           /
//                          ASCII_Printf -lC C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\ /
//                          ¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\CoordinatorEB\List\ -lA        /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\CoordinatorEB\List\ --diag_suppress             /
//                          Pe001,Pa010 -o C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸Ä /
//                          ÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\CoordinatorEB\Obj\ -e            /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\ /
//                          ¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\C /
//                          C2530DB\..\Source\ -I C:\Users\77564\Desktop\¼à²â /
//                          ÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\  /
//                          -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\hal\include\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\hal\target\CC2530EB\  /
//                          -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\include\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\mac\high_level\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\mac\low_level\srf04\  /
//                          -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä× /
//                          é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\low_level\srf0 /
//                          4\single_chip\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç /
//                          \¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mt\ /
//                           -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä /
//                          ×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\osal\include\ -I  /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\services\saddr\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\services\sdata\ -I    /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\af\ -I          /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\nwk\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sapi\ -I        /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sec\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sys\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\stack\zdo\ -I         /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\ -I              /
//                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\f8w\ -Ohz        /
//    List file          =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥ /
//                          +CO+HCL\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\CoordinatorEB\List\SampleApp.s51                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_DIV
        EXTERN ?FLT_GE
        EXTERN ?FLT_LT
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?L_TO_FLT
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SampleAPP_SendGasSensorMessage?relay
        FUNCTION ??SampleAPP_SendGasSensorMessage?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC GasSensorFlagForChannel_0
        PUBLIC PointGetConcentrationForChannel_0
        PUBLIC SampleAPP_SendGasSensorMessage
        FUNCTION SampleAPP_SendGasSensorMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 66, STACK
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 48, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_Point_To_Point_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBWEAK _A_P1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_39000000
        PUBWEAK __Constant_3e19999b
        PUBWEAK __Constant_3f4ccccd
        PUBWEAK __Constant_3f99999a
        PUBWEAK __Constant_3fe66666
        PUBWEAK __Constant_40133333
        PUBWEAK __Constant_4051eb85
        PUBWEAK __Constant_43160001
        PUBWEAK __Constant_447a0000
        PUBWEAK __Constant_becccccd
        PUBWEAK __Constant_bf4a3d71
        PUBLIC contin
        PUBLIC contin1
        PUBLIC flag
        PUBLIC flag1
        PUBLIC flag_aol
        PUBLIC flag_ch
        PUBLIC flag_co
        PUBLIC flag_hcl
        PUBLIC flag_ta
        PUBLIC flag_tgs
        PUBLIC humi_f
        PUBLIC `p`
        PUBLIC send_data_CO
        PUBLIC send_data_HCL
        PUBLIC send_data_MQ3
        PUBLIC send_data_PM25
        PUBLIC temp_f
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalAdcInit          SYMBOL "HalAdcInit"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_rand           SYMBOL "osal_rand"
sprintf             SYMBOL "sprintf"
strlen              SYMBOL "strlen"
atof                SYMBOL "atof"
dht11_value         SYMBOL "dht11_value"
HalAdcRead          SYMBOL "HalAdcRead"
memset              SYMBOL "memset"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalAdcInit?relay  SYMBOL "?relay", HalAdcInit
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
`?<Name TGS822GetConcentrati 26>` SYMBOL "TGS822GetConcentration"
??TGS822GetConcentration?relay SYMBOL "?relay", `?<Name TGS822GetConcentrati 26>`
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??atof?relay        SYMBOL "?relay", atof
??dht11_value?relay SYMBOL "?relay", dht11_value
??memset?relay      SYMBOL "?relay", memset
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
??strlen?relay      SYMBOL "?relay", strlen
SampleAPP_SendGasSensorMessage SYMBOL "SampleAPP_SendGasSensorMessage"
??SampleAPP_SendGasSensorMessage?relay SYMBOL "?relay", SampleAPP_SendGasSensorMessage
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcInit
        FUNCTION HalAdcInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN atof
        FUNCTION atof,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dht11_value
        FUNCTION dht11_value,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalAdcInit?relay
        FUNCTION ??HalAdcInit?relay,00H
        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??TGS822GetConcentration?relay
        FUNCTION ??TGS822GetConcentration?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??atof?relay
        FUNCTION ??atof?relay,00H
        EXTERN ??dht11_value?relay
        FUNCTION ??dht11_value?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN TGS822GasSen_Flag

// C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 
//   65 #include "SampleApp.h"
//   66 #include "SampleAppHw.h"
//   67 
//   68 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 #include "hal_led.h"
//   73 #include "hal_key.h"
//   74 #include "hal_adc.h"
//   75 //´Ë´¦ÓÃÓÚ´®¿Ú
//   76 #include  "MT_UART.h"
//   77 //ÎÂÊª¶È´«¸ÐÆ÷
//   78 #include "dht11.h"
//   79 //CÓïÑÔ±ê×¼¿â
//   80 #include <string.h>
//   81 #include <stdlib.h>
//   82 #include <stdio.h>
//   83 #include <math.h>
//   84 //GasSensor »ñÈ¡Êý¾ÝµÄÍ·ÎÄ¼þ
//   85 #include "MQ3.h"
//   86 #include "TGS822.h"
//   87 
//   88 //CO
//   89 #include <CO.h>
//   90 
//   91 /*********************************************************************
//   92  * MACROS
//   93  */
//   94 
//   95 
//   96 #define AMS1117_3_ADC_VOL     3.28   //ºê¶¨ÒåAMS1117 3.3 ADC²Î¿¼µçÑ¹£¬¸ÃÖµ¿ÉÄÜÔÚ3.2-3.4¸¡¶¯
//   97 //Èç¹û¶¨ÒåÁËchannel0»òÕßchannel1¸øÆøÌå´«¸ÐÆ÷£¬Ôò
//   98 #if (defined Channel_0_For_TGS813) || (defined Channel_0_For_TGS822)
//   99 #define Channel_0_GasSensor_Busy
//  100 #endif
//  101 #if (defined Channel_1_For_TGS813) || (defined Channel_1_For_TGS822)
//  102 #define Channel_1_GasSensor_Busy
//  103 #endif
//  104 //Èç¹û¶à¸öÆøÌå´«¸ÐÆ÷Í¬Ê±Õ¼ÓÃÍ¬Ò»¸öchannel£¬ÔòÌáÊ¾
//  105 #if (defined Channel_0_For_TGS813) && (defined Channel_0_For_TGS822)
//  106 #error "Channel0 is just for one gas sensor.Check the micro!"
//  107 #endif
//  108 #if (defined Channel_1_For_TGS813) && (defined Channel_1_For_TGS822)
//  109 #error "Channel1 is just for one gas sensor.Check the micro!"
//  110 
//  111 #endif
//  112 #if (!defined Channel_0_GasSensor_Busy) && (!defined Channel_1_GasSensor_Busy)
//  113 #warning "Do you want to use the Gas Sensor? if yes,please define it,if not please ignore this message."
//  114 #endif
//  115 
//  116 // ÉèÖÃ²»Í¬´«¸ÐÆ÷µçÑ¹ãÐÖµ
//  117 // TGS813
//  118 #define TGS813_Safe 0.8
//  119 #define TGS813_Mildly 1.2
//  120 #define TGS813_Moderate 1.8
//  121 #define TGS813_Severe 2.3
//  122 // TGS822
//  123 #define TGS822_Safe 0.8
//  124 #define TGS822_Mildly 1.2
//  125 #define TGS822_Moderate 1.8
//  126 #define TGS822_Severe 2.3
//  127 
//  128 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  129 char contin=0;
contin:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  130 char contin1=0;
contin1:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  131 extern uint8 PM_data[6];
//  132 extern unsigned short pm_data;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 uint8 send_data_PM25[8];
send_data_PM25:
        DS 8
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134 uint8 send_data_CO[7];
send_data_CO:
        DS 7
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 uint8 send_data_HCL[6];
send_data_HCL:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 uint8 send_data_MQ3[6];
send_data_MQ3:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 uint8  temp_f;
temp_f:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 uint8  humi_f;
humi_f:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  139 char flag=0,flag1=0,flag_co=0,flag_hcl=0,flag_aol=0,flag_tgs=0,flag_ch=0,flag_ta=0;
flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag1:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag_co:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag_hcl:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag_aol:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag_tgs:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag_ch:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
flag_ta:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  140 float p=0;
`p`:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  141 
//  142 /*********************************************************************
//  143  * CONSTANTS
//  144  */
//  145 
//  146 /*********************************************************************
//  147  * TYPEDEFS
//  148  */
//  149 
//  150 /*********************************************************************
//  151  * GLOBAL VARIABLES
//  152  */
//  153 
//  154 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  155 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 0
//  156 {
//  157   SAMPLEAPP_PERIODIC_CLUSTERID,
//  158   SAMPLEAPP_FLASH_CLUSTERID
//  159 };
//  160 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  161 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 3
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 3
        DATA16
        DW SampleApp_ClusterList
//  162 {
//  163   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  164   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  165   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  166   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  167   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  168   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  169   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  170   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  171   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  172 };
//  173 
//  174 // This is the Endpoint/Interface description.  It is defined here, but
//  175 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  176 // in the structure here and make it a "const" (in code space).  The
//  177 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  179 
//  180 /*********************************************************************
//  181  * EXTERNAL VARIABLES
//  182  */
//  183 
//  184 /*********************************************************************
//  185  * EXTERNAL FUNCTIONS
//  186  */
//  187 
//  188 /*********************************************************************
//  189  * LOCAL VARIABLES
//  190  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  191 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  192                           // This variable will be received when
//  193                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  194 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  195 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  196 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  197 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  198 afAddrType_t SampleApp_Periodic_DstAddr;
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  199 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  200 afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  201 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  202 afAddrType_t SampleApp_Point_To_Point_DstAddr;
SampleApp_Point_To_Point_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  203 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  204 aps_Group_t SampleApp_Group;//·Ö×éÄÚÈÝ
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  205 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  206 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  207 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  208 
//  209 
//  210 //@huang
//  211 //ÉèÖÃchannel0ºÍchannel1»ñÈ¡ÆøÌåÅ¨¶ÈÖ¸ÏòµÄº¯Êý
//  212 #if (defined Channel_0_For_TGS822)

        RSEG XDATA_I:XDATA:NOROOT(0)
//  213 int (*PointGetConcentrationForChannel_0)(float ,char ,unsigned char ) = TGS822GetConcentration;
PointGetConcentrationForChannel_0:
        DATA16
        DS 2
        REQUIRE `?<Initializer for PointGetConcentrationForChan`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  214 uint8 *GasSensorFlagForChannel_0 = &TGS822GasSen_Flag;
GasSensorFlagForChannel_0:
        DATA16
        DS 2
        REQUIRE `?<Initializer for GasSensorFlagForChannel_0>`
        REQUIRE __INIT_XDATA_I
//  215 #elif (defined Channel_1_For_TGS822)
//  216 int (*PointGetConcentrationForChannel_1)(float ,char ,unsigned char ) = TGS822GetConcentration;
//  217 uint8 *GasSensorFlagForChannel_1 = &TGS822GasSen_Flag;
//  218 #endif
//  219 
//  220 
//  221 /*********************************************************************
//  222  * LOCAL FUNCTIONS
//  223  */
//  224 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  225 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  226 void SampleApp_SendPeriodicMessage( void );//¹ã²¥×éÍø
//  227 void SampleApp_SendFlashMessage( uint16 flashTime );//×é²¥×éÍø
//  228 void SampleApp_SendPointMessage( void );//µã²¥×éÍø
//  229 
//  230 //@huang
//  231 void SampleAPP_SendGasSensorMessage(void);//×Ô¼º¶¨ÒåµÄÊý¾Ý·¢ËÍº¯Êý
//  232 void GetChannel1ADC(void);
//  233 void GetChannel2ADC(void);
//  234 /*********************************************************************
//  235  * NETWORK LAYER CALLBACKS
//  236  */
//  237 
//  238 /*********************************************************************
//  239  * PUBLIC FUNCTIONS
//  240  */
//  241 
//  242 /*********************************************************************
//  243  * @fn      SampleApp_Init
//  244  *
//  245  * @brief   Initialization function for the Generic App Task.
//  246  *          This is called during initialization and should contain
//  247  *          any application specific initialization (ie. hardware
//  248  *          initialization/setup, table initialization, power up
//  249  *          notificaiton ... ).
//  250  *
//  251  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  252  *                    used to send messages and set timers.
//  253  *
//  254  * @return  none
//  255  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  256 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  257 {
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalAdcInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  258   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  259   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  260   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  261 
//  262   MT_UartInit();                //´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  263   MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  264   HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
        MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  265   HalAdcInit();                 //ADC²Î¿¼µçÑ¹³õÊ¼»¯£¨Ä¬ÈÏÎªÄÚ²¿²Î¿¼µçÑ¹£©
        ; Setup parameters for call to function HalAdcInit
        LCALL   ??HalAdcInit?relay
//  266   // Device hardware initialization can be added here or in main() (Zmain.c).
//  267   // If the hardware is application specific - add it here.
//  268   // If the hardware is other parts of the device add it in main().
//  269 
//  270  #if defined ( BUILD_ALL_DEVICES )
//  271   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  272   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  273   // together - if they are - we will start up a coordinator. Otherwise,
//  274   // the device will start as a router.
//  275   if ( readCoordinatorJumper() )
//  276     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  277   else
//  278     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  279 #endif // BUILD_ALL_DEVICES
//  280 
//  281 #if defined ( HOLD_AUTO_START )
//  282   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  283   //  from starting the device and wait for the application to
//  284   //  start the device.
//  285   ZDOInitDevice(0);
//  286 #endif
//  287 
//  288   // Setup for the periodic message's destination address
//  289   // Broadcast to everyone
//  290   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  291   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  292   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  293 
//  294   // Setup for the flash command's destination address - Group 1 //×é²¥ÉèÖÃ
//  295   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  296   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  297   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×é²¥ºÅ
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  298   //µã²¥½á¹¹ÌåµÄ³õÊ¼»¯
//  299    // Setup for the point command's destination address
//  300   SampleApp_Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥
        MOV     DPTR,#SampleApp_Point_To_Point_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  301   SampleApp_Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  302   SampleApp_Point_To_Point_DstAddr.addr.shortAddr = 0x0000;           //0x0000 Ä¬ÈÏÊÇÐ­µ÷Æ÷µÄµØÖ·
        MOV     DPTR,#SampleApp_Point_To_Point_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  303   // Fill out the endpoint description.
//  304   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  305   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  306   SampleApp_epDesc.simpleDesc
//  307             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  308   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  309 
//  310   // Register the endpoint description with the AF
//  311   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  312 
//  313   // Register for all key events - This app will handle all key events
//  314   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  315 
//  316   // By default, all devices start out in Group 1
//  317   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  318   osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  319   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  320 
//  321 #if defined ( LCD_SUPPORTED )
//  322   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
//  323 #endif
//  324 
//  325   //Èç¹ûÃ»ÓÐÊ¹ÓÃPA£¬ÔòÁÁµÆ£¨»òÕßÆäËû£©£¬Èç¹ûÊ¹ÓÃÁËPA£¬Ôò...
//  326 #if defined (HAL_PA_LNA)
//  327   HAL_TURN_ON_LED2();
        CLR     0x90.1
//  328 #endif
//  329 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE _A_P1
//  330 
//  331 /*********************************************************************
//  332  * @fn      SampleApp_ProcessEvent
//  333  *
//  334  * @brief   Generic Application Task event processor.  This function
//  335  *          is called to process all events for the task.  Events
//  336  *          include timers, messages and any other user defined events.
//  337  *
//  338  * @param   task_id  - The OSAL assigned task ID.
//  339  * @param   events - events to process.  This is a bit map and can
//  340  *                   contain more than one event.
//  341  *
//  342  * @return  none
//  343  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  344 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  345 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleAPP_SendGasSensorMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  346   afIncomingMSGPacket_t *MSGpkt;
//  347   (void)task_id;  // Intentionally unreferenced parameter
//  348 
//  349   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  350   {
//  351     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  352     while ( MSGpkt )
//  353     {
//  354       switch ( MSGpkt->hdr.event )
//  355       {
//  356         /* Received when a key is pressed
//  357         case KEY_CHANGE:
//  358           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  359           break;*/
//  360 
//  361         // Received when a messages is received (OTA) for this endpoint
//  362         case AF_INCOMING_MSG_CMD:
//  363           SampleApp_MessageMSGCB( MSGpkt );
//  364             //¹¤×÷Ö¸Ê¾µÆ
//  365            //HAL_TOGGLE_LED2();
//  366           break;
//  367 
//  368         // Received whenever the device changes state in the network
//  369         case ZDO_STATE_CHANGE:
//  370           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  371           if ( //(SampleApp_NwkState == DEV_ZB_COORD)||       //Ð­µ÷Æ÷²»ÔÊÐí¶Ô×Ô¼ºµã²¥£¬Ö»ÔÊÐíÂ·ÓÉÆ÷ºÍÖÕ¶Ë¶ÔÐ­µ÷Æ÷µã²¥
//  372               (SampleApp_NwkState == DEV_ROUTER)
//  373               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_4
//  374           {
//  375             // Start sending the periodic message in a regular interval.
//  376             osal_start_timerEx( SampleApp_TaskID,                    //¸Ãº¯Êý¶¨Ê±´¥·¢ÊÂ¼þ
//  377                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,        //²ÎÊýÒÀ´ÎÊÇ¡°ÈÎÎñID¡±
//  378                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );  //¡°×¢²áÊÂ¼þ¡±¡°Ñ­»·Ê±¼ä¡±
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  379           }
//  380           else
//  381           {
//  382             // Device is no longer in the network
//  383           }
//  384           break;
//  385 
//  386         default:
//  387           break;
//  388       }
//  389 
//  390       // Release the memory
//  391       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  392 
//  393       // Next - if one is available
//  394       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#0x49
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_4
//  395     }
//  396 
//  397     // return unprocessed events
//  398     return (events ^ SYS_EVENT_MSG);                        //·µ»ØÃ»ÓÐ´¦ÀíµÄÊÂ¼þ
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_7:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_8
//  399   }
//  400 
//  401   // Send a message out - This event is generated by a timer
//  402   //  (setup in SampleApp_Init()).
//  403   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_9
//  404   {
//  405     // Send the periodic message
//  406      SampleAPP_SendGasSensorMessage();      //·¢ËÍ´«¸ÐÆ÷Êý¾ÝµÄº¯Êý
        ; Setup parameters for call to function SampleAPP_SendGasSensorMessage
        LCALL   ??SampleAPP_SendGasSensorMessage?relay
//  407     // Setup to send message again in normal period (+ a little jitter)
//  408     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  409         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x18
        MOV     R4,A
        CLR     A
        ADDC    A,#0x3
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  410 
//  411     // return unprocessed events
//  412     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_7
//  413   }
//  414 
//  415   // Discard unknown events
//  416   return 0;
??SampleApp_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_8:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  417 }
//  418 
//  419 /*********************************************************************
//  420  * LOCAL FUNCTIONS
//  421  */
//  422 
//  423 /*********************************************************************
//  424  * @fn      SampleApp_MessageMSGCB
//  425  *
//  426  * @brief   Data message processor callback.  This function processes
//  427  *          any incoming data - probably from other devices.  So, based
//  428  *          on cluster ID, perform the intended action.
//  429  *
//  430  * @param   none
//  431  *
//  432  * @return  none
//  433  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  434 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  435 {
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, atof
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, atof
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, atof
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, atof
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  436   float Channel0_VolSave = 0.0f;
//  437   char  convert_arr[20];
//  438   uint8 convert_u16[20];
//  439   //ÓÉÓÚÓÐÁù¸ö×Ö½Ú´«ÊäÊý¾Ý£¬Ö»ÓÃµ½Á½¸ö£¬ËùÒÔºóÃæËÄ¸öÊý¾Ý×Ö½ÚÓÃ0xff±íÊ¾
//  440   convert_u16[2]   = 0xff;
//  441   convert_u16[3]   = 0xff;
//  442   convert_u16[4]   = 0xff;
//  443   convert_u16[5]   = 0xff;  
//  444   uint8 add[]={0xfe,0x10,0x69,0x01,0x83,0xf2,0x2e,0x01,0x00,0x4b,0x12,0x01};//³õÊ¼ÀàÎª01£¬µØÖ·01£¬Ö¡Í·
//  445   uint8 end[]={0x77,0x88,0x12};  //Ö¡Î²
//  446   uint8 i=0;
//  447   uint16   sensor_value=0;
//  448   char count;
//  449 
//  450   switch ( pkt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_MessageMSGCB_0:
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
//  451   {
//  452   
//  453   case SAMPLEAPP_GAS_SENSOR_CLUSTERID:
//  454       i=0;//ÓÃÓÚ¼ÇÂ¼Êý¾Ý°üµÄ¼ÆÊý×Ó
//  455       char EDid=0;
//  456       float p=0;
//  457       EDid=(pkt->cmd.Data)[27];
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_52:
        MOVX    A,@DPTR
        ADD     A,#0x1b
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
//  458 #if defined (ASCII_Printf) //ÉèÖÃÎª×Ö·ûÊä³ö,È¡ÏûÊä³ö¾Í¼Ó¸ö_not
//  459       if(EDid==1&&contin==0)
        MOV     A,#0x1
        XRL     A,R0
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_2 & 0xFFFF
        MOV     DPTR,#contin
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
//  460       //if(1)
//  461       {
//  462         /*ÏÔÊ¾ÊÕµ½µÄÊý¾ÝÁ¿
//  463           sprintf(convert_arr,"DataLength:%d\r\n",pkt->cmd.DataLength);
//  464           HalUARTWrite(0,convert_arr,strlen(convert_arr));*/
//  465       
//  466           //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
//  467           sprintf(convert_arr,"TEMP£º%d C\r\n",(pkt->cmd.Data)[i]),i++; //Òþ²ØTEMP
        MOV     A,R6
        ADD     A,#0x22
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function sprintf
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#`?<Constant "TEMP\\243\\272%d C\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "TEMP\\243\\272%d C\\r\\n">` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  468           HalUARTWrite(0,convert_arr,strlen(convert_arr));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine2 & 0xFFFF
//  469           sprintf(convert_arr,"HUMI£º%dRH\r\n",(pkt->cmd.Data)[i]),i++;//Òþ²ØHUMI
??CrossCallReturnLabel_5:
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#`?<Constant "HUMI\\243\\272%dRH\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "HUMI\\243\\272%dRH\\r\\n">` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  470           HalUARTWrite(0,convert_arr,strlen(convert_arr));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine2 & 0xFFFF
//  471       
//  472           //ÅÐ¶Ï±êÖ¾Î»£¬²¢¸ø³öÌáÊ¾ÐÅÏ¢
//  473           //DHT³ö´í
//  474           if((pkt->cmd.Data)[i++] & (1<<0))
??CrossCallReturnLabel_6:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_MessageMSGCB_3
//  475           {
//  476             HalUARTWrite(0,"DHT11 Error!\r\n",strlen("DHT11 Error!\r\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "DHT11 Error!\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "DHT11 Error!\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  477           }
//  478       
//  479       #if (defined Channel_0_GasSensor_Busy)
//  480           //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
//  481           Channel0_VolSave =  ((float)((pkt->cmd.Data)[i+1]+(pkt->cmd.Data)[i]*256))/1000;
??SampleApp_MessageMSGCB_3:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_DIV
//  482           sprintf(convert_arr,"vol0£º%.3fV\r\n",Channel0_VolSave),i+=2;
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#`?<Constant "vol0\\243\\272%.3fV\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "vol0\\243\\272%.3fV\\r\\n">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  483           HalUARTWrite(0,convert_arr,strlen(convert_arr));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        LCALL   ?Subroutine17 & 0xFFFF
//  484           if(Channel0_VolSave < TGS822_Safe)
??CrossCallReturnLabel_40:
        MOV     DPTR,#__Constant_3f4ccccd
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JNC     ??SampleApp_MessageMSGCB_4
//  485             sprintf(convert_arr,"Level: Ã»ÓÐÎÛÈ¾\r\n");
        ; Setup parameters for call to function sprintf
        MOV     R4,#`?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31` & 0xff
        MOV     R5,#(`?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31` >> 8) & 0xff
        SJMP    ??SampleApp_MessageMSGCB_5
//  486           else if(Channel0_VolSave < TGS822_Mildly)
??SampleApp_MessageMSGCB_4:
        MOV     DPTR,#__Constant_3f99999a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JNC     ??SampleApp_MessageMSGCB_6
//  487             sprintf(convert_arr,"Level: Çá¶ÈÎÛÈ¾\r\n");
        ; Setup parameters for call to function sprintf
        MOV     R4,#`?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31` & 0xff
        MOV     R5,#(`?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31` >> 8) & 0xff
        SJMP    ??SampleApp_MessageMSGCB_5
//  488           else if(Channel0_VolSave < TGS822_Moderate)
??SampleApp_MessageMSGCB_6:
        MOV     DPTR,#__Constant_3fe66666
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JNC     ??SampleApp_MessageMSGCB_7
//  489             sprintf(convert_arr,"Level: ÖÐ¶ÈÎÛÈ¾\r\n");
        ; Setup parameters for call to function sprintf
        MOV     R4,#`?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31` & 0xff
        MOV     R5,#(`?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31` >> 8) & 0xff
        SJMP    ??SampleApp_MessageMSGCB_5
//  490           else if(Channel0_VolSave < TGS822_Severe)
??SampleApp_MessageMSGCB_7:
        MOV     DPTR,#__Constant_40133333
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JNC     ??SampleApp_MessageMSGCB_8
//  491             sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
        ; Setup parameters for call to function sprintf
        MOV     R4,#`?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31` & 0xff
        MOV     R5,#(`?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31` >> 8) & 0xff
??SampleApp_MessageMSGCB_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
//  492       //      sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
//  493        //   HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  494           //    sprintf(convert_arr,"concen0£º%dppm\r\n",BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])),i+=2;
//  495       //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  496       //    sprintf(convert_arr,"Flag0:0x%x\r\n",(pkt->cmd.Data)[i]),i++;
//  497       //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  498       #endif
//  499         
//  500          //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
//  501         for(count=0;count<=6;count++)
??SampleApp_MessageMSGCB_8:
        MOV     R4,#0x0
//  502         {
//  503           send_data_CO[count]=(pkt->cmd.Data)[count+8];
??SampleApp_MessageMSGCB_9:
        MOV     DPL,R4
        MOV     R0,DPL
        LCALL   ?Subroutine6 & 0xFFFF
//  504         }
??CrossCallReturnLabel_13:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#send_data_CO & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(send_data_CO >> 8) & 0xff
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_53:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x7
        JC      ??SampleApp_MessageMSGCB_9
//  505         for(count=0;count<=5;count++)
        MOV     R4,#0x0
//  506         {
//  507           send_data_HCL[count]=(pkt->cmd.Data)[count+15];
??SampleApp_MessageMSGCB_10:
        LCALL   ?Subroutine7 & 0xFFFF
//  508         }
??CrossCallReturnLabel_15:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_60:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#send_data_HCL & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(send_data_HCL >> 8) & 0xff
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_54:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        JC      ??SampleApp_MessageMSGCB_10
//  509         for(count=0;count<=5;count++)
        MOV     R4,#0x0
//  510         {
//  511           send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
??SampleApp_MessageMSGCB_11:
        LCALL   ?Subroutine7 & 0xFFFF
//  512         }
??CrossCallReturnLabel_16:
        ADD     A,#0x15
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#send_data_MQ3 & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(send_data_MQ3 >> 8) & 0xff
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_55:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        JC      ??SampleApp_MessageMSGCB_11
//  513         HalUARTWrite(0, "CO:", 3);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "CO:">` & 0xff
        MOV     R3,#(`?<Constant "CO:">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  514         HalUARTWrite(0, send_data_CO, 7); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#send_data_CO & 0xff
        MOV     R3,#(send_data_CO >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  515         HalUARTWrite(0, "ppm", 3);
        MOV     ?V0 + 0,#`?<Constant "ppm">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "ppm">` >> 8) & 0xff
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ?Subroutine1 & 0xFFFF
//  516         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  517         
//  518         HalUARTWrite(0, "HCL:", 4);
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "HCL:">` & 0xff
        MOV     R3,#(`?<Constant "HCL:">` >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
//  519         HalUARTWrite(0, send_data_HCL, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
??CrossCallReturnLabel_49:
        MOV     R2,#send_data_HCL & 0xff
        MOV     R3,#(send_data_HCL >> 8) & 0xff
        LCALL   ?Subroutine0 & 0xFFFF
//  520         HalUARTWrite(0, "ppm", 3);
//  521         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  522         
//  523         HalUARTWrite(0, "AOL:", 4);
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AOL:">` & 0xff
        MOV     R3,#(`?<Constant "AOL:">` >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
//  524         HalUARTWrite(0, send_data_MQ3, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
??CrossCallReturnLabel_50:
        MOV     R2,#send_data_MQ3 & 0xff
        MOV     R3,#(send_data_MQ3 >> 8) & 0xff
        LCALL   ?Subroutine0 & 0xFFFF
//  525         HalUARTWrite(0, "ppm", 3);
//  526         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  527         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL   ?Subroutine1 & 0xFFFF
//  528         HalUARTWrite(0, "\r\n", 2);
//  529         
//  530     if((Channel0_VolSave>0.15)&&((atof(send_data_MQ3))>150)&&((Channel0_VolSave*1000)>atof(send_data_MQ3)))
??CrossCallReturnLabel_3:
        MOV     DPTR,#__Constant_3e19999b
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_GE
        JNC     ??SampleApp_MessageMSGCB_12
        ; Setup parameters for call to function atof
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_GE
        JNC     ??SampleApp_MessageMSGCB_13
        ; Setup parameters for call to function atof
        MOV     R2,#send_data_MQ3 & 0xff
        MOV     R3,#(send_data_MQ3 >> 8) & 0xff
        LCALL   ??atof?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     ?V0 + 10,R4
        MOV     ?V0 + 11,R5
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JNC     ??SampleApp_MessageMSGCB_13
//  531           flag_tgs++;
        MOV     DPTR,#flag_tgs
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
??SampleApp_MessageMSGCB_13:
        ; Setup parameters for call to function atof
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_GE
        JNC     ??SampleApp_MessageMSGCB_12
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        ; Setup parameters for call to function atof
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JNC     ??SampleApp_MessageMSGCB_12
//  532         
//  533     if((Channel0_VolSave>0.15)&&((atof(send_data_MQ3))>150)&&((Channel0_VolSave*1000)<atof(send_data_MQ3)))
//  534           flag_aol++;
        MOV     DPTR,#flag_aol
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  535     
//  536         
//  537     if(++flag==5)
??SampleApp_MessageMSGCB_12:
        MOV     DPTR,#flag
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        XRL     A,#0x5
        JNZ     ??SampleApp_MessageMSGCB_14
//  538         
//  539       {
//  540            
//  541            flag=0;      
        CLR     A
        MOVX    @DPTR,A
//  542            
//  543            if(flag_tgs>=3)
        MOV     DPTR,#flag_tgs
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        JC      ??SampleApp_MessageMSGCB_15
//  544               HalUARTWrite(0, "ÆûÓÍÐ¹Â©\r\n", 10);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\306\\373\\323\\315\\320\\271\\302\\251\\r` & 0xff
        MOV     R3,#(`?<Constant "\\306\\373\\323\\315\\320\\271\\302\\251\\r` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  545                   
//  546            if(flag_aol>=3)
??SampleApp_MessageMSGCB_15:
        MOV     DPTR,#flag_aol
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        JC      ??SampleApp_MessageMSGCB_16
//  547              HalUARTWrite(0, "¾Æ¾«Ð¹Â©\r\n", 10);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\276\\306\\276\\253\\320\\271\\302\\251\\r` & 0xff
        MOV     R3,#(`?<Constant "\\276\\306\\276\\253\\320\\271\\302\\251\\r` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  548            flag_tgs=0;flag_aol=0;       
??SampleApp_MessageMSGCB_16:
        MOV     DPTR,#flag_tgs
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#flag_aol
        MOVX    @DPTR,A
//  549        
//  550       }        
//  551         contin=1;
??SampleApp_MessageMSGCB_14:
        MOV     DPTR,#contin
        MOV     A,#0x1
        SJMP    ??SampleApp_MessageMSGCB_17
//  552                   //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
//  553 
//  554       }
//  555       if(EDid==2&&contin==1)
??SampleApp_MessageMSGCB_2:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??SampleApp_MessageMSGCB_1
        MOV     DPTR,#contin
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_MessageMSGCB_1
//  556       {
//  557         for(count=0;count<6;count++)
        MOV     R4,#0x0
//  558         {
//  559           send_data_PM25[count]=(pkt->cmd.Data)[count];
??SampleApp_MessageMSGCB_18:
        MOV     DPL,R4
        MOV     R0,DPL
        MOV     R1,#0x0
        LCALL   ?Subroutine6 & 0xFFFF
//  560         }
??CrossCallReturnLabel_14:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#send_data_PM25 & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(send_data_PM25 >> 8) & 0xff
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_56:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_9:
        JC      ??SampleApp_MessageMSGCB_18
//  561         HalUARTWrite(0, "PM2.5:", 6);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "PM2.5:">` & 0xff
        MOV     R3,#(`?<Constant "PM2.5:">` >> 8) & 0xff
        LCALL   ??Subroutine21_0 & 0xFFFF
//  562         HalUARTWrite(0, send_data_PM25, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
??CrossCallReturnLabel_51:
        MOV     R2,#send_data_PM25 & 0xff
        MOV     R3,#(send_data_PM25 >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  563         HalUARTWrite(0, "ug/m3", 5);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "ug/m3">` & 0xff
        MOV     R3,#(`?<Constant "ug/m3">` >> 8) & 0xff
        LCALL   ?Subroutine1 & 0xFFFF
//  564         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  565 
//  566         contin=0;
??CrossCallReturnLabel_4:
        MOV     DPTR,#contin
        CLR     A
??SampleApp_MessageMSGCB_17:
        MOVX    @DPTR,A
//  567       }
//  568 #endif
//  569 
//  570 #if defined (uint8_Printf_not) //ÉèÖÃÎª16½øÖÆÏÔÊ¾Êä³ö,È¡ÏûÊä³ö¾Í¼Ó¸ö_not
//  571       if(EDid==1&&contin1==0)
//  572       {
//  573       
//  574           i=0;
//  575           add[3] =0x01;
//  576           add[11]=0x01; //ÉèÖÃÎÂ¶ÈÎïÀíµØÖ·Îª01
//  577           convert_u16[0]   = 0x00;
//  578           convert_u16[1]   = (pkt->cmd.Data)[i++]; 
//  579           HalUARTWrite(0,add,12);
//  580           HalUARTWrite(0,convert_u16,6);   //ÎÂ¶È
//  581           HalUARTWrite(0,end,3);
//  582           add[3] =0x02;
//  583           add[11]=0x02; //ÉèÖÃÊª¶ÈÎïÀíµØÖ·Îª02         
//  584           convert_u16[0]   = 0x00;
//  585           convert_u16[1]   = (pkt->cmd.Data)[i++];   
//  586           HalUARTWrite(0,add,12);
//  587           HalUARTWrite(0,convert_u16,6);   //Êª¶È
//  588           HalUARTWrite(0,end,3);
//  589           i++;  //Ìø¹ýÎÂÊª¶È´«¸ÐÊý¾ÝµÄ±êÖ¾Î»
//  590       
//  591       #if (defined Channel_0_GasSensor_Busy)
//  592           //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
//  593           Channel0_VolSave =  (float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i]);  //²»³ýÒÔ1000£¬ÈÃÆäÖµÃ»ÓÐ¸¡µã£¬µ«ÊÇ¹ýºóÒª³ýÒÔ1000
//  594           sensor_value     =   Channel0_VolSave;
//  595           convert_u16[0]   =   sensor_value>>8;
//  596           convert_u16[1]   =   (sensor_value&0x00ff);
//  597           add[3] =0x03;
//  598           add[11]=0x03;   //ÉèÖÃÓÐ»úÈÜ¼ÁÎïÀíµØÖ·Îª03
//  599           HalUARTWrite(0,add,12);
//  600           HalUARTWrite(0,convert_u16,6); 
//  601           HalUARTWrite(0,end,3);
//  602       #endif
//  603         
//  604          //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
//  605         for(count=0;count<=6;count++)
//  606         {
//  607           send_data_CO[count]=(pkt->cmd.Data)[count+8];
//  608         }
//  609         for(count=0;count<=5;count++)
//  610         {
//  611           send_data_HCL[count]=(pkt->cmd.Data)[count+15];
//  612         }
//  613         for(count=0;count<=5;count++)
//  614         {
//  615           send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
//  616         }
//  617        
//  618         sensor_value = atof(send_data_CO)*10;  //½«¸¡µãÊý×ª»»³ÉÕûÊý
//  619         if(atof(send_data_CO)<0) sensor_value=0;
//  620         convert_u16[0]   =   sensor_value>>8;
//  621         convert_u16[1]   =   (sensor_value&0x00ff);
//  622         add[3] =0x04;
//  623         add[11]=0x04;   
//  624         HalUARTWrite(0,add,12);
//  625         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  626         HalUARTWrite(0,end,3);  
//  627 
//  628         sensor_value = atof(send_data_HCL)*10;
//  629         if(atof(send_data_HCL)<0) sensor_value=0;
//  630         convert_u16[0]   =   sensor_value>>8;
//  631         convert_u16[1]   =   (sensor_value&0x00ff);
//  632         add[3] =0x05;
//  633         add[11]=0x05;
//  634         HalUARTWrite(0,add,12);
//  635         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  636         HalUARTWrite(0,end,3);     
//  637 
//  638         sensor_value = atof(send_data_MQ3)*10;
//  639         if(atof(send_data_MQ3)<0) sensor_value=0;
//  640         convert_u16[0]   =   sensor_value>>8;
//  641         convert_u16[1]   =   (sensor_value&0x00ff);
//  642         add[3] =0x06;       
//  643         add[11]=0x06;
//  644         HalUARTWrite(0,add,12);
//  645         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  646         HalUARTWrite(0,end,3);
//  647      
//  648         /*ÅÐ¶ÏÏãÑÌ µçÀÂÈ¼ÉÕ*/
//  649         p=atof(send_data_HCL)/atof(send_data_CO);
//  650         if((p>0.1&&p<0.2)&&(atof(send_data_HCL))>1.0)
//  651             flag_co++;       
//  652         if(p>0.4&&p<3.0&&(atof(send_data_HCL))>1.0)
//  653             flag_hcl++;        
//  654         if(++flag==5)            
//  655           {               
//  656                flag=0;                    
//  657                if(flag_co>=3)                  
//  658                    flag_ch=1;
//  659                       
//  660                if(flag_hcl>=3)
//  661                    flag_ch=2;
//  662                flag_co=0;
//  663                flag_hcl=0;                  
//  664           }      
//  665         
//  666         /*ÅÐ¶Ï¾Æ¾«¡¢ÆûÓÍÐ¹Â©*/   
//  667          if((Channel0_VolSave>150)&&((atof(send_data_MQ3))>150)&&((Channel0_VolSave)>atof(send_data_MQ3)))
//  668             flag_tgs++;        
//  669          if((Channel0_VolSave>150)&&((atof(send_data_MQ3))>150)&&((Channel0_VolSave)<atof(send_data_MQ3)))
//  670             flag_aol++;              
//  671          if(++flag==5)        
//  672           {               
//  673                flag=0;              //±êÖ¾Î»ÇåÁã       
//  674                if(flag_tgs>=3)
//  675                   flag_ta=1;                      
//  676                if(flag_aol>=3)
//  677                   flag_ta=2;
//  678                flag_tgs=0;
//  679                flag_aol=0;                  
//  680           }  
//  681         
//  682         contin1=1;
//  683       }
//  684       if(EDid==2&&contin1==1)
//  685       {  
//  686         /*¹¹½¨PM25Ö¡*/
//  687         for(count=0;count<6;count++)
//  688         {
//  689           send_data_PM25[count]=(pkt->cmd.Data)[count];
//  690         }
//  691         sensor_value = atof(send_data_PM25)*100;
//  692         if(atof(send_data_PM25)<0) sensor_value=0;
//  693         convert_u16[0]   =   sensor_value>>8;
//  694         convert_u16[1]   =   (sensor_value&0x00ff);
//  695         add[3] =0x07;
//  696         add[11]=0x07;
//  697         HalUARTWrite(0,add,12);
//  698         HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  699         HalUARTWrite(0,end,3);
//  700         
//  701         if(flag_ch==0)
//  702         {
//  703              convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
//  704              convert_u16[1]   =   0x00;   //µÍ×Ö½Ú
//  705              add[3] =0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
//  706              add[11]=0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
//  707              HalUARTWrite(0,add,12);
//  708              HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  709              HalUARTWrite(0,end,3);
//  710         }
//  711         else if(flag_ch==1)
//  712         {
//  713              convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
//  714              convert_u16[1]   =   0x01;   //ÏãÑÌÖÃÒ»
//  715              add[3] =0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
//  716              add[11]=0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
//  717              HalUARTWrite(0,add,12);
//  718              HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  719              HalUARTWrite(0,end,3);
//  720              flag_ch=0;
//  721         }
//  722         else if(flag_ch==2)
//  723         {
//  724              convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
//  725              convert_u16[1]   =   0x02;   //µçÀÂÖÃ¶þ
//  726              add[3] =0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
//  727              add[11]=0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
//  728              HalUARTWrite(0,add,12);
//  729              HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  730              HalUARTWrite(0,end,3);
//  731              flag_ch=0;
//  732         }
//  733         
//  734         /*ÅÐ¶Ï¾Æ¾«¡¢ÆûÓÍÐ¹Â©*/
//  735         if(flag_ta==0)
//  736         {
//  737              convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
//  738              convert_u16[1]   =   0x00;   //µÍ×Ö½Ú
//  739              add[3] =0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
//  740              add[11]=0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
//  741              HalUARTWrite(0,add,12);
//  742              HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  743              HalUARTWrite(0,end,3);
//  744         }
//  745         else if(flag_ta==1)   //ÆûÓÍÐ¹Â©
//  746         {
//  747              convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
//  748              convert_u16[1]   =   0x01;   //ÆûÓÍÐ¹Â©ÖÃÒ»
//  749              add[3] =0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
//  750              add[11]=0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
//  751              HalUARTWrite(0,add,12);
//  752              HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  753              HalUARTWrite(0,end,3);
//  754              flag_ta=0;
//  755         }
//  756         else if(flag_ta==2)  //¾Æ¾«Ð¹Â©
//  757         {
//  758              convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
//  759              convert_u16[1]   =   0x02;   //¾Æ¾«Ð¹Â©ÖÃ¶þ
//  760              add[3] =0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
//  761              add[11]=0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
//  762              HalUARTWrite(0,add,12);
//  763              HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
//  764              HalUARTWrite(0,end,3);
//  765              flag_ta=0;
//  766         }
//  767         
//  768         contin1=0;
//  769       }      
//  770 #endif
//  771       break;
//  772   }
//  773 }
??SampleApp_MessageMSGCB_1:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     DPTR,#__Constant_43160001
        MOV     R0,#?V0 + 8
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_30
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_31
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     R2,#send_data_MQ3 & 0xff
        MOV     R3,#(send_data_MQ3 >> 8) & 0xff
        LCALL   ??atof?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     DPL,R4
        MOV     R2,DPL
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_48:
        ADD     A,R2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_47:
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R2
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_16
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_13
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_14
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOVX    @DPTR,A
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x6
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     R1,#0x0
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_41:
        ; Setup parameters for call to function sprintf
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_42:
        INC     DPTR
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_5
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_6
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_38:
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_39:
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_3
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_4
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_0
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_1
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51
//  774 
//  775 
//  776 /*********************************************************************
//  777  * @fn      SampleAPP_SendGasSensorMessage
//  778  *
//  779  * @brief   Send the flash message to group 1.
//  780  *
//  781  * @param   flashTime - in milliseconds
//  782  *
//  783  * @return  none
//  784  */
//  785 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  786 void SampleAPP_SendGasSensorMessage(void)
SampleAPP_SendGasSensorMessage:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI Function SampleAPP_SendGasSensorMessage
        CODE
//  787 {
        FUNCALL SampleAPP_SendGasSensorMessage, dht11_value
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 37
        MOV     A,#-0x25
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  788   
//  789   uint8 Transmit_data[28];              //ÐèÒª·¢ËÍµÄÊý¾Ý    °ü=¹«¹²Êý¾Ý(ÎÂÊª¶ÈÊý¾ÝºÍ±êÖ¾Î»)+Í¨µÀ0Êý¾ÝºÍ±êÖ¾+Í¨µÀ1Êý¾ÝºÍ±êÖ¾£¬ºóÃæÁ½¸öÊý¾Ý¿ÉÑ¡
//  790   float val,val1,co_value,HCL_value,mq3_value;
//  791   //½Úµã1--ÎÂÊª¶ÈºÍ¾Æ¾«£¬Ò»Ñõ»¯Ì¼£¬ÂÈ»¯Çâ£¬
//  792   
//  793   char temp;                   //ÎÂ¶È
//  794   unsigned char humi;          //Êª¶È
//  795   uint8 PublicFlag=0;         //¸Ã±äÁ¿¼ÇÂ¼ÁËDHT11µÄ×´Ì¬£¨ÊÇ·ñ¶ÁÈ¡³É¹¦)£¬»¹¿ÉÒÔ¼ÇÂ¼ÆäËû×´Ì¬
//  796   Transmit_data[27]=1;//½Úµã1±ê¼Ç
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  797 #if (defined Channel_0_GasSensor_Busy)
//  798   float  ADC_Channel_0_Vol=0;             //ADCµçÑ¹
//  799   uint16 ADC_Channel_0_Vol_ForTx = 0;    //½«µçÑ¹Öµ³ËÉÏ1000£¬ÓÃÓÚ·¢ËÍ³öÈ¥
//  800   uint16 ADC_Channel_0_RegData;          //ADC¼Ä´æÆ÷Êý¾Ý
//  801   uint16 Channel_0_GasSenDataSave=0;     //±£´æÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
//  802 #endif
//  803 
//  804   uint8 i=0;                            //Ñ­»·ÒªÓÃµ½
//  805   uint8 TxPackLength=0;                 //¼ÇÂ¼°ü³¤¶È
//  806   PublicFlag =0;                        //Çå¿Õ±êÖ¾Î»
        MOV     R6,#0x0
//  807 
//  808   uint8 ADC_Result_ASCII[20];
//  809   //ADC²âÊÔ½á¹û£¬Ê¹ÓÃÄÚ²¿²Î¿¼µçÑ¹ÊÇ×î×¼È·µÄ2017 2 19
//  810   //×¢Òâ¶Å°îÏßµÄÑ¹½µÐèÒª²¹³¥£¬Êµ¼ÊµçÂ·ÖÐ£¬Îñ±Ø²âÊÔ´«¸ÐÆ÷Òý½Åµ½ADCÒý½ÅµÄÑ¹½µ£¬È»ºóÈí¼þ¼ÓÒÔ²¹³¥¡£2017 2 19
//  811   //ÎÂ¶È´«¸ÐÆ÷  DHT11
//  812   //DHT11¶ÁÈ¡Ê§°Ü£¬¿ÉÄÜDHT11Ëð»µ£¬¿ÉÄÜDHT11±»°Î³ö»òÕßÁ¬ÏßËÉ¶¯
//  813     if(dht11_value(&temp , &humi , DHT11_UINT8) != 0)
        ; Setup parameters for call to function dht11_value
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??dht11_value?relay
        MOV     A,R1
        JZ      ??SampleAPP_SendGasSensorMessage_0
//  814     {
//  815       temp = DHT11_TEMP_DEFAULT;  //ÉèÖÃÎÂÊª¶ÈÎªÄ¬ÈÏÖµ
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x19
        MOVX    @DPTR,A
//  816       humi = DHT11_HUMI_DEFAULT;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x41
        MOVX    @DPTR,A
//  817       PublicFlag |= (1<<0);     //ÖÃÎ»±êÖ¾Î»
        INC     R6
        SJMP    ??SampleAPP_SendGasSensorMessage_1
//  818     }
//  819     
//  820     if(temp != 0)
??SampleAPP_SendGasSensorMessage_0:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??SampleAPP_SendGasSensorMessage_2
//  821         
//  822       temp_f = temp;
??SampleAPP_SendGasSensorMessage_1:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#temp_f
        MOVX    @DPTR,A
//  823     
//  824     if(humi != 0)
??SampleAPP_SendGasSensorMessage_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??SampleAPP_SendGasSensorMessage_3
//  825         
//  826       humi_f = humi;
        MOV     DPTR,#humi_f
        MOVX    @DPTR,A
//  827     
//  828     Transmit_data[TxPackLength] = (uint8)temp_f , TxPackLength++;                     //×°ÈëÎÂ¶È,TxPackLength=0
??SampleAPP_SendGasSensorMessage_3:
        MOV     DPTR,#temp_f
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  829     Transmit_data[TxPackLength] = (uint8)humi_f , TxPackLength++;                     //×°ÈëÊª¶È
        MOV     DPTR,#humi_f
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  830     Transmit_data[TxPackLength] =  PublicFlag , TxPackLength++;                    //×°Èë¹«¹²±êÖ¾Î»
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  831 
//  832 //Èç¹ûÓÃµ½ÁËchanne0Ôò±àÒë£¬Ê¹ÓÃP0.0£¬½«Í¨µÀ0Êý¾ÝºÍ±êÖ¾Î»×°Èë·¢ËÍ°üÖÐ
//  833 #if (defined Channel_0_GasSensor_Busy)
//  834     //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
//  835     ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_2,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_1£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x2
        LCALL   ?Subroutine10 & 0xFFFF
//  836     for(i=0;i<10;i++)
//  837     {
//  838       ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_2,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_1,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  839       ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
??CrossCallReturnLabel_23:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x2
        LCALL   ?Subroutine9 & 0xFFFF
//  840     }
??CrossCallReturnLabel_19:
        JNZ     ??CrossCallReturnLabel_23
//  841     ADC_Channel_0_Vol =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ
//  842     ADC_Channel_0_Vol-=0.79;   //È¥³ýÁãµãÆ¯ÒÆ
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4051eb85
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_bf4a3d71
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
//  843     ADC_Channel_0_Vol_ForTx = (ADC_Channel_0_Vol * 1000);
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     R6,?V0 + 4
//  844     if(ADC_Channel_0_Vol_ForTx<0) ADC_Channel_0_Vol_ForTx=0;
//  845     
//  846    // ADC_Channel_0_Vol_ForTx =3215;//ÓÃÓÚtext
//  847 
//  848     //Gas sensor»ñÈ¡Êý¾Ý,±£´æÆðÀ´
//  849     Channel_0_GasSenDataSave = (uint16)PointGetConcentrationForChannel_0(ADC_Channel_0_Vol,temp,humi);
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?CALL_IND
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  850 
//  851     //Transmit_data[TxPackLength] = HI_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
//  852     //Transmit_data[TxPackLength] = LO_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
//  853     Transmit_data[TxPackLength] = ADC_Channel_0_Vol_ForTx>>8 , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  854     Transmit_data[TxPackLength] = (ADC_Channel_0_Vol_ForTx&0x00ff) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  855     Transmit_data[TxPackLength] = HI_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶È¸ß°ËÎ»
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  856     Transmit_data[TxPackLength] = LO_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶ÈµÍ°ËÎ»
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  857     Transmit_data[TxPackLength] = *GasSensorFlagForChannel_0, TxPackLength++;                  //×°Èë±êÖ¾Î»
        MOV     DPTR,#GasSensorFlagForChannel_0
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_18:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  858 #endif
//  859     
//  860     //COÊý¾Ý²É¼¯ 
//  861     uint8 data[7];
//  862     char num;
//  863     ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_0£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ?Subroutine10 & 0xFFFF
//  864     for(i=0;i<10;i++)
//  865     {
//  866       ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_0,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  867       ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
??CrossCallReturnLabel_24:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ?Subroutine9 & 0xFFFF
//  868     }
??CrossCallReturnLabel_20:
        JNZ     ??CrossCallReturnLabel_24
//  869     co_value =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ*/
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4051eb85
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
//  870     //co_value -=1.292;//È¥³ýÁãµã
//  871     //co_value  =(210.0/221.0)*co_value*1000-1050/221;
//  872     if(co_value<0) co_value=0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??SampleAPP_SendGasSensorMessage_4
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//  873     memset(data,0,7);
??SampleAPP_SendGasSensorMessage_4:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 4,#0x7
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  874     sprintf(data,"%.1f",co_value);
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "%.1f">` & 0xff
        MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  875     for(num=0;num<=6;num++)//×°COµÄÊý¾Ý
        MOV     R2,#0x0
//  876     {
//  877       Transmit_data[num+8]=data[num];
??SampleAPP_SendGasSensorMessage_5:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  878     }
??CrossCallReturnLabel_27:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_57:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x7
        JC      ??SampleAPP_SendGasSensorMessage_5
//  879     
//  880     //HCLÊý¾Ý²É¼¯
//  881     //val1=ValreadP0_0();//¶ÁÈ¡HCLµÄµçÑ¹Öµ
//  882     //if(val1>3.6)//Êý¾ÝÅÅ²é
//  883     //    val1=0;
//  884     //HCL_value = (val1*1000-330)*20/1427;
//  885     //HCL_value=val;  //´Ë¾äÓÃÓÚ²âÊÔ£¬¼ÇµÃÉ¾³ý
//  886     ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_4£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ?Subroutine10 & 0xFFFF
//  887     for(i=0;i<10;i++)
//  888     {
//  889       ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  890       ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
??CrossCallReturnLabel_25:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ?Subroutine9 & 0xFFFF
//  891     }
??CrossCallReturnLabel_21:
        JNZ     ??CrossCallReturnLabel_25
//  892     HCL_value =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ*/
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4051eb85
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
//  893    // HCL_value-=0.04;  //È¥³ýÁãµãÆ¯ÒÆ
//  894     //HCL_value=(1.0/30.0)*HCL_value*1000-8;
//  895     if(HCL_value<0) HCL_value=0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_LT
        JNC     ??SampleAPP_SendGasSensorMessage_6
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//  896     memset(data,0,7);//Çå³ýÊý×é
??SampleAPP_SendGasSensorMessage_6:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 4,#0x7
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  897     sprintf(data,"%.1f",HCL_value);//½«Êý¾Ý×ª»¯³É×Ö·û´®£¬²¢ÇÒ×°½øÊý×éÀïÃæ
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "%.1f">` & 0xff
        MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  898     
//  899     for(num=0;num<=5;num++)//×°HCLµÄÊý¾Ý
        MOV     R2,#0x0
//  900     {
//  901       Transmit_data[num+15]=data[num];
??SampleAPP_SendGasSensorMessage_7:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  902     }
??CrossCallReturnLabel_28:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_61:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x6
        JC      ??SampleAPP_SendGasSensorMessage_7
//  903     
//  904     //¾Æ¾«mq3Êý¾Ý²É¼¯
//  905     ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_5,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_5£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x5
        LCALL   ?Subroutine10 & 0xFFFF
//  906     for(i=0;i<10;i++)
//  907     {
//  908       ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_5,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_5,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  909       ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
??CrossCallReturnLabel_26:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x5
        LCALL   ?Subroutine9 & 0xFFFF
//  910     }
??CrossCallReturnLabel_22:
        JNZ     ??CrossCallReturnLabel_26
//  911     val =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192-0.4;         //¼ÆËãµÃµçÑ¹Öµ
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4051eb85
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_becccccd
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
//  912     
//  913     //mq3_value=val*(8.0/500.0)-1.6/500.0;
//  914     mq3_value=val;
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
//  915     
//  916     if(((uint16)PointGetConcentrationForChannel_0(val,temp,humi))!=0)
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?CALL_IND
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
        MOV     ?V0 + 9,R3
        MOV     A,R2
        ORL     A,?V0 + 9
        JZ      ??SampleAPP_SendGasSensorMessage_8
//  917         mq3_value = (uint16)PointGetConcentrationForChannel_0(val,temp,humi);
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?CALL_IND
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?UL_TO_FLT
//  918     
//  919     memset(data,0,7);//Çå³ýÊý×é
??SampleAPP_SendGasSensorMessage_8:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 59)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  920     sprintf(data,"%.1f",mq3_value);//½«Êý¾Ý×ª»¯³É×Ö·û´®£¬²¢ÇÒ×°½øÊý×éÀïÃæ
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     R4,#`?<Constant "%.1f">` & 0xff
        MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  921     for(num=0;num<=5;num++)//×°MQ3µÄÊý¾Ý
        MOV     R2,#0x0
//  922     {
//  923       Transmit_data[num+21]=data[num];
??SampleAPP_SendGasSensorMessage_9:
        MOV     DPL,R2
        MOV     R0,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  924     }
??CrossCallReturnLabel_29:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_37:
        ADD     A,#0x15
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_59:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x6
        JC      ??SampleAPP_SendGasSensorMessage_9
//  925     
//  926     //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
//  927     if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
//  928                      SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
//  929                      28,                   //Êý¾ÝÁ¿£¨³¤¶È£©
//  930                      Transmit_data,                  //Êý¾ÝÊ×µØÖ·
//  931                      &SampleApp_TransID,
//  932                      AF_DISCV_ROUTE,
//  933                      AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 58)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 60)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 62)
        MOV     ?V0 + 0,#0x1c
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 64)
        MOV     ?V0 + 0,#0x6
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 66)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 57)
//  934     {
//  935     }
//  936 }
        MOV     A,#0x25
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+-1
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+-1
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        ADD     A,#0xf
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+-1
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+-1
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        MOV     DPL,A
        MOV     A,R1
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+-1
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+-1
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+-1
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+-1
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+-1
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+-1
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+-1
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker79 Using cfiCommon1
        CFI (cfiPicker79) NoFunction
        CFI (cfiPicker79) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond80 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        MOV     ?V0 + 0,#0xa
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond89 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 3
        CLR     C
        RRC     A
        MOV     R7,A
        MOV     A,R6
        RRC     A
        MOV     R6,A
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        RET
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond94 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiPicker96 Using cfiCommon1
        CFI (cfiPicker96) NoFunction
        CFI (cfiPicker96) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_44:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiPicker96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond97 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 58)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 58)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 58)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     DPTR,#PointGetConcentrationForChannel_0
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_43:
        RET
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_6
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_17
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_18
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 57)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_10
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 58)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_11
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 58)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_12
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 58)
        CFI Block cfiPicker108 Using cfiCommon1
        CFI (cfiPicker108) NoFunction
        CFI (cfiPicker108) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiPicker108

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for PointGetConcentrationForChan`:
        DATA16
        DW ??TGS822GetConcentration?relay

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for GasSensorFlagForChannel_0>`:
        DATA16
        DW TGS822GasSen_Flag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleAPP_SendGasSensorMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleAPP_SendGasSensorMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hello World\\n">`:
        DB "Hello World\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TEMP\\243\\272%d C\\r\\n">`:
        DB "TEMP\243\272%d C\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "HUMI\\243\\272%dRH\\r\\n">`:
        DB "HUMI\243\272%dRH\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DHT11 Error!\\r\\n">`:
        DB "DHT11 Error!\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "vol0\\243\\272%.3fV\\r\\n">`:
        DB "vol0\243\272%.3fV\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31`:
        DB "Level: \303\273\323\320\316\333\310\276\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31`:
        DB "Level: \307\341\266\310\316\333\310\276\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31`:
        DB "Level: \326\320\266\310\316\333\310\276\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31`:
        DB "Level: \326\330\266\310\316\333\310\276\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "CO:">`:
        DB "CO:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "ppm">`:
        DB "ppm"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "HCL:">`:
        DB "HCL:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AOL:">`:
        DB "AOL:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\306\\373\\323\\315\\320\\271\\302\\251\\r`:
        DB "\306\373\323\315\320\271\302\251\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\276\\306\\276\\253\\320\\271\\302\\251\\r`:
        DB "\276\306\276\253\320\271\302\251\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "PM2.5:">`:
        DB "PM2.5:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ug/m3">`:
        DB "ug/m3"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%.1f">`:
        DB "%.1f"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_447a0000:
        DD 447A0000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3f4ccccd:
        DD 3F4CCCCDH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3f99999a:
        DD 3F99999AH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3fe66666:
        DD 3FE66666H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40133333:
        DD 40133333H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e19999b:
        DD 3E19999BH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_43160001:
        DD 43160001H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4051eb85:
        DD 4051EB85H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_39000000:
        DD 39000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bf4a3d71:
        DD 0BF4A3D71H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_becccccd:
        DD 0BECCCCCDH

        END
//  937 
//  938 /*********************************************************************
//  939 *********************************************************************/
// 
// 2 505 bytes in segment BANKED_CODE
//    24 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//     4 bytes in segment XDATA_I
//     4 bytes in segment XDATA_ID
//   275 bytes in segment XDATA_ROM_C
//   108 bytes in segment XDATA_Z
// 
// 2 533 bytes of CODE  memory
//   227 bytes of CONST memory (+ 48 bytes shared)
//     0 bytes of DATA  memory (+  1 byte  shared)
//   112 bytes of XDATA memory
//
//Errors: none
//Warnings: 20
