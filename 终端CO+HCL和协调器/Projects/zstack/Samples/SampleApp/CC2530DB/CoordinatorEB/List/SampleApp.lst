###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         20/Dec/2018  14:42:32 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\Source\Sa #
#                          mpleApp.c                                          #
#    Command line       =  -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é #
#                          ²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg            #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é #
#                          ²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg           #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\77564\Desktop\¼à²â #
#                          ÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samp #
#                          les\SampleApp\Source\SampleApp.c -D ZTOOL_P1 -D    #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          xLCD_SUPPORTED=DEBUG -D Channel_0_For_TGS822 -D    #
#                          Channel_1_For_TGS813 -D uint8_Printf -D            #
#                          ASCII_Printf -lC C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ #
#                          ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\CoordinatorEB\List\ -lA           #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB\List\ --diag_suppress Pe001,Pa010    #
#                          -o C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é #
#                          ²¥+CO+HCL\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\CoordinatorEB\Obj\ -e --no_code_motion --debug  #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\77564\Desktop\¼à² #
#                          âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\ -I                        #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\Source\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕý #
#                          µÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\include\ -I          #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\target\CC2530EB\ -I  #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\include\ -I          #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\high_level\ -I       #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\ -I  #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ #
#                          ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\Components\mt\ -I       #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\osal\include\ -I         #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\saddr\ -I       #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\sdata\ -I       #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\af\ -I             #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\nwk\ -I            #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sapi\ -I           #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sec\ -I            #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sys\ -I            #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\zdo\ -I            #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\ -I                 #
#                          C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\f8w\ -Ohz           #
#    List file          =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB\List\SampleApp.lst                   #
#    Object file        =  C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+ #
#                          CO+HCL\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB\Obj\SampleApp.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "hal_adc.h"
     75          //´Ë´¦ÓÃÓÚ´®¿Ú
     76          #include  "MT_UART.h"
     77          //ÎÂÊª¶È´«¸ÐÆ÷
     78          #include "dht11.h"
     79          //CÓïÑÔ±ê×¼¿â
     80          #include <string.h>
     81          #include <stdlib.h>
     82          #include <stdio.h>
     83          #include <math.h>
     84          //GasSensor »ñÈ¡Êý¾ÝµÄÍ·ÎÄ¼þ
     85          #include "MQ3.h"
     86          #include "TGS822.h"
     87          
     88          //CO
     89          #include <CO.h>
     90          
     91          /*********************************************************************
     92           * MACROS
     93           */
     94          
     95          
     96          #define AMS1117_3_ADC_VOL     3.28   //ºê¶¨ÒåAMS1117 3.3 ADC²Î¿¼µçÑ¹£¬¸ÃÖµ¿ÉÄÜÔÚ3.2-3.4¸¡¶¯
     97          //Èç¹û¶¨ÒåÁËchannel0»òÕßchannel1¸øÆøÌå´«¸ÐÆ÷£¬Ôò
     98          #if (defined Channel_0_For_TGS813) || (defined Channel_0_For_TGS822)
     99          #define Channel_0_GasSensor_Busy
    100          #endif
    101          #if (defined Channel_1_For_TGS813) || (defined Channel_1_For_TGS822)
    102          #define Channel_1_GasSensor_Busy
    103          #endif
    104          //Èç¹û¶à¸öÆøÌå´«¸ÐÆ÷Í¬Ê±Õ¼ÓÃÍ¬Ò»¸öchannel£¬ÔòÌáÊ¾
    105          #if (defined Channel_0_For_TGS813) && (defined Channel_0_For_TGS822)
    106          #error "Channel0 is just for one gas sensor.Check the micro!"
    107          #endif
    108          #if (defined Channel_1_For_TGS813) && (defined Channel_1_For_TGS822)
    109          #error "Channel1 is just for one gas sensor.Check the micro!"
    110          
    111          #endif
    112          #if (!defined Channel_0_GasSensor_Busy) && (!defined Channel_1_GasSensor_Busy)
    113          #warning "Do you want to use the Gas Sensor? if yes,please define it,if not please ignore this message."
    114          #endif
    115          
    116          // ÉèÖÃ²»Í¬´«¸ÐÆ÷µçÑ¹ãÐÖµ
    117          // TGS813
    118          #define TGS813_Safe 0.8
    119          #define TGS813_Mildly 1.2
    120          #define TGS813_Moderate 1.8
    121          #define TGS813_Severe 2.3
    122          // TGS822
    123          #define TGS822_Safe 0.8
    124          #define TGS822_Mildly 1.2
    125          #define TGS822_Moderate 1.8
    126          #define TGS822_Severe 2.3
    127          
    128          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          char contin=0;
   \                     contin:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          char contin1=0;
   \                     contin1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    131          extern uint8 PM_data[6];
    132          extern unsigned short pm_data;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          uint8 send_data_PM25[8];
   \                     send_data_PM25:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 send_data_CO[7];
   \                     send_data_CO:
   \   000000                DS 7
   \   000007                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint8 send_data_HCL[6];
   \                     send_data_HCL:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 send_data_MQ3[6];
   \                     send_data_MQ3:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8  temp_f;
   \                     temp_f:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8  humi_f;
   \                     humi_f:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          char flag=0,flag1=0,flag_co=0,flag_hcl=0,flag_aol=0,flag_tgs=0,flag_ch=0,flag_ta=0;
   \                     flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     flag1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     flag_co:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     flag_hcl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     flag_aol:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     flag_tgs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     flag_ch:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     flag_ta:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          float p=0;
   \                     `p`:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    141          
    142          /*********************************************************************
    143           * CONSTANTS
    144           */
    145          
    146          /*********************************************************************
    147           * TYPEDEFS
    148           */
    149          
    150          /*********************************************************************
    151           * GLOBAL VARIABLES
    152           */
    153          
    154          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    155          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
    156          {
    157            SAMPLEAPP_PERIODIC_CLUSTERID,
    158            SAMPLEAPP_FLASH_CLUSTERID
    159          };
    160          

   \                                 In  segment XDATA_ROM_C, align 1
    161          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    162          {
    163            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    164            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    165            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    166            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    167            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    168            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    169            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    170            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    171            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    172          };
    173          
    174          // This is the Endpoint/Interface description.  It is defined here, but
    175          // filled-in in SampleApp_Init().  Another way to go would be to fill
    176          // in the structure here and make it a "const" (in code space).  The
    177          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    179          
    180          /*********************************************************************
    181           * EXTERNAL VARIABLES
    182           */
    183          
    184          /*********************************************************************
    185           * EXTERNAL FUNCTIONS
    186           */
    187          
    188          /*********************************************************************
    189           * LOCAL VARIABLES
    190           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    192                                    // This variable will be received when
    193                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    195          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    197          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    199          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    200          afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    201          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          afAddrType_t SampleApp_Point_To_Point_DstAddr;
   \                     SampleApp_Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    203          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          aps_Group_t SampleApp_Group;//·Ö×éÄÚÈÝ
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    205          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    208          
    209          
    210          //@huang
    211          //ÉèÖÃchannel0ºÍchannel1»ñÈ¡ÆøÌåÅ¨¶ÈÖ¸ÏòµÄº¯Êý
    212          #if (defined Channel_0_For_TGS822)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    213          int (*PointGetConcentrationForChannel_0)(float ,char ,unsigned char ) = TGS822GetConcentration;
   \                     PointGetConcentrationForChannel_0:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for PointGetConcentrationForChan`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    214          uint8 *GasSensorFlagForChannel_0 = &TGS822GasSen_Flag;
   \                     GasSensorFlagForChannel_0:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for GasSensorFlagForChannel_0>`
   \   000002                REQUIRE __INIT_XDATA_I
    215          #elif (defined Channel_1_For_TGS822)
    216          int (*PointGetConcentrationForChannel_1)(float ,char ,unsigned char ) = TGS822GetConcentration;
    217          uint8 *GasSensorFlagForChannel_1 = &TGS822GasSen_Flag;
    218          #endif
    219          
    220          
    221          /*********************************************************************
    222           * LOCAL FUNCTIONS
    223           */
    224          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    225          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    226          void SampleApp_SendPeriodicMessage( void );//¹ã²¥×éÍø
    227          void SampleApp_SendFlashMessage( uint16 flashTime );//×é²¥×éÍø
    228          void SampleApp_SendPointMessage( void );//µã²¥×éÍø
    229          
    230          //@huang
    231          void SampleAPP_SendGasSensorMessage(void);//×Ô¼º¶¨ÒåµÄÊý¾Ý·¢ËÍº¯Êý
    232          void GetChannel1ADC(void);
    233          void GetChannel2ADC(void);
    234          /*********************************************************************
    235           * NETWORK LAYER CALLBACKS
    236           */
    237          
    238          /*********************************************************************
    239           * PUBLIC FUNCTIONS
    240           */
    241          
    242          /*********************************************************************
    243           * @fn      SampleApp_Init
    244           *
    245           * @brief   Initialization function for the Generic App Task.
    246           *          This is called during initialization and should contain
    247           *          any application specific initialization (ie. hardware
    248           *          initialization/setup, table initialization, power up
    249           *          notificaiton ... ).
    250           *
    251           * @param   task_id - the ID assigned by OSAL.  This ID should be
    252           *                    used to send messages and set timers.
    253           *
    254           * @return  none
    255           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    257          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    258            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    259            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    260            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    261          
    262            MT_UartInit();                //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    263            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    264            HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0C         MOV     R4,#0xc
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay
    265            HalAdcInit();                 //ADC²Î¿¼µçÑ¹³õÊ¼»¯£¨Ä¬ÈÏÎªÄÚ²¿²Î¿¼µçÑ¹£©
   \   00002B                ; Setup parameters for call to function HalAdcInit
   \   00002B   12....       LCALL   ??HalAdcInit?relay
    266            // Device hardware initialization can be added here or in main() (Zmain.c).
    267            // If the hardware is application specific - add it here.
    268            // If the hardware is other parts of the device add it in main().
    269          
    270           #if defined ( BUILD_ALL_DEVICES )
    271            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    272            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    273            // together - if they are - we will start up a coordinator. Otherwise,
    274            // the device will start as a router.
    275            if ( readCoordinatorJumper() )
    276              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    277            else
    278              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    279          #endif // BUILD_ALL_DEVICES
    280          
    281          #if defined ( HOLD_AUTO_START )
    282            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    283            //  from starting the device and wait for the application to
    284            //  start the device.
    285            ZDOInitDevice(0);
    286          #endif
    287          
    288            // Setup for the periodic message's destination address
    289            // Broadcast to everyone
    290            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000031   740F         MOV     A,#0xf
   \   000033   F0           MOVX    @DPTR,A
    291            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000034   A3           INC     DPTR
   \   000035   7414         MOV     A,#0x14
   \   000037   F0           MOVX    @DPTR,A
    292            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000038   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003B   74FF         MOV     A,#-0x1
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
    293          
    294            // Setup for the flash command's destination address - Group 1 //×é²¥ÉèÖÃ
    295            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
    296            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000046   A3           INC     DPTR
   \   000047   7414         MOV     A,#0x14
   \   000049   F0           MOVX    @DPTR,A
    297            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×é²¥ºÅ
   \   00004A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004D   7401         MOV     A,#0x1
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    298            //µã²¥½á¹¹ÌåµÄ³õÊ¼»¯
    299             // Setup for the point command's destination address
    300            SampleApp_Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥
   \   000053   90....       MOV     DPTR,#SampleApp_Point_To_Point_DstAddr + 8
   \   000056   7402         MOV     A,#0x2
   \   000058   F0           MOVX    @DPTR,A
    301            SampleApp_Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000059   A3           INC     DPTR
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    302            SampleApp_Point_To_Point_DstAddr.addr.shortAddr = 0x0000;           //0x0000 Ä¬ÈÏÊÇÐ­µ÷Æ÷µÄµØÖ·
   \   00005D   90....       MOV     DPTR,#SampleApp_Point_To_Point_DstAddr
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   F0           MOVX    @DPTR,A
    303            // Fill out the endpoint description.
    304            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000064   90....       MOV     DPTR,#SampleApp_epDesc
   \   000067   7414         MOV     A,#0x14
   \   000069   F0           MOVX    @DPTR,A
    305            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00006A   A3           INC     DPTR
   \   00006B   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000071   F0           MOVX    @DPTR,A
    306            SampleApp_epDesc.simpleDesc
    307                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000072   A3           INC     DPTR
   \   000073   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000079   F0           MOVX    @DPTR,A
    308            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00007A   A3           INC     DPTR
   \   00007B   E4           CLR     A
   \   00007C   F0           MOVX    @DPTR,A
    309          
    310            // Register the endpoint description with the AF
    311            afRegister( &SampleApp_epDesc );
   \   00007D                ; Setup parameters for call to function afRegister
   \   00007D   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007F   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000081   12....       LCALL   ??afRegister?relay
    312          
    313            // Register for all key events - This app will handle all key events
    314            RegisterForKeys( SampleApp_TaskID );
   \   000084                ; Setup parameters for call to function RegisterForKeys
   \   000084   90....       MOV     DPTR,#SampleApp_TaskID
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F9           MOV     R1,A
   \   000089   12....       LCALL   ??RegisterForKeys?relay
    315          
    316            // By default, all devices start out in Group 1
    317            SampleApp_Group.ID = 0x0001;
   \   00008C   90....       MOV     DPTR,#SampleApp_Group
   \   00008F   7401         MOV     A,#0x1
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   E4           CLR     A
   \   000094   F0           MOVX    @DPTR,A
    318            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000095                ; Setup parameters for call to function osal_memcpy
   \   000095   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000098   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00009B   F5..         MOV     ?V0 + 2,A
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A2   7C07         MOV     R4,#0x7
   \   0000A4   7D00         MOV     R5,#0x0
   \   0000A6   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A8   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000AA   12....       LCALL   ??osal_memcpy?relay
   \   0000AD   7403         MOV     A,#0x3
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
    319            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000B2                ; Setup parameters for call to function aps_AddGroup
   \   0000B2   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B4   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B6   7914         MOV     R1,#0x14
   \   0000B8   12....       LCALL   ??aps_AddGroup?relay
    320          
    321          #if defined ( LCD_SUPPORTED )
    322            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    323          #endif
    324          
    325            //Èç¹ûÃ»ÓÐÊ¹ÓÃPA£¬ÔòÁÁµÆ£¨»òÕßÆäËû£©£¬Èç¹ûÊ¹ÓÃÁËPA£¬Ôò...
    326          #if defined (HAL_PA_LNA)
    327            HAL_TURN_ON_LED2();
   \   0000BB   C291         CLR     0x90.1
    328          #endif
    329          }
   \   0000BD   7F03         MOV     R7,#0x3
   \   0000BF   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000C2                REQUIRE _A_P1
    330          
    331          /*********************************************************************
    332           * @fn      SampleApp_ProcessEvent
    333           *
    334           * @brief   Generic Application Task event processor.  This function
    335           *          is called to process all events for the task.  Events
    336           *          include timers, messages and any other user defined events.
    337           *
    338           * @param   task_id  - The OSAL assigned task ID.
    339           * @param   events - events to process.  This is a bit map and can
    340           *                   contain more than one event.
    341           *
    342           * @return  none
    343           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    344          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    345          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    346            afIncomingMSGPacket_t *MSGpkt;
    347            (void)task_id;  // Intentionally unreferenced parameter
    348          
    349            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   605C         JZ      ??SampleApp_ProcessEvent_0
    350            {
    351              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    352              while ( MSGpkt )
    353              {
    354                switch ( MSGpkt->hdr.event )
    355                {
    356                  /* Received when a key is pressed
    357                  case KEY_CHANGE:
    358                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    359                    break;*/
    360          
    361                  // Received when a messages is received (OTA) for this endpoint
    362                  case AF_INCOMING_MSG_CMD:
    363                    SampleApp_MessageMSGCB( MSGpkt );
    364                      //¹¤×÷Ö¸Ê¾µÆ
    365                     //HAL_TOGGLE_LED2();
    366                    break;
    367          
    368                  // Received whenever the device changes state in the network
    369                  case ZDO_STATE_CHANGE:
    370                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    371                    if ( //(SampleApp_NwkState == DEV_ZB_COORD)||       //Ð­µ÷Æ÷²»ÔÊÐí¶Ô×Ô¼ºµã²¥£¬Ö»ÔÊÐíÂ·ÓÉÆ÷ºÍÖÕ¶Ë¶ÔÐ­µ÷Æ÷µã²¥
    372                        (SampleApp_NwkState == DEV_ROUTER)
    373                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    374                    {
    375                      // Start sending the periodic message in a regular interval.
    376                      osal_start_timerEx( SampleApp_TaskID,                    //¸Ãº¯Êý¶¨Ê±´¥·¢ÊÂ¼þ
    377                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,        //²ÎÊýÒÀ´ÎÊÇ¡°ÈÎÎñID¡±
    378                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );  //¡°×¢²áÊÂ¼þ¡±¡°Ñ­»·Ê±¼ä¡±
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    379                    }
    380                    else
    381                    {
    382                      // Device is no longer in the network
    383                    }
    384                    break;
    385          
    386                  default:
    387                    break;
    388                }
    389          
    390                // Release the memory
    391                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    392          
    393                // Next - if one is available
    394                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   601A         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000052   2449         ADD     A,#0x49
   \   000054   60B9         JZ      ??SampleApp_ProcessEvent_2
   \   000056   80D6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000058                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000058   AA..         MOV     R2,?V0 + 0
   \   00005A   AB..         MOV     R3,?V0 + 1
   \   00005C   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00005F   80CD         SJMP    ??SampleApp_ProcessEvent_4
    395              }
    396          
    397              // return unprocessed events
    398              return (events ^ SYS_EVENT_MSG);                        //·µ»ØÃ»ÓÐ´¦ÀíµÄÊÂ¼þ
   \                     ??SampleApp_ProcessEvent_5:
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   000066   FB           MOV     R3,A
   \   000067   802A         SJMP    ??SampleApp_ProcessEvent_8
    399            }
    400          
    401            // Send a message out - This event is generated by a timer
    402            //  (setup in SampleApp_Init()).
    403            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000069   EE           MOV     A,R6
   \   00006A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006C   5021         JNC     ??SampleApp_ProcessEvent_9
    404            {
    405              // Send the periodic message
    406               SampleAPP_SendGasSensorMessage();      //·¢ËÍ´«¸ÐÆ÷Êý¾ÝµÄº¯Êý
   \   00006E                ; Setup parameters for call to function SampleAPP_SendGasSensorMessage
   \   00006E   12....       LCALL   ??SampleAPP_SendGasSensorMessage?relay
    407              // Setup to send message again in normal period (+ a little jitter)
    408              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    409                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000071                ; Setup parameters for call to function osal_rand
   \   000071   12....       LCALL   ??osal_rand?relay
   \   000074                ; Setup parameters for call to function osal_start_timerEx
   \   000074   EA           MOV     A,R2
   \   000075   24E8         ADD     A,#-0x18
   \   000077   FC           MOV     R4,A
   \   000078   E4           CLR     A
   \   000079   3403         ADDC    A,#0x3
   \   00007B   FD           MOV     R5,A
   \   00007C   7A01         MOV     R2,#0x1
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   90....       MOV     DPTR,#SampleApp_TaskID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??osal_start_timerEx?relay
    410          
    411              // return unprocessed events
    412              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000088   EE           MOV     A,R6
   \   000089   6401         XRL     A,#0x1
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   80D7         SJMP    ??SampleApp_ProcessEvent_7
    413            }
    414          
    415            // Discard unknown events
    416            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   00008F   7A00         MOV     R2,#0x0
   \   000091   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   000093   7F04         MOV     R7,#0x4
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
    417          }
    418          
    419          /*********************************************************************
    420           * LOCAL FUNCTIONS
    421           */
    422          
    423          /*********************************************************************
    424           * @fn      SampleApp_MessageMSGCB
    425           *
    426           * @brief   Data message processor callback.  This function processes
    427           *          any incoming data - probably from other devices.  So, based
    428           *          on cluster ID, perform the intended action.
    429           *
    430           * @param   none
    431           *
    432           * @return  none
    433           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    434          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    435          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    436            float Channel0_VolSave = 0.0f;
    437            char  convert_arr[20];
    438            uint8 convert_u16[20];
    439            //ÓÉÓÚÓÐÁù¸ö×Ö½Ú´«ÊäÊý¾Ý£¬Ö»ÓÃµ½Á½¸ö£¬ËùÒÔºóÃæËÄ¸öÊý¾Ý×Ö½ÚÓÃ0xff±íÊ¾
    440            convert_u16[2]   = 0xff;
    441            convert_u16[3]   = 0xff;
    442            convert_u16[4]   = 0xff;
    443            convert_u16[5]   = 0xff;  
    444            uint8 add[]={0xfe,0x10,0x69,0x01,0x83,0xf2,0x2e,0x01,0x00,0x4b,0x12,0x01};//³õÊ¼ÀàÎª01£¬µØÖ·01£¬Ö¡Í·
    445            uint8 end[]={0x77,0x88,0x12};  //Ö¡Î²
    446            uint8 i=0;
    447            uint16   sensor_value=0;
    448            char count;
    449          
    450            switch ( pkt->clusterId )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6406         XRL     A,#0x6
   \   000019   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   00001D   6003         JZ      $+5
   \   00001F   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    451            {
    452            
    453            case SAMPLEAPP_GAS_SENSOR_CLUSTERID:
    454                i=0;//ÓÃÓÚ¼ÇÂ¼Êý¾Ý°üµÄ¼ÆÊý×Ó
    455                char EDid=0;
    456                float p=0;
    457                EDid=(pkt->cmd.Data)[27];
   \   000022   EE           MOV     A,R6
   \   000023   2422         ADD     A,#0x22
   \   000025   F582         MOV     DPL,A
   \   000027   EF           MOV     A,R7
   \   000028   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   241B         ADD     A,#0x1b
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   3400         ADDC    A,#0x0
   \   000033   F9           MOV     R1,A
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F8           MOV     R0,A
    458          #if defined (ASCII_Printf) //ÉèÖÃÎª×Ö·ûÊä³ö,È¡ÏûÊä³ö¾Í¼Ó¸ö_not
    459                if(EDid==1&&contin==0)
   \   00003A   7401         MOV     A,#0x1
   \   00003C   68           XRL     A,R0
   \   00003D   6003         JZ      $+5
   \   00003F   02....       LJMP    ??SampleApp_MessageMSGCB_2 & 0xFFFF
   \   000042   90....       MOV     DPTR,#contin
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6003         JZ      $+5
   \   000048   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    460                //if(1)
    461                {
    462                  /*ÏÔÊ¾ÊÕµ½µÄÊý¾ÝÁ¿
    463                    sprintf(convert_arr,"DataLength:%d\r\n",pkt->cmd.DataLength);
    464                    HalUARTWrite(0,convert_arr,strlen(convert_arr));*/
    465                
    466                    //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
    467                    sprintf(convert_arr,"TEMP£º%d C\r\n",(pkt->cmd.Data)[i]),i++; //Òþ²ØTEMP
   \   00004B   EE           MOV     A,R6
   \   00004C   2422         ADD     A,#0x22
   \   00004E   F5..         MOV     ?V0 + 0,A
   \   000050   EF           MOV     A,R7
   \   000051   3400         ADDC    A,#0x0
   \   000053   F5..         MOV     ?V0 + 1,A
   \   000055                ; Setup parameters for call to function sprintf
   \   000055   85..82       MOV     DPL,?V0 + 0
   \   000058   F583         MOV     DPH,A
   \   00005A   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00005D   F5..         MOV     ?V0 + 2,A
   \   00005F   75..00       MOV     ?V0 + 3,#0x0
   \   000062   78..         MOV     R0,#?V0 + 2
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   7C..         MOV     R4,#`?<Constant "TEMP\\243\\272%d C\\r\\n">` & 0xff
   \   000069   7D..         MOV     R5,#(`?<Constant "TEMP\\243\\272%d C\\r\\n">` >> 8) & 0xff
   \   00006B   7402         MOV     A,#0x2
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   AA82         MOV     R2,DPL
   \   000072   AB83         MOV     R3,DPH
   \   000074   12....       LCALL   ??sprintf?relay
   \   000077   7402         MOV     A,#0x2
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
    468                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00007C                ; Setup parameters for call to function HalUARTWrite
   \   00007C                ; Setup parameters for call to function strlen
   \   00007C   12....       LCALL   ?Subroutine2 & 0xFFFF
    469                    sprintf(convert_arr,"HUMI£º%dRH\r\n",(pkt->cmd.Data)[i]),i++;//Òþ²ØHUMI
   \                     ??CrossCallReturnLabel_5:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F5..         MOV     ?V0 + 2,A
   \   000082   78..         MOV     R0,#?V0 + 2
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   7C..         MOV     R4,#`?<Constant "HUMI\\243\\272%dRH\\r\\n">` & 0xff
   \   000089   7D..         MOV     R5,#(`?<Constant "HUMI\\243\\272%dRH\\r\\n">` >> 8) & 0xff
   \   00008B   7402         MOV     A,#0x2
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   AA82         MOV     R2,DPL
   \   000092   AB83         MOV     R3,DPH
   \   000094   12....       LCALL   ??sprintf?relay
   \   000097   7402         MOV     A,#0x2
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
    470                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00009C                ; Setup parameters for call to function HalUARTWrite
   \   00009C                ; Setup parameters for call to function strlen
   \   00009C   12....       LCALL   ?Subroutine2 & 0xFFFF
    471                
    472                    //ÅÐ¶Ï±êÖ¾Î»£¬²¢¸ø³öÌáÊ¾ÐÅÏ¢
    473                    //DHT³ö´í
    474                    if((pkt->cmd.Data)[i++] & (1<<0))
   \                     ??CrossCallReturnLabel_6:
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000A3   500D         JNC     ??SampleApp_MessageMSGCB_3
    475                    {
    476                      HalUARTWrite(0,"DHT11 Error!\r\n",strlen("DHT11 Error!\r\n"));
   \   0000A5                ; Setup parameters for call to function HalUARTWrite
   \   0000A5   7C0E         MOV     R4,#0xe
   \   0000A7   7D00         MOV     R5,#0x0
   \   0000A9   7A..         MOV     R2,#`?<Constant "DHT11 Error!\\r\\n">` & 0xff
   \   0000AB   7B..         MOV     R3,#(`?<Constant "DHT11 Error!\\r\\n">` >> 8) & 0xff
   \   0000AD   7900         MOV     R1,#0x0
   \   0000AF   12....       LCALL   ??HalUARTWrite?relay
    477                    }
    478                
    479                #if (defined Channel_0_GasSensor_Busy)
    480                    //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
    481                    Channel0_VolSave =  ((float)((pkt->cmd.Data)[i+1]+(pkt->cmd.Data)[i]*256))/1000;
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000B2   85..82       MOV     DPL,?V0 + 0
   \   0000B5   85..83       MOV     DPH,?V0 + 1
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F8           MOV     R0,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F9           MOV     R1,A
   \   0000BD   8882         MOV     DPL,R0
   \   0000BF   8983         MOV     DPH,R1
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   FA           MOV     R2,A
   \   0000C7   8882         MOV     DPL,R0
   \   0000C9   8983         MOV     DPH,R1
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F9           MOV     R1,A
   \   0000D0   EA           MOV     A,R2
   \   0000D1   2400         ADD     A,#0x0
   \   0000D3   E4           CLR     A
   \   0000D4   39           ADDC    A,R1
   \   0000D5   8A..         MOV     ?V0 + 4,R2
   \   0000D7   F5..         MOV     ?V0 + 5,A
   \   0000D9   33           RLC     A
   \   0000DA   95E0         SUBB    A,0xE0 /* A   */
   \   0000DC   F5..         MOV     ?V0 + 6,A
   \   0000DE   F5..         MOV     ?V0 + 7,A
   \   0000E0   78..         MOV     R0,#?V0 + 4
   \   0000E2   12....       LCALL   ?L_TO_FLT
   \   0000E5   90....       MOV     DPTR,#__Constant_447a0000
   \   0000E8   78..         MOV     R0,#?V0 + 0
   \   0000EA   12....       LCALL   ?L_MOV_X
   \   0000ED   78..         MOV     R0,#?V0 + 4
   \   0000EF   79..         MOV     R1,#?V0 + 0
   \   0000F1   12....       LCALL   ?FLT_DIV
    482                    sprintf(convert_arr,"vol0£º%.3fV\r\n",Channel0_VolSave),i+=2;
   \   0000F4                ; Setup parameters for call to function sprintf
   \   0000F4   78..         MOV     R0,#?V0 + 4
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000F9   7C..         MOV     R4,#`?<Constant "vol0\\243\\272%.3fV\\r\\n">` & 0xff
   \   0000FB   7D..         MOV     R5,#(`?<Constant "vol0\\243\\272%.3fV\\r\\n">` >> 8) & 0xff
   \   0000FD   7404         MOV     A,#0x4
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000105   12....       LCALL   ?DEALLOC_XSTACK8
    483                    HalUARTWrite(0,convert_arr,strlen(convert_arr));
                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000108                ; Setup parameters for call to function HalUARTWrite
   \   000108                ; Setup parameters for call to function strlen
   \   000108   12....       LCALL   ?Subroutine17 & 0xFFFF
    484                    if(Channel0_VolSave < TGS822_Safe)
   \                     ??CrossCallReturnLabel_40:
   \   00010B   90....       MOV     DPTR,#__Constant_3f4ccccd
   \   00010E   78..         MOV     R0,#?V0 + 0
   \   000110   12....       LCALL   ?L_MOV_X
   \   000113   78..         MOV     R0,#?V0 + 4
   \   000115   79..         MOV     R1,#?V0 + 0
   \   000117   12....       LCALL   ?FLT_LT
   \   00011A   5006         JNC     ??SampleApp_MessageMSGCB_4
    485                      sprintf(convert_arr,"Level: Ã»ÓÐÎÛÈ¾\r\n");
   \   00011C                ; Setup parameters for call to function sprintf
   \   00011C   7C..         MOV     R4,#`?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31` & 0xff
   \   00011E   7D..         MOV     R5,#(`?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31` >> 8) & 0xff
   \   000120   8043         SJMP    ??SampleApp_MessageMSGCB_5
    486                    else if(Channel0_VolSave < TGS822_Mildly)
   \                     ??SampleApp_MessageMSGCB_4:
   \   000122   90....       MOV     DPTR,#__Constant_3f99999a
   \   000125   78..         MOV     R0,#?V0 + 0
   \   000127   12....       LCALL   ?L_MOV_X
   \   00012A   78..         MOV     R0,#?V0 + 4
   \   00012C   79..         MOV     R1,#?V0 + 0
   \   00012E   12....       LCALL   ?FLT_LT
   \   000131   5006         JNC     ??SampleApp_MessageMSGCB_6
    487                      sprintf(convert_arr,"Level: Çá¶ÈÎÛÈ¾\r\n");
   \   000133                ; Setup parameters for call to function sprintf
   \   000133   7C..         MOV     R4,#`?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31` & 0xff
   \   000135   7D..         MOV     R5,#(`?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31` >> 8) & 0xff
   \   000137   802C         SJMP    ??SampleApp_MessageMSGCB_5
    488                    else if(Channel0_VolSave < TGS822_Moderate)
   \                     ??SampleApp_MessageMSGCB_6:
   \   000139   90....       MOV     DPTR,#__Constant_3fe66666
   \   00013C   78..         MOV     R0,#?V0 + 0
   \   00013E   12....       LCALL   ?L_MOV_X
   \   000141   78..         MOV     R0,#?V0 + 4
   \   000143   79..         MOV     R1,#?V0 + 0
   \   000145   12....       LCALL   ?FLT_LT
   \   000148   5006         JNC     ??SampleApp_MessageMSGCB_7
    489                      sprintf(convert_arr,"Level: ÖÐ¶ÈÎÛÈ¾\r\n");
   \   00014A                ; Setup parameters for call to function sprintf
   \   00014A   7C..         MOV     R4,#`?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31` & 0xff
   \   00014C   7D..         MOV     R5,#(`?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31` >> 8) & 0xff
   \   00014E   8015         SJMP    ??SampleApp_MessageMSGCB_5
    490                    else if(Channel0_VolSave < TGS822_Severe)
   \                     ??SampleApp_MessageMSGCB_7:
   \   000150   90....       MOV     DPTR,#__Constant_40133333
   \   000153   78..         MOV     R0,#?V0 + 0
   \   000155   12....       LCALL   ?L_MOV_X
   \   000158   78..         MOV     R0,#?V0 + 4
   \   00015A   79..         MOV     R1,#?V0 + 0
   \   00015C   12....       LCALL   ?FLT_LT
   \   00015F   5011         JNC     ??SampleApp_MessageMSGCB_8
    491                      sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
   \   000161                ; Setup parameters for call to function sprintf
   \   000161   7C..         MOV     R4,#`?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31` & 0xff
   \   000163   7D..         MOV     R5,#(`?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31` >> 8) & 0xff
   \                     ??SampleApp_MessageMSGCB_5:
   \   000165   85..82       MOV     DPL,?XSP + 0
   \   000168   85..83       MOV     DPH,?XSP + 1
   \   00016B   AA82         MOV     R2,DPL
   \   00016D   AB83         MOV     R3,DPH
   \   00016F   12....       LCALL   ??sprintf?relay
    492                //      sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
    493                 //   HalUARTWrite(0,convert_arr,strlen(convert_arr));
    494                    //    sprintf(convert_arr,"concen0£º%dppm\r\n",BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])),i+=2;
    495                //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    496                //    sprintf(convert_arr,"Flag0:0x%x\r\n",(pkt->cmd.Data)[i]),i++;
    497                //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
    498                #endif
    499                  
    500                   //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
    501                  for(count=0;count<=6;count++)
   \                     ??SampleApp_MessageMSGCB_8:
   \   000172   7C00         MOV     R4,#0x0
    502                  {
    503                    send_data_CO[count]=(pkt->cmd.Data)[count+8];
   \                     ??SampleApp_MessageMSGCB_9:
   \   000174   8C82         MOV     DPL,R4
   \   000176   A882         MOV     R0,DPL
   \   000178   12....       LCALL   ?Subroutine6 & 0xFFFF
    504                  }
   \                     ??CrossCallReturnLabel_13:
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   E0           MOVX    A,@DPTR
   \   000184   C0E0         PUSH    A
   \   000186   74..         MOV     A,#send_data_CO & 0xff
   \   000188   28           ADD     A,R0
   \   000189   F582         MOV     DPL,A
   \   00018B   74..         MOV     A,#(send_data_CO >> 8) & 0xff
   \   00018D   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000190   D0E0         POP     A
   \   000192   F0           MOVX    @DPTR,A
   \   000193   0C           INC     R4
   \   000194   EC           MOV     A,R4
   \   000195   C3           CLR     C
   \   000196   9407         SUBB    A,#0x7
   \   000198   40DA         JC      ??SampleApp_MessageMSGCB_9
    505                  for(count=0;count<=5;count++)
   \   00019A   7C00         MOV     R4,#0x0
    506                  {
    507                    send_data_HCL[count]=(pkt->cmd.Data)[count+15];
   \                     ??SampleApp_MessageMSGCB_10:
   \   00019C   12....       LCALL   ?Subroutine7 & 0xFFFF
    508                  }
   \                     ??CrossCallReturnLabel_15:
   \   00019F   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   C0E0         PUSH    A
   \   0001A5   74..         MOV     A,#send_data_HCL & 0xff
   \   0001A7   2A           ADD     A,R2
   \   0001A8   F582         MOV     DPL,A
   \   0001AA   74..         MOV     A,#(send_data_HCL >> 8) & 0xff
   \   0001AC   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0001AF   D0E0         POP     A
   \   0001B1   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001B4   40E6         JC      ??SampleApp_MessageMSGCB_10
    509                  for(count=0;count<=5;count++)
   \   0001B6   7C00         MOV     R4,#0x0
    510                  {
    511                    send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
   \                     ??SampleApp_MessageMSGCB_11:
   \   0001B8   12....       LCALL   ?Subroutine7 & 0xFFFF
    512                  }
   \                     ??CrossCallReturnLabel_16:
   \   0001BB   2415         ADD     A,#0x15
   \   0001BD   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   C0E0         PUSH    A
   \   0001C3   74..         MOV     A,#send_data_MQ3 & 0xff
   \   0001C5   2A           ADD     A,R2
   \   0001C6   F582         MOV     DPL,A
   \   0001C8   74..         MOV     A,#(send_data_MQ3 >> 8) & 0xff
   \   0001CA   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0001CD   D0E0         POP     A
   \   0001CF   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001D2   40E4         JC      ??SampleApp_MessageMSGCB_11
    513                  HalUARTWrite(0, "CO:", 3);
   \   0001D4                ; Setup parameters for call to function HalUARTWrite
   \   0001D4   7C03         MOV     R4,#0x3
   \   0001D6   7D00         MOV     R5,#0x0
   \   0001D8   7A..         MOV     R2,#`?<Constant "CO:">` & 0xff
   \   0001DA   7B..         MOV     R3,#(`?<Constant "CO:">` >> 8) & 0xff
   \   0001DC   7900         MOV     R1,#0x0
   \   0001DE   12....       LCALL   ??HalUARTWrite?relay
    514                  HalUARTWrite(0, send_data_CO, 7); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   0001E1                ; Setup parameters for call to function HalUARTWrite
   \   0001E1   7C07         MOV     R4,#0x7
   \   0001E3   7D00         MOV     R5,#0x0
   \   0001E5   7A..         MOV     R2,#send_data_CO & 0xff
   \   0001E7   7B..         MOV     R3,#(send_data_CO >> 8) & 0xff
   \   0001E9   7900         MOV     R1,#0x0
   \   0001EB   12....       LCALL   ??HalUARTWrite?relay
    515                  HalUARTWrite(0, "ppm", 3);
   \   0001EE   75....       MOV     ?V0 + 0,#`?<Constant "ppm">` & 0xff
   \   0001F1   75....       MOV     ?V0 + 1,#(`?<Constant "ppm">` >> 8) & 0xff
   \   0001F4                ; Setup parameters for call to function HalUARTWrite
   \   0001F4   7C03         MOV     R4,#0x3
   \   0001F6   7D00         MOV     R5,#0x0
   \   0001F8   AA..         MOV     R2,?V0 + 0
   \   0001FA   AB..         MOV     R3,?V0 + 1
   \   0001FC   12....       LCALL   ?Subroutine1 & 0xFFFF
    516                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    517                  
    518                  HalUARTWrite(0, "HCL:", 4);
   \                     ??CrossCallReturnLabel_2:
   \   0001FF                ; Setup parameters for call to function HalUARTWrite
   \   0001FF   7C04         MOV     R4,#0x4
   \   000201   7D00         MOV     R5,#0x0
   \   000203   7A..         MOV     R2,#`?<Constant "HCL:">` & 0xff
   \   000205   7B..         MOV     R3,#(`?<Constant "HCL:">` >> 8) & 0xff
   \   000207   12....       LCALL   ?Subroutine3 & 0xFFFF
    519                  HalUARTWrite(0, send_data_HCL, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \                     ??CrossCallReturnLabel_49:
   \   00020A   7A..         MOV     R2,#send_data_HCL & 0xff
   \   00020C   7B..         MOV     R3,#(send_data_HCL >> 8) & 0xff
   \   00020E   12....       LCALL   ?Subroutine0 & 0xFFFF
    520                  HalUARTWrite(0, "ppm", 3);
    521                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    522                  
    523                  HalUARTWrite(0, "AOL:", 4);
   \                     ??CrossCallReturnLabel_0:
   \   000211                ; Setup parameters for call to function HalUARTWrite
   \   000211   7C04         MOV     R4,#0x4
   \   000213   7D00         MOV     R5,#0x0
   \   000215   7A..         MOV     R2,#`?<Constant "AOL:">` & 0xff
   \   000217   7B..         MOV     R3,#(`?<Constant "AOL:">` >> 8) & 0xff
   \   000219   12....       LCALL   ?Subroutine3 & 0xFFFF
    524                  HalUARTWrite(0, send_data_MQ3, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \                     ??CrossCallReturnLabel_50:
   \   00021C   7A..         MOV     R2,#send_data_MQ3 & 0xff
   \   00021E   7B..         MOV     R3,#(send_data_MQ3 >> 8) & 0xff
   \   000220   12....       LCALL   ?Subroutine0 & 0xFFFF
    525                  HalUARTWrite(0, "ppm", 3);
    526                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    527                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
   \                     ??CrossCallReturnLabel_1:
   \   000223                ; Setup parameters for call to function HalUARTWrite
   \   000223   7C02         MOV     R4,#0x2
   \   000225   7D00         MOV     R5,#0x0
   \   000227   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   000229   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00022B   12....       LCALL   ?Subroutine1 & 0xFFFF
    528                  HalUARTWrite(0, "\r\n", 2);
    529                  
    530              if((Channel0_VolSave>0.15)&&((atof(send_data_MQ3))>150)&&((Channel0_VolSave*1000)>atof(send_data_MQ3)))
                                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

      if((Channel0_VolSave>0.15)&&((atof(send_data_MQ3))>150)&&((Channel0_VolSave*1000)>atof(send_data_MQ3)))
                                                                                             ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",530  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \                     ??CrossCallReturnLabel_3:
   \   00022E   90....       MOV     DPTR,#__Constant_3e19999b
   \   000231   78..         MOV     R0,#?V0 + 0
   \   000233   12....       LCALL   ?L_MOV_X
   \   000236   78..         MOV     R0,#?V0 + 4
   \   000238   79..         MOV     R1,#?V0 + 0
   \   00023A   12....       LCALL   ?FLT_GE
   \   00023D   5078         JNC     ??SampleApp_MessageMSGCB_12
   \   00023F                ; Setup parameters for call to function atof
   \   00023F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000242   12....       LCALL   ?L_MOV_X
   \   000245   78..         MOV     R0,#?V0 + 0
   \   000247   79..         MOV     R1,#?V0 + 8
   \   000249   12....       LCALL   ?FLT_GE
   \   00024C   5039         JNC     ??SampleApp_MessageMSGCB_13
   \   00024E                ; Setup parameters for call to function atof
   \   00024E   7A..         MOV     R2,#send_data_MQ3 & 0xff
   \   000250   7B..         MOV     R3,#(send_data_MQ3 >> 8) & 0xff
   \   000252   12....       LCALL   ??atof?relay
   \   000255   8A..         MOV     ?V0 + 8,R2
   \   000257   8B..         MOV     ?V0 + 9,R3
   \   000259   8C..         MOV     ?V0 + 10,R4
   \   00025B   8D..         MOV     ?V0 + 11,R5
   \   00025D   85....       MOV     ?V0 + 0,?V0 + 4
   \   000260   85....       MOV     ?V0 + 1,?V0 + 5
   \   000263   85....       MOV     ?V0 + 2,?V0 + 6
   \   000266   85....       MOV     ?V0 + 3,?V0 + 7
   \   000269   90....       MOV     DPTR,#__Constant_447a0000
   \   00026C   78..         MOV     R0,#?V0 + 12
   \   00026E   12....       LCALL   ?L_MOV_X
   \   000271   78..         MOV     R0,#?V0 + 0
   \   000273   79..         MOV     R1,#?V0 + 12
   \   000275   12....       LCALL   ?FLT_MUL
   \   000278   78..         MOV     R0,#?V0 + 8
   \   00027A   79..         MOV     R1,#?V0 + 0
   \   00027C   12....       LCALL   ?FLT_LT
   \   00027F   5006         JNC     ??SampleApp_MessageMSGCB_13
    531                    flag_tgs++;
   \   000281   90....       MOV     DPTR,#flag_tgs
   \   000284   E0           MOVX    A,@DPTR
   \   000285   04           INC     A
   \   000286   F0           MOVX    @DPTR,A
   \                     ??SampleApp_MessageMSGCB_13:
   \   000287                ; Setup parameters for call to function atof
   \   000287   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00028A   12....       LCALL   ?L_MOV_X
   \   00028D   78..         MOV     R0,#?V0 + 0
   \   00028F   79..         MOV     R1,#?V0 + 8
   \   000291   12....       LCALL   ?FLT_GE
   \   000294   5021         JNC     ??SampleApp_MessageMSGCB_12
   \   000296   90....       MOV     DPTR,#__Constant_447a0000
   \   000299   78..         MOV     R0,#?V0 + 0
   \   00029B   12....       LCALL   ?L_MOV_X
   \   00029E   78..         MOV     R0,#?V0 + 4
   \   0002A0   79..         MOV     R1,#?V0 + 0
   \   0002A2   12....       LCALL   ?FLT_MUL
   \   0002A5                ; Setup parameters for call to function atof
   \   0002A5   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0002A8   78..         MOV     R0,#?V0 + 4
   \   0002AA   79..         MOV     R1,#?V0 + 0
   \   0002AC   12....       LCALL   ?FLT_LT
   \   0002AF   5006         JNC     ??SampleApp_MessageMSGCB_12
    532                  
    533              if((Channel0_VolSave>0.15)&&((atof(send_data_MQ3))>150)&&((Channel0_VolSave*1000)<atof(send_data_MQ3)))
                                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

      if((Channel0_VolSave>0.15)&&((atof(send_data_MQ3))>150)&&((Channel0_VolSave*1000)<atof(send_data_MQ3)))
                                                                                             ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",533  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"

        float p=0;
              ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",456  Warning[Pe177]: 
          variable "p" was declared but never referenced

    uint8 convert_u16[20];
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",438  Warning[Pe550]: 
          variable "convert_u16" was set but never used

    uint8 add[]={0xfe,0x10,0x69,0x01,0x83,0xf2,0x2e,0x01,0x00,0x4b,0x12,0x01};//³õÊ¼ÀàÎª01£¬µØÖ·01£¬Ö¡Í·
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",444  Warning[Pe177]: 
          variable "add" was declared but never referenced

    uint8 end[]={0x77,0x88,0x12};  //Ö¡Î²
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",445  Warning[Pe177]: 
          variable "end" was declared but never referenced

    uint16   sensor_value=0;
             ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",447  Warning[Pe177]: 
          variable "sensor_value" was declared but never referenced
    534                    flag_aol++;
   \   0002B1   90....       MOV     DPTR,#flag_aol
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   04           INC     A
   \   0002B6   F0           MOVX    @DPTR,A
    535              
    536                  
    537              if(++flag==5)
   \                     ??SampleApp_MessageMSGCB_12:
   \   0002B7   90....       MOV     DPTR,#flag
   \   0002BA   E0           MOVX    A,@DPTR
   \   0002BB   04           INC     A
   \   0002BC   F0           MOVX    @DPTR,A
   \   0002BD   6405         XRL     A,#0x5
   \   0002BF   7037         JNZ     ??SampleApp_MessageMSGCB_14
    538                  
    539                {
    540                     
    541                     flag=0;      
   \   0002C1   E4           CLR     A
   \   0002C2   F0           MOVX    @DPTR,A
    542                     
    543                     if(flag_tgs>=3)
   \   0002C3   90....       MOV     DPTR,#flag_tgs
   \   0002C6   E0           MOVX    A,@DPTR
   \   0002C7   C3           CLR     C
   \   0002C8   9403         SUBB    A,#0x3
   \   0002CA   400D         JC      ??SampleApp_MessageMSGCB_15
    544                        HalUARTWrite(0, "ÆûÓÍÐ¹Â©\r\n", 10);
   \   0002CC                ; Setup parameters for call to function HalUARTWrite
   \   0002CC   7C0A         MOV     R4,#0xa
   \   0002CE   7D00         MOV     R5,#0x0
   \   0002D0   7A..         MOV     R2,#`?<Constant "\\306\\373\\323\\315\\320\\271\\302\\251\\r` & 0xff
   \   0002D2   7B..         MOV     R3,#(`?<Constant "\\306\\373\\323\\315\\320\\271\\302\\251\\r` >> 8) & 0xff
   \   0002D4   7900         MOV     R1,#0x0
   \   0002D6   12....       LCALL   ??HalUARTWrite?relay
    545                            
    546                     if(flag_aol>=3)
   \                     ??SampleApp_MessageMSGCB_15:
   \   0002D9   90....       MOV     DPTR,#flag_aol
   \   0002DC   E0           MOVX    A,@DPTR
   \   0002DD   C3           CLR     C
   \   0002DE   9403         SUBB    A,#0x3
   \   0002E0   400D         JC      ??SampleApp_MessageMSGCB_16
    547                       HalUARTWrite(0, "¾Æ¾«Ð¹Â©\r\n", 10);
   \   0002E2                ; Setup parameters for call to function HalUARTWrite
   \   0002E2   7C0A         MOV     R4,#0xa
   \   0002E4   7D00         MOV     R5,#0x0
   \   0002E6   7A..         MOV     R2,#`?<Constant "\\276\\306\\276\\253\\320\\271\\302\\251\\r` & 0xff
   \   0002E8   7B..         MOV     R3,#(`?<Constant "\\276\\306\\276\\253\\320\\271\\302\\251\\r` >> 8) & 0xff
   \   0002EA   7900         MOV     R1,#0x0
   \   0002EC   12....       LCALL   ??HalUARTWrite?relay
    548                     flag_tgs=0;flag_aol=0;       
   \                     ??SampleApp_MessageMSGCB_16:
   \   0002EF   90....       MOV     DPTR,#flag_tgs
   \   0002F2   E4           CLR     A
   \   0002F3   F0           MOVX    @DPTR,A
   \   0002F4   90....       MOV     DPTR,#flag_aol
   \   0002F7   F0           MOVX    @DPTR,A
    549                 
    550                }        
    551                  contin=1;
   \                     ??SampleApp_MessageMSGCB_14:
   \   0002F8   90....       MOV     DPTR,#contin
   \   0002FB   7401         MOV     A,#0x1
   \   0002FD   804F         SJMP    ??SampleApp_MessageMSGCB_17
    552                            //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
    553          
    554                }
    555                if(EDid==2&&contin==1)
   \                     ??SampleApp_MessageMSGCB_2:
   \   0002FF   7402         MOV     A,#0x2
   \   000301   68           XRL     A,R0
   \   000302   704B         JNZ     ??SampleApp_MessageMSGCB_1
   \   000304   90....       MOV     DPTR,#contin
   \   000307   E0           MOVX    A,@DPTR
   \   000308   6401         XRL     A,#0x1
   \   00030A   7043         JNZ     ??SampleApp_MessageMSGCB_1
    556                {
    557                  for(count=0;count<6;count++)
   \   00030C   7C00         MOV     R4,#0x0
    558                  {
    559                    send_data_PM25[count]=(pkt->cmd.Data)[count];
   \                     ??SampleApp_MessageMSGCB_18:
   \   00030E   8C82         MOV     DPL,R4
   \   000310   A882         MOV     R0,DPL
   \   000312   7900         MOV     R1,#0x0
   \   000314   12....       LCALL   ?Subroutine6 & 0xFFFF
    560                  }
   \                     ??CrossCallReturnLabel_14:
   \   000317   E0           MOVX    A,@DPTR
   \   000318   C0E0         PUSH    A
   \   00031A   74..         MOV     A,#send_data_PM25 & 0xff
   \   00031C   28           ADD     A,R0
   \   00031D   F582         MOV     DPL,A
   \   00031F   74..         MOV     A,#(send_data_PM25 >> 8) & 0xff
   \   000321   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000324   D0E0         POP     A
   \   000326   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000329   40E3         JC      ??SampleApp_MessageMSGCB_18
    561                  HalUARTWrite(0, "PM2.5:", 6);
   \   00032B                ; Setup parameters for call to function HalUARTWrite
   \   00032B   7C06         MOV     R4,#0x6
   \   00032D   7D00         MOV     R5,#0x0
   \   00032F   7A..         MOV     R2,#`?<Constant "PM2.5:">` & 0xff
   \   000331   7B..         MOV     R3,#(`?<Constant "PM2.5:">` >> 8) & 0xff
   \   000333   12....       LCALL   ??Subroutine21_0 & 0xFFFF
    562                  HalUARTWrite(0, send_data_PM25, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \                     ??CrossCallReturnLabel_51:
   \   000336   7A..         MOV     R2,#send_data_PM25 & 0xff
   \   000338   7B..         MOV     R3,#(send_data_PM25 >> 8) & 0xff
   \   00033A   7900         MOV     R1,#0x0
   \   00033C   12....       LCALL   ??HalUARTWrite?relay
    563                  HalUARTWrite(0, "ug/m3", 5);
   \   00033F                ; Setup parameters for call to function HalUARTWrite
   \   00033F   7C05         MOV     R4,#0x5
   \   000341   7D00         MOV     R5,#0x0
   \   000343   7A..         MOV     R2,#`?<Constant "ug/m3">` & 0xff
   \   000345   7B..         MOV     R3,#(`?<Constant "ug/m3">` >> 8) & 0xff
   \   000347   12....       LCALL   ?Subroutine1 & 0xFFFF
    564                  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
    565          
    566                  contin=0;
   \                     ??CrossCallReturnLabel_4:
   \   00034A   90....       MOV     DPTR,#contin
   \   00034D   E4           CLR     A
   \                     ??SampleApp_MessageMSGCB_17:
   \   00034E   F0           MOVX    @DPTR,A
    567                }
    568          #endif
    569          
    570          #if defined (uint8_Printf_not) //ÉèÖÃÎª16½øÖÆÏÔÊ¾Êä³ö,È¡ÏûÊä³ö¾Í¼Ó¸ö_not
    571                if(EDid==1&&contin1==0)
    572                {
    573                
    574                    i=0;
    575                    add[3] =0x01;
    576                    add[11]=0x01; //ÉèÖÃÎÂ¶ÈÎïÀíµØÖ·Îª01
    577                    convert_u16[0]   = 0x00;
    578                    convert_u16[1]   = (pkt->cmd.Data)[i++]; 
    579                    HalUARTWrite(0,add,12);
    580                    HalUARTWrite(0,convert_u16,6);   //ÎÂ¶È
    581                    HalUARTWrite(0,end,3);
    582                    add[3] =0x02;
    583                    add[11]=0x02; //ÉèÖÃÊª¶ÈÎïÀíµØÖ·Îª02         
    584                    convert_u16[0]   = 0x00;
    585                    convert_u16[1]   = (pkt->cmd.Data)[i++];   
    586                    HalUARTWrite(0,add,12);
    587                    HalUARTWrite(0,convert_u16,6);   //Êª¶È
    588                    HalUARTWrite(0,end,3);
    589                    i++;  //Ìø¹ýÎÂÊª¶È´«¸ÐÊý¾ÝµÄ±êÖ¾Î»
    590                
    591                #if (defined Channel_0_GasSensor_Busy)
    592                    //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
    593                    Channel0_VolSave =  (float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i]);  //²»³ýÒÔ1000£¬ÈÃÆäÖµÃ»ÓÐ¸¡µã£¬µ«ÊÇ¹ýºóÒª³ýÒÔ1000
    594                    sensor_value     =   Channel0_VolSave;
    595                    convert_u16[0]   =   sensor_value>>8;
    596                    convert_u16[1]   =   (sensor_value&0x00ff);
    597                    add[3] =0x03;
    598                    add[11]=0x03;   //ÉèÖÃÓÐ»úÈÜ¼ÁÎïÀíµØÖ·Îª03
    599                    HalUARTWrite(0,add,12);
    600                    HalUARTWrite(0,convert_u16,6); 
    601                    HalUARTWrite(0,end,3);
    602                #endif
    603                  
    604                   //´òÓ¡CO¡¢HCL¡¢¾Æ¾«Êý¾Ý
    605                  for(count=0;count<=6;count++)
    606                  {
    607                    send_data_CO[count]=(pkt->cmd.Data)[count+8];
    608                  }
    609                  for(count=0;count<=5;count++)
    610                  {
    611                    send_data_HCL[count]=(pkt->cmd.Data)[count+15];
    612                  }
    613                  for(count=0;count<=5;count++)
    614                  {
    615                    send_data_MQ3[count]=(pkt->cmd.Data)[count+21];
    616                  }
    617                 
    618                  sensor_value = atof(send_data_CO)*10;  //½«¸¡µãÊý×ª»»³ÉÕûÊý
    619                  if(atof(send_data_CO)<0) sensor_value=0;
    620                  convert_u16[0]   =   sensor_value>>8;
    621                  convert_u16[1]   =   (sensor_value&0x00ff);
    622                  add[3] =0x04;
    623                  add[11]=0x04;   
    624                  HalUARTWrite(0,add,12);
    625                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    626                  HalUARTWrite(0,end,3);  
    627          
    628                  sensor_value = atof(send_data_HCL)*10;
    629                  if(atof(send_data_HCL)<0) sensor_value=0;
    630                  convert_u16[0]   =   sensor_value>>8;
    631                  convert_u16[1]   =   (sensor_value&0x00ff);
    632                  add[3] =0x05;
    633                  add[11]=0x05;
    634                  HalUARTWrite(0,add,12);
    635                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    636                  HalUARTWrite(0,end,3);     
    637          
    638                  sensor_value = atof(send_data_MQ3)*10;
    639                  if(atof(send_data_MQ3)<0) sensor_value=0;
    640                  convert_u16[0]   =   sensor_value>>8;
    641                  convert_u16[1]   =   (sensor_value&0x00ff);
    642                  add[3] =0x06;       
    643                  add[11]=0x06;
    644                  HalUARTWrite(0,add,12);
    645                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    646                  HalUARTWrite(0,end,3);
    647               
    648                  /*ÅÐ¶ÏÏãÑÌ µçÀÂÈ¼ÉÕ*/
    649                  p=atof(send_data_HCL)/atof(send_data_CO);
    650                  if((p>0.1&&p<0.2)&&(atof(send_data_HCL))>1.0)
    651                      flag_co++;       
    652                  if(p>0.4&&p<3.0&&(atof(send_data_HCL))>1.0)
    653                      flag_hcl++;        
    654                  if(++flag==5)            
    655                    {               
    656                         flag=0;                    
    657                         if(flag_co>=3)                  
    658                             flag_ch=1;
    659                                
    660                         if(flag_hcl>=3)
    661                             flag_ch=2;
    662                         flag_co=0;
    663                         flag_hcl=0;                  
    664                    }      
    665                  
    666                  /*ÅÐ¶Ï¾Æ¾«¡¢ÆûÓÍÐ¹Â©*/   
    667                   if((Channel0_VolSave>150)&&((atof(send_data_MQ3))>150)&&((Channel0_VolSave)>atof(send_data_MQ3)))
    668                      flag_tgs++;        
    669                   if((Channel0_VolSave>150)&&((atof(send_data_MQ3))>150)&&((Channel0_VolSave)<atof(send_data_MQ3)))
    670                      flag_aol++;              
    671                   if(++flag==5)        
    672                    {               
    673                         flag=0;              //±êÖ¾Î»ÇåÁã       
    674                         if(flag_tgs>=3)
    675                            flag_ta=1;                      
    676                         if(flag_aol>=3)
    677                            flag_ta=2;
    678                         flag_tgs=0;
    679                         flag_aol=0;                  
    680                    }  
    681                  
    682                  contin1=1;
    683                }
    684                if(EDid==2&&contin1==1)
    685                {  
    686                  /*¹¹½¨PM25Ö¡*/
    687                  for(count=0;count<6;count++)
    688                  {
    689                    send_data_PM25[count]=(pkt->cmd.Data)[count];
    690                  }
    691                  sensor_value = atof(send_data_PM25)*100;
    692                  if(atof(send_data_PM25)<0) sensor_value=0;
    693                  convert_u16[0]   =   sensor_value>>8;
    694                  convert_u16[1]   =   (sensor_value&0x00ff);
    695                  add[3] =0x07;
    696                  add[11]=0x07;
    697                  HalUARTWrite(0,add,12);
    698                  HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    699                  HalUARTWrite(0,end,3);
    700                  
    701                  if(flag_ch==0)
    702                  {
    703                       convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
    704                       convert_u16[1]   =   0x00;   //µÍ×Ö½Ú
    705                       add[3] =0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
    706                       add[11]=0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
    707                       HalUARTWrite(0,add,12);
    708                       HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    709                       HalUARTWrite(0,end,3);
    710                  }
    711                  else if(flag_ch==1)
    712                  {
    713                       convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
    714                       convert_u16[1]   =   0x01;   //ÏãÑÌÖÃÒ»
    715                       add[3] =0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
    716                       add[11]=0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
    717                       HalUARTWrite(0,add,12);
    718                       HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    719                       HalUARTWrite(0,end,3);
    720                       flag_ch=0;
    721                  }
    722                  else if(flag_ch==2)
    723                  {
    724                       convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
    725                       convert_u16[1]   =   0x02;   //µçÀÂÖÃ¶þ
    726                       add[3] =0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
    727                       add[11]=0x08;                    //ÏãÑÌµçÀÂÈ¼ÉÕ±êÖ¾Î»
    728                       HalUARTWrite(0,add,12);
    729                       HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    730                       HalUARTWrite(0,end,3);
    731                       flag_ch=0;
    732                  }
    733                  
    734                  /*ÅÐ¶Ï¾Æ¾«¡¢ÆûÓÍÐ¹Â©*/
    735                  if(flag_ta==0)
    736                  {
    737                       convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
    738                       convert_u16[1]   =   0x00;   //µÍ×Ö½Ú
    739                       add[3] =0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
    740                       add[11]=0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
    741                       HalUARTWrite(0,add,12);
    742                       HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    743                       HalUARTWrite(0,end,3);
    744                  }
    745                  else if(flag_ta==1)   //ÆûÓÍÐ¹Â©
    746                  {
    747                       convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
    748                       convert_u16[1]   =   0x01;   //ÆûÓÍÐ¹Â©ÖÃÒ»
    749                       add[3] =0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
    750                       add[11]=0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
    751                       HalUARTWrite(0,add,12);
    752                       HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    753                       HalUARTWrite(0,end,3);
    754                       flag_ta=0;
    755                  }
    756                  else if(flag_ta==2)  //¾Æ¾«Ð¹Â©
    757                  {
    758                       convert_u16[0]   =   0x00;   //¸ß×Ö½Ú
    759                       convert_u16[1]   =   0x02;   //¾Æ¾«Ð¹Â©ÖÃ¶þ
    760                       add[3] =0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
    761                       add[11]=0x09;                    //¾Æ¾«¡¢ÆûÓÍÐ¹Â©±êÖ¾Î»
    762                       HalUARTWrite(0,add,12);
    763                       HalUARTWrite(0,convert_u16,6);  //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
    764                       HalUARTWrite(0,end,3);
    765                       flag_ta=0;
    766                  }
    767                  
    768                  contin1=0;
    769                }      
    770          #endif
    771                break;
    772            }
    773          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   00034F   7414         MOV     A,#0x14
   \   000351   12....       LCALL   ?DEALLOC_XSTACK8
   \   000354   7F10         MOV     R7,#0x10
   \   000356   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003   90....       MOV     DPTR,#__Constant_43160001
   \   000006   78..         MOV     R0,#?V0 + 8
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7A..         MOV     R2,#send_data_MQ3 & 0xff
   \   000002   7B..         MOV     R3,#(send_data_MQ3 >> 8) & 0xff
   \   000004   12....       LCALL   ??atof?relay
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8C82         MOV     DPL,R4
   \   000002   AA82         MOV     R2,DPL
   \   000004   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000007   2A           ADD     A,R2
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F9           MOV     R1,A
   \   00000E   E8           MOV     A,R0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   28           ADD     A,R0
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   3400         ADDC    A,#0x0
   \   000009   8A82         MOV     DPL,R2
   \   00000B   F583         MOV     DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   0C           INC     R4
   \   000002   EC           MOV     A,R4
   \   000003   C3           CLR     C
   \   000004   9406         SUBB    A,#0x6
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7900         MOV     R1,#0x0
   \   000002                REQUIRE ??Subroutine21_0
   \   000002                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   12....       LCALL   ??HalUARTWrite?relay
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003   7C06         MOV     R4,#0x6
   \   000005   7D00         MOV     R5,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003                ; Setup parameters for call to function sprintf
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   12....       LCALL   ??strlen?relay
   \   00000D   EA           MOV     A,R2
   \   00000E   FC           MOV     R4,A
   \   00000F   EB           MOV     A,R3
   \   000010   FD           MOV     R5,A
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   AA82         MOV     R2,DPL
   \   000019   AB83         MOV     R3,DPH
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   ??HalUARTWrite?relay
   \   000020   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C03         MOV     R4,#0x3
   \   000007   7D00         MOV     R5,#0x0
   \   000009   AA..         MOV     R2,?V0 + 0
   \   00000B   AB..         MOV     R3,?V0 + 1
   \   00000D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C02         MOV     R4,#0x2
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004   12....       LCALL   ??sprintf?relay
   \   000007   7404         MOV     A,#0x4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   240F         ADD     A,#0xf
   \   000002                REQUIRE ??Subroutine22_0
   \   000002                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E9           MOV     A,R1
   \   000003                REQUIRE ??Subroutine23_0
   \   000003                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    774          
    775          
    776          /*********************************************************************
    777           * @fn      SampleAPP_SendGasSensorMessage
    778           *
    779           * @brief   Send the flash message to group 1.
    780           *
    781           * @param   flashTime - in milliseconds
    782           *
    783           * @return  none
    784           */
    785          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    786          void SampleAPP_SendGasSensorMessage(void)
   \                     SampleAPP_SendGasSensorMessage:
    787          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    788            
    789            uint8 Transmit_data[28];              //ÐèÒª·¢ËÍµÄÊý¾Ý    °ü=¹«¹²Êý¾Ý(ÎÂÊª¶ÈÊý¾ÝºÍ±êÖ¾Î»)+Í¨µÀ0Êý¾ÝºÍ±êÖ¾+Í¨µÀ1Êý¾ÝºÍ±êÖ¾£¬ºóÃæÁ½¸öÊý¾Ý¿ÉÑ¡
    790            float val,val1,co_value,HCL_value,mq3_value;
    791            //½Úµã1--ÎÂÊª¶ÈºÍ¾Æ¾«£¬Ò»Ñõ»¯Ì¼£¬ÂÈ»¯Çâ£¬
    792            
    793            char temp;                   //ÎÂ¶È
    794            unsigned char humi;          //Êª¶È
    795            uint8 PublicFlag=0;         //¸Ã±äÁ¿¼ÇÂ¼ÁËDHT11µÄ×´Ì¬£¨ÊÇ·ñ¶ÁÈ¡³É¹¦)£¬»¹¿ÉÒÔ¼ÇÂ¼ÆäËû×´Ì¬
    796            Transmit_data[27]=1;//½Úµã1±ê¼Ç
   \   00000A   7424         MOV     A,#0x24
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
    797          #if (defined Channel_0_GasSensor_Busy)
    798            float  ADC_Channel_0_Vol=0;             //ADCµçÑ¹
    799            uint16 ADC_Channel_0_Vol_ForTx = 0;    //½«µçÑ¹Öµ³ËÉÏ1000£¬ÓÃÓÚ·¢ËÍ³öÈ¥
    800            uint16 ADC_Channel_0_RegData;          //ADC¼Ä´æÆ÷Êý¾Ý
    801            uint16 Channel_0_GasSenDataSave=0;     //±£´æÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
    802          #endif
    803          
    804            uint8 i=0;                            //Ñ­»·ÒªÓÃµ½
    805            uint8 TxPackLength=0;                 //¼ÇÂ¼°ü³¤¶È
    806            PublicFlag =0;                        //Çå¿Õ±êÖ¾Î»
   \   000012   7E00         MOV     R6,#0x0
    807          
    808            uint8 ADC_Result_ASCII[20];
    809            //ADC²âÊÔ½á¹û£¬Ê¹ÓÃÄÚ²¿²Î¿¼µçÑ¹ÊÇ×î×¼È·µÄ2017 2 19
    810            //×¢Òâ¶Å°îÏßµÄÑ¹½µÐèÒª²¹³¥£¬Êµ¼ÊµçÂ·ÖÐ£¬Îñ±Ø²âÊÔ´«¸ÐÆ÷Òý½Åµ½ADCÒý½ÅµÄÑ¹½µ£¬È»ºóÈí¼þ¼ÓÒÔ²¹³¥¡£2017 2 19
    811            //ÎÂ¶È´«¸ÐÆ÷  DHT11
    812            //DHT11¶ÁÈ¡Ê§°Ü£¬¿ÉÄÜDHT11Ëð»µ£¬¿ÉÄÜDHT11±»°Î³ö»òÕßÁ¬ÏßËÉ¶¯
    813              if(dht11_value(&temp , &humi , DHT11_UINT8) != 0)
                                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000014                ; Setup parameters for call to function dht11_value
   \   000014   7902         MOV     R1,#0x2
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   AC82         MOV     R4,DPL
   \   00001E   AD83         MOV     R5,DPH
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   AA82         MOV     R2,DPL
   \   000025   AB83         MOV     R3,DPH
   \   000027   12....       LCALL   ??dht11_value?relay
   \   00002A   E9           MOV     A,R1
   \   00002B   6014         JZ      ??SampleAPP_SendGasSensorMessage_0
    814              {
    815                temp = DHT11_TEMP_DEFAULT;  //ÉèÖÃÎÂÊª¶ÈÎªÄ¬ÈÏÖµ
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7419         MOV     A,#0x19
   \   000034   F0           MOVX    @DPTR,A
    816                humi = DHT11_HUMI_DEFAULT;
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   7441         MOV     A,#0x41
   \   00003D   F0           MOVX    @DPTR,A
    817                PublicFlag |= (1<<0);     //ÖÃÎ»±êÖ¾Î»
   \   00003E   0E           INC     R6
   \   00003F   8008         SJMP    ??SampleAPP_SendGasSensorMessage_1
    818              }
    819              
    820              if(temp != 0)
   \                     ??SampleAPP_SendGasSensorMessage_0:
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   600A         JZ      ??SampleAPP_SendGasSensorMessage_2
    821                  
    822                temp_f = temp;
   \                     ??SampleAPP_SendGasSensorMessage_1:
   \   000049   7401         MOV     A,#0x1
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   90....       MOV     DPTR,#temp_f
   \   000052   F0           MOVX    @DPTR,A
    823              
    824              if(humi != 0)
   \                     ??SampleAPP_SendGasSensorMessage_2:
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6004         JZ      ??SampleAPP_SendGasSensorMessage_3
    825                  
    826                humi_f = humi;
   \   00005C   90....       MOV     DPTR,#humi_f
   \   00005F   F0           MOVX    @DPTR,A
    827              
    828              Transmit_data[TxPackLength] = (uint8)temp_f , TxPackLength++;                     //×°ÈëÎÂ¶È,TxPackLength=0
   \                     ??SampleAPP_SendGasSensorMessage_3:
   \   000060   90....       MOV     DPTR,#temp_f
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C0E0         PUSH    A
   \   000066   7409         MOV     A,#0x9
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   D0E0         POP     A
   \   00006D   F0           MOVX    @DPTR,A
    829              Transmit_data[TxPackLength] = (uint8)humi_f , TxPackLength++;                     //×°ÈëÊª¶È
   \   00006E   90....       MOV     DPTR,#humi_f
   \   000071   E0           MOVX    A,@DPTR
   \   000072   C0E0         PUSH    A
   \   000074   740A         MOV     A,#0xa
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   D0E0         POP     A
   \   00007B   F0           MOVX    @DPTR,A
    830              Transmit_data[TxPackLength] =  PublicFlag , TxPackLength++;                    //×°Èë¹«¹²±êÖ¾Î»
   \   00007C   740B         MOV     A,#0xb
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   EE           MOV     A,R6
   \   000082   F0           MOVX    @DPTR,A
    831          
    832          //Èç¹ûÓÃµ½ÁËchanne0Ôò±àÒë£¬Ê¹ÓÃP0.0£¬½«Í¨µÀ0Êý¾ÝºÍ±êÖ¾Î»×°Èë·¢ËÍ°üÖÐ
    833          #if (defined Channel_0_GasSensor_Busy)
    834              //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
    835              ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_2,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_1£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
   \   000083                ; Setup parameters for call to function HalAdcRead
   \   000083   7A04         MOV     R2,#0x4
   \   000085   7902         MOV     R1,#0x2
   \   000087   12....       LCALL   ?Subroutine10 & 0xFFFF
    836              for(i=0;i<10;i++)
    837              {
    838                ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_2,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_1,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
    839                ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
   \                     ??CrossCallReturnLabel_23:
   \   00008A                ; Setup parameters for call to function HalAdcRead
   \   00008A   7A04         MOV     R2,#0x4
   \   00008C   7902         MOV     R1,#0x2
   \   00008E   12....       LCALL   ?Subroutine9 & 0xFFFF
    840              }
   \                     ??CrossCallReturnLabel_19:
   \   000091   70F7         JNZ     ??CrossCallReturnLabel_23
    841              ADC_Channel_0_Vol =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ
    842              ADC_Channel_0_Vol-=0.79;   //È¥³ýÁãµãÆ¯ÒÆ
   \   000093   8E..         MOV     ?V0 + 0,R6
   \   000095   8F..         MOV     ?V0 + 1,R7
   \   000097   E4           CLR     A
   \   000098   F5..         MOV     ?V0 + 2,A
   \   00009A   F5..         MOV     ?V0 + 3,A
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?UL_TO_FLT
   \   0000A1   90....       MOV     DPTR,#__Constant_4051eb85
   \   0000A4   78..         MOV     R0,#?V0 + 4
   \   0000A6   12....       LCALL   ?L_MOV_X
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   79..         MOV     R1,#?V0 + 4
   \   0000AD   12....       LCALL   ?FLT_MUL
   \   0000B0   90....       MOV     DPTR,#__Constant_39000000
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?L_MOV_X
   \   0000B8   78..         MOV     R0,#?V0 + 0
   \   0000BA   79..         MOV     R1,#?V0 + 4
   \   0000BC   12....       LCALL   ?FLT_MUL
   \   0000BF   90....       MOV     DPTR,#__Constant_bf4a3d71
   \   0000C2   78..         MOV     R0,#?V0 + 4
   \   0000C4   12....       LCALL   ?L_MOV_X
   \   0000C7   78..         MOV     R0,#?V0 + 0
   \   0000C9   79..         MOV     R1,#?V0 + 4
   \   0000CB   12....       LCALL   ?FLT_ADD
    843              ADC_Channel_0_Vol_ForTx = (ADC_Channel_0_Vol * 1000);
                                             ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   0000CE   85....       MOV     ?V0 + 4,?V0 + 0
   \   0000D1   85....       MOV     ?V0 + 5,?V0 + 1
   \   0000D4   85....       MOV     ?V0 + 6,?V0 + 2
   \   0000D7   85....       MOV     ?V0 + 7,?V0 + 3
   \   0000DA   90....       MOV     DPTR,#__Constant_447a0000
   \   0000DD   78..         MOV     R0,#?V0 + 8
   \   0000DF   12....       LCALL   ?L_MOV_X
   \   0000E2   78..         MOV     R0,#?V0 + 4
   \   0000E4   79..         MOV     R1,#?V0 + 8
   \   0000E6   12....       LCALL   ?FLT_MUL
   \   0000E9   78..         MOV     R0,#?V0 + 4
   \   0000EB   12....       LCALL   ?FLT_TO_L
   \   0000EE   AE..         MOV     R6,?V0 + 4
    844              if(ADC_Channel_0_Vol_ForTx<0) ADC_Channel_0_Vol_ForTx=0;
                                               ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
    845              
    846             // ADC_Channel_0_Vol_ForTx =3215;//ÓÃÓÚtext
    847          
    848              //Gas sensor»ñÈ¡Êý¾Ý,±£´æÆðÀ´
    849              Channel_0_GasSenDataSave = (uint16)PointGetConcentrationForChannel_0(ADC_Channel_0_Vol,temp,humi);
   \   0000F0                ; Setup parameters for indirect call
   \   0000F0   85..82       MOV     DPL,?XSP + 0
   \   0000F3   85..83       MOV     DPH,?XSP + 1
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F5..         MOV     ?V0 + 4,A
   \   0000F9   78..         MOV     R0,#?V0 + 4
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FE   7402         MOV     A,#0x2
   \   000100   12....       LCALL   ?XSTACK_DISP0_8
   \   000103   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000106   12....       LCALL   ?CALL_IND
   \   000109   7401         MOV     A,#0x1
   \   00010B   12....       LCALL   ?DEALLOC_XSTACK8
    850          
    851              //Transmit_data[TxPackLength] = HI_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
    852              //Transmit_data[TxPackLength] = LO_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
    853              Transmit_data[TxPackLength] = ADC_Channel_0_Vol_ForTx>>8 , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
   \   00010E   740C         MOV     A,#0xc
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   E5..         MOV     A,?V0 + 5
   \   000115   F0           MOVX    @DPTR,A
    854              Transmit_data[TxPackLength] = (ADC_Channel_0_Vol_ForTx&0x00ff) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
   \   000116   740D         MOV     A,#0xd
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   EE           MOV     A,R6
   \   00011C   F0           MOVX    @DPTR,A
    855              Transmit_data[TxPackLength] = HI_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶È¸ß°ËÎ»
   \   00011D   740E         MOV     A,#0xe
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   EB           MOV     A,R3
   \   000123   F0           MOVX    @DPTR,A
    856              Transmit_data[TxPackLength] = LO_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶ÈµÍ°ËÎ»
   \   000124   740F         MOV     A,#0xf
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   EA           MOV     A,R2
   \   00012A   F0           MOVX    @DPTR,A
    857              Transmit_data[TxPackLength] = *GasSensorFlagForChannel_0, TxPackLength++;                  //×°Èë±êÖ¾Î»
   \   00012B   90....       MOV     DPTR,#GasSensorFlagForChannel_0
   \   00012E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000131   C0E0         PUSH    A
   \   000133   7410         MOV     A,#0x10
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   D0E0         POP     A
   \   00013A   F0           MOVX    @DPTR,A
    858          #endif
    859              
    860              //COÊý¾Ý²É¼¯ 
    861              uint8 data[7];
    862              char num;
    863              ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_0£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
   \   00013B                ; Setup parameters for call to function HalAdcRead
   \   00013B   7A04         MOV     R2,#0x4
   \   00013D   7900         MOV     R1,#0x0
   \   00013F   12....       LCALL   ?Subroutine10 & 0xFFFF
    864              for(i=0;i<10;i++)
    865              {
    866                ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_0,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
    867                ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
   \                     ??CrossCallReturnLabel_24:
   \   000142                ; Setup parameters for call to function HalAdcRead
   \   000142   7A04         MOV     R2,#0x4
   \   000144   7900         MOV     R1,#0x0
   \   000146   12....       LCALL   ?Subroutine9 & 0xFFFF
    868              }
   \                     ??CrossCallReturnLabel_20:
   \   000149   70F7         JNZ     ??CrossCallReturnLabel_24
    869              co_value =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ*/
   \   00014B   8E..         MOV     ?V0 + 0,R6
   \   00014D   8F..         MOV     ?V0 + 1,R7
   \   00014F   E4           CLR     A
   \   000150   F5..         MOV     ?V0 + 2,A
   \   000152   F5..         MOV     ?V0 + 3,A
   \   000154   78..         MOV     R0,#?V0 + 0
   \   000156   12....       LCALL   ?UL_TO_FLT
   \   000159   90....       MOV     DPTR,#__Constant_4051eb85
   \   00015C   78..         MOV     R0,#?V0 + 4
   \   00015E   12....       LCALL   ?L_MOV_X
   \   000161   78..         MOV     R0,#?V0 + 0
   \   000163   79..         MOV     R1,#?V0 + 4
   \   000165   12....       LCALL   ?FLT_MUL
   \   000168   90....       MOV     DPTR,#__Constant_39000000
   \   00016B   78..         MOV     R0,#?V0 + 4
   \   00016D   12....       LCALL   ?L_MOV_X
   \   000170   78..         MOV     R0,#?V0 + 0
   \   000172   79..         MOV     R1,#?V0 + 4
   \   000174   12....       LCALL   ?FLT_MUL
    870              //co_value -=1.292;//È¥³ýÁãµã
    871              //co_value  =(210.0/221.0)*co_value*1000-1050/221;
    872              if(co_value<0) co_value=0;
   \   000177   90....       MOV     DPTR,#__Constant_0
   \   00017A   78..         MOV     R0,#?V0 + 4
   \   00017C   12....       LCALL   ?L_MOV_X
   \   00017F   78..         MOV     R0,#?V0 + 0
   \   000181   79..         MOV     R1,#?V0 + 4
   \   000183   12....       LCALL   ?FLT_LT
   \   000186   5008         JNC     ??SampleAPP_SendGasSensorMessage_4
   \   000188   90....       MOV     DPTR,#__Constant_0
   \   00018B   78..         MOV     R0,#?V0 + 0
   \   00018D   12....       LCALL   ?L_MOV_X
    873              memset(data,0,7);
   \                     ??SampleAPP_SendGasSensorMessage_4:
   \   000190                ; Setup parameters for call to function memset
   \   000190   75..07       MOV     ?V0 + 4,#0x7
   \   000193   75..00       MOV     ?V0 + 5,#0x0
   \   000196   78..         MOV     R0,#?V0 + 4
   \   000198   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019B   7C00         MOV     R4,#0x0
   \   00019D   7D00         MOV     R5,#0x0
   \   00019F   7404         MOV     A,#0x4
   \   0001A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A4   AA82         MOV     R2,DPL
   \   0001A6   AB83         MOV     R3,DPH
   \   0001A8   12....       LCALL   ??memset?relay
   \   0001AB   7402         MOV     A,#0x2
   \   0001AD   12....       LCALL   ?DEALLOC_XSTACK8
    874              sprintf(data,"%.1f",co_value);
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   0001B0                ; Setup parameters for call to function sprintf
   \   0001B0   78..         MOV     R0,#?V0 + 0
   \   0001B2   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0001B5   7C..         MOV     R4,#`?<Constant "%.1f">` & 0xff
   \   0001B7   7D..         MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
   \   0001B9   7406         MOV     A,#0x6
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0001C1   12....       LCALL   ?DEALLOC_XSTACK8
    875              for(num=0;num<=6;num++)//×°COµÄÊý¾Ý
   \   0001C4   7A00         MOV     R2,#0x0
    876              {
    877                Transmit_data[num+8]=data[num];
   \                     ??SampleAPP_SendGasSensorMessage_5:
   \   0001C6   8A82         MOV     DPL,R2
   \   0001C8   A882         MOV     R0,DPL
   \   0001CA   7402         MOV     A,#0x2
   \   0001CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CF   12....       LCALL   ?Subroutine11 & 0xFFFF
    878              }
   \                     ??CrossCallReturnLabel_27:
   \   0001D2   C0E0         PUSH    A
   \   0001D4   7409         MOV     A,#0x9
   \   0001D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D9   E582         MOV     A,DPL
   \   0001DB   28           ADD     A,R0
   \   0001DC   F582         MOV     DPL,A
   \   0001DE   E583         MOV     A,DPH
   \   0001E0   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0001E3   A3           INC     DPTR
   \   0001E4   A3           INC     DPTR
   \   0001E5   A3           INC     DPTR
   \   0001E6   A3           INC     DPTR
   \   0001E7   A3           INC     DPTR
   \   0001E8   A3           INC     DPTR
   \   0001E9   A3           INC     DPTR
   \   0001EA   A3           INC     DPTR
   \   0001EB   D0E0         POP     A
   \   0001ED   F0           MOVX    @DPTR,A
   \   0001EE   0A           INC     R2
   \   0001EF   EA           MOV     A,R2
   \   0001F0   C3           CLR     C
   \   0001F1   9407         SUBB    A,#0x7
   \   0001F3   40D1         JC      ??SampleAPP_SendGasSensorMessage_5
    879              
    880              //HCLÊý¾Ý²É¼¯
    881              //val1=ValreadP0_0();//¶ÁÈ¡HCLµÄµçÑ¹Öµ
    882              //if(val1>3.6)//Êý¾ÝÅÅ²é
    883              //    val1=0;
    884              //HCL_value = (val1*1000-330)*20/1427;
    885              //HCL_value=val;  //´Ë¾äÓÃÓÚ²âÊÔ£¬¼ÇµÃÉ¾³ý
    886              ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_4£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
   \   0001F5                ; Setup parameters for call to function HalAdcRead
   \   0001F5   7A04         MOV     R2,#0x4
   \   0001F7   7904         MOV     R1,#0x4
   \   0001F9   12....       LCALL   ?Subroutine10 & 0xFFFF
    887              for(i=0;i<10;i++)
    888              {
    889                ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
    890                ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
   \                     ??CrossCallReturnLabel_25:
   \   0001FC                ; Setup parameters for call to function HalAdcRead
   \   0001FC   7A04         MOV     R2,#0x4
   \   0001FE   7904         MOV     R1,#0x4
   \   000200   12....       LCALL   ?Subroutine9 & 0xFFFF
    891              }
   \                     ??CrossCallReturnLabel_21:
   \   000203   70F7         JNZ     ??CrossCallReturnLabel_25
    892              HCL_value =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ*/
   \   000205   8E..         MOV     ?V0 + 0,R6
   \   000207   8F..         MOV     ?V0 + 1,R7
   \   000209   E4           CLR     A
   \   00020A   F5..         MOV     ?V0 + 2,A
   \   00020C   F5..         MOV     ?V0 + 3,A
   \   00020E   78..         MOV     R0,#?V0 + 0
   \   000210   12....       LCALL   ?UL_TO_FLT
   \   000213   90....       MOV     DPTR,#__Constant_4051eb85
   \   000216   78..         MOV     R0,#?V0 + 4
   \   000218   12....       LCALL   ?L_MOV_X
   \   00021B   78..         MOV     R0,#?V0 + 0
   \   00021D   79..         MOV     R1,#?V0 + 4
   \   00021F   12....       LCALL   ?FLT_MUL
   \   000222   90....       MOV     DPTR,#__Constant_39000000
   \   000225   78..         MOV     R0,#?V0 + 4
   \   000227   12....       LCALL   ?L_MOV_X
   \   00022A   78..         MOV     R0,#?V0 + 0
   \   00022C   79..         MOV     R1,#?V0 + 4
   \   00022E   12....       LCALL   ?FLT_MUL
    893             // HCL_value-=0.04;  //È¥³ýÁãµãÆ¯ÒÆ
    894              //HCL_value=(1.0/30.0)*HCL_value*1000-8;
    895              if(HCL_value<0) HCL_value=0;
   \   000231   90....       MOV     DPTR,#__Constant_0
   \   000234   78..         MOV     R0,#?V0 + 4
   \   000236   12....       LCALL   ?L_MOV_X
   \   000239   78..         MOV     R0,#?V0 + 0
   \   00023B   79..         MOV     R1,#?V0 + 4
   \   00023D   12....       LCALL   ?FLT_LT
   \   000240   5008         JNC     ??SampleAPP_SendGasSensorMessage_6
   \   000242   90....       MOV     DPTR,#__Constant_0
   \   000245   78..         MOV     R0,#?V0 + 0
   \   000247   12....       LCALL   ?L_MOV_X
    896              memset(data,0,7);//Çå³ýÊý×é
   \                     ??SampleAPP_SendGasSensorMessage_6:
   \   00024A                ; Setup parameters for call to function memset
   \   00024A   75..07       MOV     ?V0 + 4,#0x7
   \   00024D   75..00       MOV     ?V0 + 5,#0x0
   \   000250   78..         MOV     R0,#?V0 + 4
   \   000252   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000255   7C00         MOV     R4,#0x0
   \   000257   7D00         MOV     R5,#0x0
   \   000259   7404         MOV     A,#0x4
   \   00025B   12....       LCALL   ?XSTACK_DISP0_8
   \   00025E   AA82         MOV     R2,DPL
   \   000260   AB83         MOV     R3,DPH
   \   000262   12....       LCALL   ??memset?relay
   \   000265   7402         MOV     A,#0x2
   \   000267   12....       LCALL   ?DEALLOC_XSTACK8
    897              sprintf(data,"%.1f",HCL_value);//½«Êý¾Ý×ª»¯³É×Ö·û´®£¬²¢ÇÒ×°½øÊý×éÀïÃæ
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   00026A                ; Setup parameters for call to function sprintf
   \   00026A   78..         MOV     R0,#?V0 + 0
   \   00026C   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00026F   7C..         MOV     R4,#`?<Constant "%.1f">` & 0xff
   \   000271   7D..         MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
   \   000273   7406         MOV     A,#0x6
   \   000275   12....       LCALL   ?XSTACK_DISP0_8
   \   000278   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00027B   12....       LCALL   ?DEALLOC_XSTACK8
    898              
    899              for(num=0;num<=5;num++)//×°HCLµÄÊý¾Ý
   \   00027E   7A00         MOV     R2,#0x0
    900              {
    901                Transmit_data[num+15]=data[num];
   \                     ??SampleAPP_SendGasSensorMessage_7:
   \   000280   8A82         MOV     DPL,R2
   \   000282   A882         MOV     R0,DPL
   \   000284   7402         MOV     A,#0x2
   \   000286   12....       LCALL   ?XSTACK_DISP0_8
   \   000289   12....       LCALL   ?Subroutine11 & 0xFFFF
    902              }
   \                     ??CrossCallReturnLabel_28:
   \   00028C   C0E0         PUSH    A
   \   00028E   7409         MOV     A,#0x9
   \   000290   12....       LCALL   ?XSTACK_DISP0_8
   \   000293   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000296   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000299   D0E0         POP     A
   \   00029B   F0           MOVX    @DPTR,A
   \   00029C   0A           INC     R2
   \   00029D   EA           MOV     A,R2
   \   00029E   C3           CLR     C
   \   00029F   9406         SUBB    A,#0x6
   \   0002A1   40DD         JC      ??SampleAPP_SendGasSensorMessage_7
    903              
    904              //¾Æ¾«mq3Êý¾Ý²É¼¯
    905              ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_5,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_5£¬14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
   \   0002A3                ; Setup parameters for call to function HalAdcRead
   \   0002A3   7A04         MOV     R2,#0x4
   \   0002A5   7905         MOV     R1,#0x5
   \   0002A7   12....       LCALL   ?Subroutine10 & 0xFFFF
    906              for(i=0;i<10;i++)
    907              {
    908                ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_5,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_5,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
    909                ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
   \                     ??CrossCallReturnLabel_26:
   \   0002AA                ; Setup parameters for call to function HalAdcRead
   \   0002AA   7A04         MOV     R2,#0x4
   \   0002AC   7905         MOV     R1,#0x5
   \   0002AE   12....       LCALL   ?Subroutine9 & 0xFFFF
    910              }
   \                     ??CrossCallReturnLabel_22:
   \   0002B1   70F7         JNZ     ??CrossCallReturnLabel_26
    911              val =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192-0.4;         //¼ÆËãµÃµçÑ¹Öµ
   \   0002B3   8E..         MOV     ?V0 + 0,R6
   \   0002B5   8F..         MOV     ?V0 + 1,R7
   \   0002B7   E4           CLR     A
   \   0002B8   F5..         MOV     ?V0 + 2,A
   \   0002BA   F5..         MOV     ?V0 + 3,A
   \   0002BC   78..         MOV     R0,#?V0 + 0
   \   0002BE   12....       LCALL   ?UL_TO_FLT
   \   0002C1   90....       MOV     DPTR,#__Constant_4051eb85
   \   0002C4   78..         MOV     R0,#?V0 + 4
   \   0002C6   12....       LCALL   ?L_MOV_X
   \   0002C9   78..         MOV     R0,#?V0 + 0
   \   0002CB   79..         MOV     R1,#?V0 + 4
   \   0002CD   12....       LCALL   ?FLT_MUL
   \   0002D0   90....       MOV     DPTR,#__Constant_39000000
   \   0002D3   78..         MOV     R0,#?V0 + 4
   \   0002D5   12....       LCALL   ?L_MOV_X
   \   0002D8   78..         MOV     R0,#?V0 + 0
   \   0002DA   79..         MOV     R1,#?V0 + 4
   \   0002DC   12....       LCALL   ?FLT_MUL
   \   0002DF   90....       MOV     DPTR,#__Constant_becccccd
   \   0002E2   78..         MOV     R0,#?V0 + 4
   \   0002E4   12....       LCALL   ?L_MOV_X
   \   0002E7   78..         MOV     R0,#?V0 + 0
   \   0002E9   79..         MOV     R1,#?V0 + 4
   \   0002EB   12....       LCALL   ?FLT_ADD
    912              
    913              //mq3_value=val*(8.0/500.0)-1.6/500.0;
    914              mq3_value=val;
   \   0002EE   85....       MOV     ?V0 + 4,?V0 + 0
   \   0002F1   85....       MOV     ?V0 + 5,?V0 + 1
   \   0002F4   85....       MOV     ?V0 + 6,?V0 + 2
   \   0002F7   85....       MOV     ?V0 + 7,?V0 + 3
    915              
    916              if(((uint16)PointGetConcentrationForChannel_0(val,temp,humi))!=0)
   \   0002FA                ; Setup parameters for indirect call
   \   0002FA   85..82       MOV     DPL,?XSP + 0
   \   0002FD   85..83       MOV     DPH,?XSP + 1
   \   000300   E0           MOVX    A,@DPTR
   \   000301   F5..         MOV     ?V0 + 8,A
   \   000303   78..         MOV     R0,#?V0 + 8
   \   000305   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000308   7402         MOV     A,#0x2
   \   00030A   12....       LCALL   ?XSTACK_DISP0_8
   \   00030D   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000310   12....       LCALL   ?CALL_IND
   \   000313   7401         MOV     A,#0x1
   \   000315   12....       LCALL   ?DEALLOC_XSTACK8
   \   000318   8B..         MOV     ?V0 + 9,R3
   \   00031A   EA           MOV     A,R2
   \   00031B   45..         ORL     A,?V0 + 9
   \   00031D   602C         JZ      ??SampleAPP_SendGasSensorMessage_8
    917                  mq3_value = (uint16)PointGetConcentrationForChannel_0(val,temp,humi);
   \   00031F                ; Setup parameters for indirect call
   \   00031F   85..82       MOV     DPL,?XSP + 0
   \   000322   85..83       MOV     DPH,?XSP + 1
   \   000325   E0           MOVX    A,@DPTR
   \   000326   F5..         MOV     ?V0 + 4,A
   \   000328   78..         MOV     R0,#?V0 + 4
   \   00032A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00032D   7402         MOV     A,#0x2
   \   00032F   12....       LCALL   ?XSTACK_DISP0_8
   \   000332   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000335   12....       LCALL   ?CALL_IND
   \   000338   7401         MOV     A,#0x1
   \   00033A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00033D   8A..         MOV     ?V0 + 4,R2
   \   00033F   8B..         MOV     ?V0 + 5,R3
   \   000341   E4           CLR     A
   \   000342   F5..         MOV     ?V0 + 6,A
   \   000344   F5..         MOV     ?V0 + 7,A
   \   000346   78..         MOV     R0,#?V0 + 4
   \   000348   12....       LCALL   ?UL_TO_FLT
    918              
    919              memset(data,0,7);//Çå³ýÊý×é
   \                     ??SampleAPP_SendGasSensorMessage_8:
   \   00034B                ; Setup parameters for call to function memset
   \   00034B   75..07       MOV     ?V0 + 0,#0x7
   \   00034E   75..00       MOV     ?V0 + 1,#0x0
   \   000351   78..         MOV     R0,#?V0 + 0
   \   000353   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000356   7C00         MOV     R4,#0x0
   \   000358   7D00         MOV     R5,#0x0
   \   00035A   7404         MOV     A,#0x4
   \   00035C   12....       LCALL   ?XSTACK_DISP0_8
   \   00035F   AA82         MOV     R2,DPL
   \   000361   AB83         MOV     R3,DPH
   \   000363   12....       LCALL   ??memset?relay
   \   000366   7402         MOV     A,#0x2
   \   000368   12....       LCALL   ?DEALLOC_XSTACK8
    920              sprintf(data,"%.1f",mq3_value);//½«Êý¾Ý×ª»¯³É×Ö·û´®£¬²¢ÇÒ×°½øÊý×éÀïÃæ
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

    float val,val1,co_value,HCL_value,mq3_value;
              ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",790  Warning[Pe177]: 
          variable "val1" was declared but never referenced

    uint8 ADC_Result_ASCII[20];
          ^
"C:\Users\77564\Desktop\¼à²âÈÕ¼Ç\¸ÄÕýµÄ³ÌÐò\¸Ä×é²¥+CO+HCL\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",808  Warning[Pe177]: 
          variable "ADC_Result_ASCII" was declared but never referenced
   \   00036B                ; Setup parameters for call to function sprintf
   \   00036B   78..         MOV     R0,#?V0 + 4
   \   00036D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000370   7C..         MOV     R4,#`?<Constant "%.1f">` & 0xff
   \   000372   7D..         MOV     R5,#(`?<Constant "%.1f">` >> 8) & 0xff
   \   000374   7406         MOV     A,#0x6
   \   000376   12....       LCALL   ?XSTACK_DISP0_8
   \   000379   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00037C   12....       LCALL   ?DEALLOC_XSTACK8
    921              for(num=0;num<=5;num++)//×°MQ3µÄÊý¾Ý
   \   00037F   7A00         MOV     R2,#0x0
    922              {
    923                Transmit_data[num+21]=data[num];
   \                     ??SampleAPP_SendGasSensorMessage_9:
   \   000381   8A82         MOV     DPL,R2
   \   000383   A882         MOV     R0,DPL
   \   000385   7402         MOV     A,#0x2
   \   000387   12....       LCALL   ?XSTACK_DISP0_8
   \   00038A   12....       LCALL   ?Subroutine11 & 0xFFFF
    924              }
   \                     ??CrossCallReturnLabel_29:
   \   00038D   C0E0         PUSH    A
   \   00038F   7409         MOV     A,#0x9
   \   000391   12....       LCALL   ?XSTACK_DISP0_8
   \   000394   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000397   2415         ADD     A,#0x15
   \   000399   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00039C   D0E0         POP     A
   \   00039E   F0           MOVX    @DPTR,A
   \   00039F   0A           INC     R2
   \   0003A0   EA           MOV     A,R2
   \   0003A1   C3           CLR     C
   \   0003A2   9406         SUBB    A,#0x6
   \   0003A4   40DB         JC      ??SampleAPP_SendGasSensorMessage_9
    925              
    926              //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
    927              if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
    928                               SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
    929                               28,                   //Êý¾ÝÁ¿£¨³¤¶È£©
    930                               Transmit_data,                  //Êý¾ÝÊ×µØÖ·
    931                               &SampleApp_TransID,
    932                               AF_DISCV_ROUTE,
    933                               AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0003A6                ; Setup parameters for call to function AF_DataRequest
   \   0003A6   75..1E       MOV     ?V0 + 0,#0x1e
   \   0003A9   78..         MOV     R0,#?V0 + 0
   \   0003AB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003AE   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0003B1   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0003B4   78..         MOV     R0,#?V0 + 0
   \   0003B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003B9   740C         MOV     A,#0xc
   \   0003BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003BE   8582..       MOV     ?V0 + 0,DPL
   \   0003C1   8583..       MOV     ?V0 + 1,DPH
   \   0003C4   78..         MOV     R0,#?V0 + 0
   \   0003C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003C9   75..1C       MOV     ?V0 + 0,#0x1c
   \   0003CC   75..00       MOV     ?V0 + 1,#0x0
   \   0003CF   78..         MOV     R0,#?V0 + 0
   \   0003D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003D4   75..06       MOV     ?V0 + 0,#0x6
   \   0003D7   78..         MOV     R0,#?V0 + 0
   \   0003D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003DC   7920         MOV     R1,#0x20
   \   0003DE   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0003E0   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0003E2   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   0003E4   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   0003E6   12....       LCALL   ??AF_DataRequest?relay
   \   0003E9   7409         MOV     A,#0x9
   \   0003EB   12....       LCALL   ?DEALLOC_XSTACK8
    934              {
    935              }
    936          }
   \   0003EE   7425         MOV     A,#0x25
   \   0003F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003F3   7F0C         MOV     R7,#0xc
   \   0003F5   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F8           MOV     R0,A
   \   000004   E583         MOV     A,DPH
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ??HalAdcRead?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   AE..         MOV     R6,?V0 + 0
   \   000009   AF..         MOV     R7,?V0 + 1
   \   00000B   75..0A       MOV     ?V0 + 0,#0xa
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ??HalAdcRead?relay
   \   000003   8A..         MOV     ?V0 + 2,R2
   \   000005   8B..         MOV     ?V0 + 3,R3
   \   000007   EE           MOV     A,R6
   \   000008   25..         ADD     A,?V0 + 2
   \   00000A   FE           MOV     R6,A
   \   00000B   EF           MOV     A,R7
   \   00000C   35..         ADDC    A,?V0 + 3
   \   00000E   C3           CLR     C
   \   00000F   13           RRC     A
   \   000010   FF           MOV     R7,A
   \   000011   EE           MOV     A,R6
   \   000012   13           RRC     A
   \   000013   FE           MOV     R6,A
   \   000014   15..         DEC     ?V0 + 0
   \   000016   E5..         MOV     A,?V0 + 0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   AA..         MOV     R2,?V0 + 0
   \   000004   AB..         MOV     R3,?V0 + 1
   \   000006   AC..         MOV     R4,?V0 + 2
   \   000008   AD..         MOV     R5,?V0 + 3
   \   00000A   90....       MOV     DPTR,#PointGetConcentrationForChannel_0
   \   00000D   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000010   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for PointGetConcentrationForChan`:
   \   000000   ....         DW ??TGS822GetConcentration?relay

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for GasSensorFlagForChannel_0>`:
   \   000000   ....         DW TGS822GasSen_Flag

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleAPP_SendGasSensorMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleAPP_SendGasSensorMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World\\n">`:
   \   000000   48656C6C     DB "Hello World\012"
   \            6F20576F
   \            726C640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TEMP\\243\\272%d C\\r\\n">`:
   \   000000   54454D50     DB "TEMP\243\272%d C\015\012"
   \            A3BA2564
   \            20430D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HUMI\\243\\272%dRH\\r\\n">`:
   \   000000   48554D49     DB "HUMI\243\272%dRH\015\012"
   \            A3BA2564
   \            52480D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DHT11 Error!\\r\\n">`:
   \   000000   44485431     DB "DHT11 Error!\015\012"
   \            31204572
   \            726F7221
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "vol0\\243\\272%.3fV\\r\\n">`:
   \   000000   766F6C30     DB "vol0\243\272%.3fV\015\012"
   \            A3BA252E
   \            3366560D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Level: \\303\\273\\323\\320\\316\\333\\31`:
   \   000000   4C657665     DB "Level: \303\273\323\320\316\333\310\276\015\012"
   \            6C3A20C3
   \            BBD3D0CE
   \            DBC8BE0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Level: \\307\\341\\266\\310\\316\\333\\31`:
   \   000000   4C657665     DB "Level: \307\341\266\310\316\333\310\276\015\012"
   \            6C3A20C7
   \            E1B6C8CE
   \            DBC8BE0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Level: \\326\\320\\266\\310\\316\\333\\31`:
   \   000000   4C657665     DB "Level: \326\320\266\310\316\333\310\276\015\012"
   \            6C3A20D6
   \            D0B6C8CE
   \            DBC8BE0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Level: \\326\\330\\266\\310\\316\\333\\31`:
   \   000000   4C657665     DB "Level: \326\330\266\310\316\333\310\276\015\012"
   \            6C3A20D6
   \            D8B6C8CE
   \            DBC8BE0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CO:">`:
   \   000000   434F3A00     DB "CO:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ppm">`:
   \   000000   70706D00     DB "ppm"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HCL:">`:
   \   000000   48434C3A     DB "HCL:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AOL:">`:
   \   000000   414F4C3A     DB "AOL:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\306\\373\\323\\315\\320\\271\\302\\251\\r`:
   \   000000   C6FBD3CD     DB "\306\373\323\315\320\271\302\251\015\012"
   \            D0B9C2A9
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\276\\306\\276\\253\\320\\271\\302\\251\\r`:
   \   000000   BEC6BEAB     DB "\276\306\276\253\320\271\302\251\015\012"
   \            D0B9C2A9
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PM2.5:">`:
   \   000000   504D322E     DB "PM2.5:"
   \            353A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ug/m3">`:
   \   000000   75672F6D     DB "ug/m3"
   \            3300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%.1f">`:
   \   000000   252E3166     DB "%.1f"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_447a0000:
   \   000000   00007A44     DD 447A0000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f4ccccd:
   \   000000   CDCC4C3F     DD 3F4CCCCDH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3f99999a:
   \   000000   9A99993F     DD 3F99999AH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3fe66666:
   \   000000   6666E63F     DD 3FE66666H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40133333:
   \   000000   33331340     DD 40133333H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e19999b:
   \   000000   9B99193E     DD 3E19999BH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_43160001:
   \   000000   01001643     DD 43160001H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4051eb85:
   \   000000   85EB5140     DD 4051EB85H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_39000000:
   \   000000   00000039     DD 39000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bf4a3d71:
   \   000000   713D4ABF     DD 0BF4A3D71H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_becccccd:
   \   000000   CDCCCCBE     DD 0BECCCCCDH
    937          
    938          /*********************************************************************
    939          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleAPP_SendGasSensorMessage     1      0     78
       -> dht11_value                   0      0    114
       -> HalAdcRead                    0      0    114
       -> HalAdcRead                    0      0    114
       -> HalAdcRead                    0      0    114
       -> HalAdcRead                    0      0    114
       -> memset                        0      0    118
       -> sprintf                       0      0    122
       -> HalAdcRead                    0      0    114
       -> HalAdcRead                    0      0    114
       -> memset                        0      0    118
       -> sprintf                       0      0    122
       -> HalAdcRead                    0      0    114
       -> HalAdcRead                    0      0    114
       -> memset                        0      0    118
       -> sprintf                       0      0    122
       -> AF_DataRequest                0      0    132
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> HalAdcInit                    0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
     SampleApp_MessageMSGCB             1      0     60
       -> sprintf                       0      0     92
       -> strlen                        0      0     88
       -> HalUARTWrite                  0      0     88
       -> sprintf                       0      0     92
       -> strlen                        0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> sprintf                       0      0     96
       -> strlen                        0      0     88
       -> HalUARTWrite                  0      0     88
       -> sprintf                       0      0     88
       -> sprintf                       0      0     88
       -> sprintf                       0      0     88
       -> sprintf                       0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> atof                          0      0     88
       -> atof                          0      0     88
       -> atof                          0      0     88
       -> atof                          0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
       -> HalUARTWrite                  0      0     88
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleAPP_SendGasSensorMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     _A_P1                                             1
     contin                                            1
     contin1                                           1
     send_data_PM25                                    8
     send_data_CO                                      7
     send_data_HCL                                     6
     send_data_MQ3                                     6
     temp_f                                            1
     humi_f                                            1
     flag                                              1
     flag1                                             1
     flag_co                                           1
     flag_hcl                                          1
     flag_aol                                          1
     flag_tgs                                          1
     flag_ch                                           1
     flag_ta                                           1
     p                                                 4
     SampleApp_ClusterList                             6
     SampleApp_SimpleDesc                             12
     SampleApp_epDesc                                  6
     SampleApp_TaskID                                  1
     SampleApp_NwkState                                1
     SampleApp_TransID                                 1
     SampleApp_Periodic_DstAddr                       12
     SampleApp_Flash_DstAddr                          12
     SampleApp_Point_To_Point_DstAddr
                                                      12
     SampleApp_Group                                  18
     SampleAppPeriodicCounter                          1
     SampleAppFlashCounter                             1
     PointGetConcentrationForChannel_0
                                                       2
     GasSensorFlagForChannel_0                         2
     SampleApp_Init                                  194
     SampleApp_ProcessEvent                          152
     SampleApp_MessageMSGCB                          857
     ?Subroutine12                                     9
     ?Subroutine19                                    16
     ?Subroutine7                                     16
     ?Subroutine6                                     14
     ?Subroutine20                                    12
     ?Subroutine4                                      7
     ?Subroutine3                                      2
     ??Subroutine21_0                                  8
     ?Subroutine2                                     14
     ?Subroutine17                                    33
     ?Subroutine1                                      4
     ?Subroutine0                                     17
     ?Subroutine16                                    19
     ?Subroutine14                                    10
     ?Subroutine13                                     2
     ??Subroutine22_0                                  3
     ??Subroutine23_0                                  5
     ?Subroutine8                                      5
     ?Subroutine18                                     9
     SampleAPP_SendGasSensorMessage                 1016
     ?Subroutine15                                    11
     ?Subroutine11                                    13
     ?Subroutine10                                    15
     ?Subroutine9                                     25
     ?Subroutine5                                     17
     ?<Initializer for PointGetConcentrationForChan    2
     ?<Initializer for GasSensorFlagForChannel_0>      2
     ??SampleApp_Init?relay                            6
     ??SampleApp_ProcessEvent?relay                    6
     ??SampleApp_MessageMSGCB?relay                    6
     ??SampleAPP_SendGasSensorMessage?relay            6
     ?<Constant "Hello World\n">                      13
     ?<Constant "Group 1">                             8
     ?<Constant "TEMP\243\272%d C\r\n">               13
     ?<Constant "HUMI\243\272%dRH\r\n">               13
     ?<Constant "DHT11 Error!\r\n">                   15
     ?<Constant "vol0\243\272%.3fV\r\n">              14
     ?<Constant "Level: \303\273\323\320\316\333\31   18
     ?<Constant "Level: \307\341\266\310\316\333\31   18
     ?<Constant "Level: \326\320\266\310\316\333\31   18
     ?<Constant "Level: \326\330\266\310\316\333\31   18
     ?<Constant "CO:">                                 4
     ?<Constant "ppm">                                 4
     ?<Constant "\r\n">                                3
     ?<Constant "HCL:">                                5
     ?<Constant "AOL:">                                5
     ?<Constant "\306\373\323\315\320\271\302\251\r   11
     ?<Constant "\276\306\276\253\320\271\302\251\r   11
     ?<Constant "PM2.5:">                              7
     ?<Constant "ug/m3">                               6
     ?<Constant "%.1f">                                5
     __Constant_447a0000                               4
     __Constant_3f4ccccd                               4
     __Constant_3f99999a                               4
     __Constant_3fe66666                               4
     __Constant_40133333                               4
     __Constant_3e19999b                               4
     __Constant_43160001                               4
     __Constant_4051eb85                               4
     __Constant_39000000                               4
     __Constant_bf4a3d71                               4
     __Constant_0                                      4
     __Constant_becccccd                               4

 
 2 505 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     4 bytes in segment XDATA_I
     4 bytes in segment XDATA_ID
   275 bytes in segment XDATA_ROM_C
   108 bytes in segment XDATA_Z
 
 2 533 bytes of CODE  memory
   227 bytes of CONST memory (+ 48 bytes shared)
     0 bytes of DATA  memory (+  1 byte  shared)
   112 bytes of XDATA memory

Errors: none
Warnings: 20
