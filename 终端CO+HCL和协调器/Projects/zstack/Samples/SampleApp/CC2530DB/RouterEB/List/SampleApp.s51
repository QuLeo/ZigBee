///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        22/Sep/2017  02:37:20 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\Administrator\Desktop\TENZ×é²¥           /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\Source\Samp /
//                          leApp.c                                           /
//    Command line       =  -f "C:\Users\Administrator\Desktop\TENZ×é²¥       /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ  /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wConfig.cfg"              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF00                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\Administrator\De /
//                          sktop\TENZ×é²¥ ¸Ä2\Projects\zstack\Samples\Sample /
//                          App\Source\SampleApp.c" -D ZTOOL_P1 -D MT_TASK    /
//                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                  /
//                          xLCD_SUPPORTED=DEBUG -D HAL_ADC -D                /
//                          Channel_1_For_TGS813 -lC                          /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\Ro /
//                          uterEB\List\" -lA "C:\Users\Administrator\Desktop /
//                          \TENZ×é²¥ ¸Ä2\Projects\zstack\Samples\SampleApp\C /
//                          C2530DB\RouterEB\List\" --diag_suppress           /
//                          Pe001,Pa010 -o "C:\Users\Administrator\Desktop\TE /
//                          NZ×é²¥ ¸Ä2\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\RouterEB\Obj\" -e --no_code_motion --debug   /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\"  /
//                          -I "C:\Users\Administrator\Desktop\TENZ×é²¥       /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \Source\" -I "C:\Users\Administrator\Desktop\TENZ /
//                          ×é²¥ ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\ZMain\TI2530DB\" -I                   /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\include\" -I          /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\" -I  /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\include\" -I          /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\high_level\" -I       /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\" -I  /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\mac\low_level\srf04\singl /
//                          e_chip\" -I "C:\Users\Administrator\Desktop\TENZ× /
//                          é²¥ ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\Components\mt\" -I               /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\osal\include\" -I         /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\saddr\" -I       /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\services\sdata\" -I       /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\af\" -I             /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\nwk\" -I            /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sapi\" -I           /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sec\" -I            /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\sys\" -I            /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\stack\zdo\" -I            /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\" -I                 /
//                          "C:\Users\Administrator\Desktop\TENZ×é²¥          /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\f8w\" -Ohz           /
//    List file          =  C:\Users\Administrator\Desktop\TENZ×é²¥           /
//                          ¸Ä2\Projects\zstack\Samples\SampleApp\CC2530DB\Ro /
//                          uterEB\List\SampleApp.s51                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GetChannel1ADC?relay
        FUNCTION ??GetChannel1ADC?relay,0203H
        PUBLIC ??GetChannel2ADC?relay
        FUNCTION ??GetChannel2ADC?relay,0203H
        PUBLIC ??SampleAPP_SendGasSensorMessage?relay
        FUNCTION ??SampleAPP_SendGasSensorMessage?relay,0203H
        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_SendFlashMessage?relay
        FUNCTION ??SampleApp_SendFlashMessage?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBLIC ??SampleApp_SendPointMessage?relay
        FUNCTION ??SampleApp_SendPointMessage?relay,0203H
        PUBLIC GasSensorFlagForChannel_1
        PUBLIC GetChannel1ADC
        FUNCTION GetChannel1ADC,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC GetChannel2ADC
        FUNCTION GetChannel2ADC,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC PointGetConcentrationForChannel_1
        PUBLIC SampleAPP_SendGasSensorMessage
        FUNCTION SampleAPP_SendGasSensorMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 81, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 115, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_Point_To_Point_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_SendPointMessage
        FUNCTION SampleApp_SendPointMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBWEAK _A_P1
        PUBWEAK __Constant_39000000
        PUBWEAK __Constant_4051eb85
        PUBWEAK __Constant_40533333
        PUBWEAK __Constant_4059999a
        PUBWEAK __Constant_447a0000
        PUBLIC contin
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalAdcInit          SYMBOL "HalAdcInit"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_rand           SYMBOL "osal_rand"
HalAdcRead          SYMBOL "HalAdcRead"
sprintf             SYMBOL "sprintf"
strlen              SYMBOL "strlen"
Onboard_wait        SYMBOL "Onboard_wait"
dht11_value         SYMBOL "dht11_value"
AF_DataRequest      SYMBOL "AF_DataRequest"
HalLedBlink         SYMBOL "HalLedBlink"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalAdcInit?relay  SYMBOL "?relay", HalAdcInit
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
`?<Name TGS813GetConcentrati 28>` SYMBOL "TGS813GetConcentration"
??TGS813GetConcentration?relay SYMBOL "?relay", `?<Name TGS813GetConcentrati 28>`
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??dht11_value?relay SYMBOL "?relay", dht11_value
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
??strlen?relay      SYMBOL "?relay", strlen
GetChannel1ADC      SYMBOL "GetChannel1ADC"
??GetChannel1ADC?relay SYMBOL "?relay", GetChannel1ADC
GetChannel2ADC      SYMBOL "GetChannel2ADC"
??GetChannel2ADC?relay SYMBOL "?relay", GetChannel2ADC
SampleAPP_SendGasSensorMessage SYMBOL "SampleAPP_SendGasSensorMessage"
??SampleAPP_SendGasSensorMessage?relay SYMBOL "?relay", SampleAPP_SendGasSensorMessage
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
??SampleApp_SendFlashMessage?relay SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage
SampleApp_SendPointMessage SYMBOL "SampleApp_SendPointMessage"
??SampleApp_SendPointMessage?relay SYMBOL "?relay", SampleApp_SendPointMessage

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcInit
        FUNCTION HalAdcInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 115, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dht11_value
        FUNCTION dht11_value,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalAdcInit?relay
        FUNCTION ??HalAdcInit?relay,00H
        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??TGS813GetConcentration?relay
        FUNCTION ??TGS813GetConcentration?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??dht11_value?relay
        FUNCTION ??dht11_value?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H
        EXTERN TGS813GasSen_Flag

// C:\Users\Administrator\Desktop\TENZ×é²¥ ¸Ä2\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 
//   65 #include "SampleApp.h"
//   66 #include "SampleAppHw.h"
//   67 
//   68 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 #include "hal_led.h"
//   73 #include "hal_key.h"
//   74 #include "hal_adc.h"
//   75 //´Ë´¦ÓÃÓÚ´®¿Ú
//   76 #include  "MT_UART.h"
//   77 //ÎÂÊª¶È´«¸ÐÆ÷
//   78 #include "dht11.h"
//   79 //CÓïÑÔ±ê×¼¿â
//   80 #include <string.h>
//   81 #include <stdio.h>
//   82 //GasSensor »ñÈ¡Êý¾ÝµÄÍ·ÎÄ¼þ
//   83 #include "TGS813.h"
//   84 #include "TGS822.h"
//   85 
//   86 //CO
//   87 #include <CO.h>
//   88 
//   89 //PM2.5
//   90 #include <PM25.h>
//   91 /*********************************************************************
//   92  * MACROS
//   93  */
//   94 
//   95 
//   96 #define AMS1117_3_ADC_VOL     3.28   //ºê¶¨ÒåAMS1117 3.3 ADC²Î¿¼µçÑ¹£¬¸ÃÖµ¿ÉÄÜÔÚ3.2-3.4¸¡¶¯
//   97 //Èç¹û¶¨ÒåÁËchannel0»òÕßchannel1¸øÆøÌå´«¸ÐÆ÷£¬Ôò
//   98 #if (defined Channel_0_For_TGS813) || (defined Channel_0_For_TGS822)
//   99 #define Channel_0_GasSensor_Busy
//  100 #endif
//  101 #if (defined Channel_1_For_TGS813) || (defined Channel_1_For_TGS822)
//  102 #define Channel_1_GasSensor_Busy
//  103 #endif
//  104 //Èç¹û¶à¸öÆøÌå´«¸ÐÆ÷Í¬Ê±Õ¼ÓÃÍ¬Ò»¸öchannel£¬ÔòÌáÊ¾
//  105 #if (defined Channel_0_For_TGS813) && (defined Channel_0_For_TGS822)
//  106 #error "Channel0 is just for one gas sensor.Check the micro!"
//  107 #endif
//  108 #if (defined Channel_1_For_TGS813) && (defined Channel_1_For_TGS822)
//  109 #error "Channel1 is just for one gas sensor.Check the micro!"
//  110 
//  111 #endif
//  112 #if (!defined Channel_0_GasSensor_Busy) && (!defined Channel_1_GasSensor_Busy)
//  113 #warning "Do you want to use the Gas Sensor? if yes,please define it,if not please ignore this message."
//  114 #endif
//  115 
//  116 // ÉèÖÃ²»Í¬´«¸ÐÆ÷µçÑ¹ãÐÖµ
//  117 // TGS813
//  118 #define TGS813_Safe 0.8
//  119 #define TGS813_Mildly 1.2
//  120 #define TGS813_Moderate 1.8
//  121 #define TGS813_Severe 2.3
//  122 // TGS822
//  123 #define TGS822_Safe 0.8
//  124 #define TGS822_Mildly 1.2
//  125 #define TGS822_Moderate 1.8
//  126 #define TGS822_Severe 2.3
//  127 
//  128 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  129 char contin=0;
contin:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  130 extern uint8 PM_data[6];
//  131 /*********************************************************************
//  132  * CONSTANTS
//  133  */
//  134 
//  135 /*********************************************************************
//  136  * TYPEDEFS
//  137  */
//  138 
//  139 /*********************************************************************
//  140  * GLOBAL VARIABLES
//  141  */
//  142 
//  143 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  144 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 0
//  145 {
//  146   SAMPLEAPP_PERIODIC_CLUSTERID,
//  147   SAMPLEAPP_FLASH_CLUSTERID
//  148 };
//  149 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  150 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 3
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 3
        DATA16
        DW SampleApp_ClusterList
//  151 {
//  152   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  153   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  154   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  155   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  156   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  157   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  158   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  159   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  160   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  161 };
//  162 
//  163 // This is the Endpoint/Interface description.  It is defined here, but
//  164 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  165 // in the structure here and make it a "const" (in code space).  The
//  166 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  167 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  168 
//  169 /*********************************************************************
//  170  * EXTERNAL VARIABLES
//  171  */
//  172 
//  173 /*********************************************************************
//  174  * EXTERNAL FUNCTIONS
//  175  */
//  176 
//  177 /*********************************************************************
//  178  * LOCAL VARIABLES
//  179  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  180 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  181                           // This variable will be received when
//  182                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  183 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  184 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  185 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  186 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  187 afAddrType_t SampleApp_Periodic_DstAddr;
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  188 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  189 afAddrType_t SampleApp_Flash_DstAddr;//×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  190 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  191 afAddrType_t SampleApp_Point_To_Point_DstAddr;
SampleApp_Point_To_Point_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  192 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  193 aps_Group_t SampleApp_Group;//·Ö×éÄÚÈÝ
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  194 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  195 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  196 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  197 
//  198 
//  199 //@huang
//  200 //ÉèÖÃchannel0ºÍchannel1»ñÈ¡ÆøÌåÅ¨¶ÈÖ¸ÏòµÄº¯Êý
//  201 #if (defined Channel_0_For_TGS813)
//  202 int (*PointGetConcentrationForChannel_0)(float ,char ,unsigned char ) = TGS813GetConcentration;
//  203 uint8 *GasSensorFlagForChannel_0 = &TGS813GasSen_Flag;
//  204 #elif ((defined Channel_1_For_TGS813))

        RSEG XDATA_I:XDATA:NOROOT(0)
//  205 int (*PointGetConcentrationForChannel_1)(float ,char ,unsigned char ) = TGS813GetConcentration;
PointGetConcentrationForChannel_1:
        DATA16
        DS 2
        REQUIRE `?<Initializer for PointGetConcentrationForChan`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  206 uint8 *GasSensorFlagForChannel_1 = &TGS813GasSen_Flag;
GasSensorFlagForChannel_1:
        DATA16
        DS 2
        REQUIRE `?<Initializer for GasSensorFlagForChannel_1>`
        REQUIRE __INIT_XDATA_I
//  207 #endif
//  208 #if (defined Channel_0_For_TGS822)
//  209 int (*PointGetConcentrationForChannel_0)(float ,char ,unsigned char ) = TGS822GetConcentration;
//  210 uint8 *GasSensorFlagForChannel_0 = &TGS822GasSen_Flag;
//  211 #elif (defined Channel_1_For_TGS822)
//  212 int (*PointGetConcentrationForChannel_1)(float ,char ,unsigned char ) = TGS822GetConcentration;
//  213 uint8 *GasSensorFlagForChannel_1 = &TGS822GasSen_Flag;
//  214 #endif
//  215 
//  216 
//  217 /*********************************************************************
//  218  * LOCAL FUNCTIONS
//  219  */
//  220 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  221 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  222 void SampleApp_SendPeriodicMessage( void );
//  223 void SampleApp_SendFlashMessage( uint16 flashTime );
//  224 void SampleApp_SendPointMessage( void );
//  225 
//  226 //@huang
//  227 void SampleAPP_SendGasSensorMessage(void);//×Ô¼º¶¨ÒåµÄÊý¾Ý·¢ËÍº¯Êý
//  228 void GetChannel1ADC(void);
//  229 void GetChannel2ADC(void);
//  230 /*********************************************************************
//  231  * NETWORK LAYER CALLBACKS
//  232  */
//  233 
//  234 /*********************************************************************
//  235  * PUBLIC FUNCTIONS
//  236  */
//  237 
//  238 /*********************************************************************
//  239  * @fn      SampleApp_Init
//  240  *
//  241  * @brief   Initialization function for the Generic App Task.
//  242  *          This is called during initialization and should contain
//  243  *          any application specific initialization (ie. hardware
//  244  *          initialization/setup, table initialization, power up
//  245  *          notificaiton ... ).
//  246  *
//  247  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  248  *                    used to send messages and set timers.
//  249  *
//  250  * @return  none
//  251  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  252 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  253 {
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalAdcInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  254   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  255   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  256   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  257 
//  258   MT_UartInit();                //´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  259   MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  260   HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
        MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  261 
//  262   HalAdcInit();                 //ADC²Î¿¼µçÑ¹³õÊ¼»¯£¨Ä¬ÈÏÎªÄÚ²¿²Î¿¼µçÑ¹£©
        ; Setup parameters for call to function HalAdcInit
        LCALL   ??HalAdcInit?relay
//  263   // Device hardware initialization can be added here or in main() (Zmain.c).
//  264   // If the hardware is application specific - add it here.
//  265   // If the hardware is other parts of the device add it in main().
//  266 
//  267  #if defined ( BUILD_ALL_DEVICES )
//  268   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  269   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  270   // together - if they are - we will start up a coordinator. Otherwise,
//  271   // the device will start as a router.
//  272   if ( readCoordinatorJumper() )
//  273     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  274   else
//  275     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  276 #endif // BUILD_ALL_DEVICES
//  277 
//  278 #if defined ( HOLD_AUTO_START )
//  279   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  280   //  from starting the device and wait for the application to
//  281   //  start the device.
//  282   ZDOInitDevice(0);
//  283 #endif
//  284 
//  285   // Setup for the periodic message's destination address
//  286   // Broadcast to everyone
//  287   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  288   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  289   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  290 
//  291   // Setup for the flash command's destination address - Group 1 //×é²¥ÉèÖÃ
//  292   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  293   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  294   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×é²¥ºÅ
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  295   //µã²¥½á¹¹ÌåµÄ³õÊ¼»¯
//  296    // Setup for the point command's destination address
//  297   SampleApp_Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥
        MOV     DPTR,#SampleApp_Point_To_Point_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  298   SampleApp_Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  299   SampleApp_Point_To_Point_DstAddr.addr.shortAddr = 0x0000;           //0x0000 Ä¬ÈÏÊÇÐ­µ÷Æ÷µÄµØÖ·
        MOV     DPTR,#SampleApp_Point_To_Point_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  300   // Fill out the endpoint description.
//  301   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  302   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  303   SampleApp_epDesc.simpleDesc
//  304             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  305   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  306 
//  307   // Register the endpoint description with the AF
//  308   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  309 
//  310   // Register for all key events - This app will handle all key events
//  311   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  312 
//  313   // By default, all devices start out in Group 1
//  314   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  315   osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  316   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  317 
//  318 #if defined ( LCD_SUPPORTED )
//  319   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
//  320 #endif
//  321 
//  322   //Èç¹ûÃ»ÓÐÊ¹ÓÃPA£¬ÔòÁÁµÆ£¨»òÕßÆäËû£©£¬Èç¹ûÊ¹ÓÃÁËPA£¬Ôò...
//  323 #if defined (HAL_PA_LNA)
//  324   HAL_TURN_ON_LED2();
        CLR     0x90.1
//  325 #endif
//  326 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE _A_P1
//  327 
//  328 /*********************************************************************
//  329  * @fn      SampleApp_ProcessEvent
//  330  *
//  331  * @brief   Generic Application Task event processor.  This function
//  332  *          is called to process all events for the task.  Events
//  333  *          include timers, messages and any other user defined events.
//  334  *
//  335  * @param   task_id  - The OSAL assigned task ID.
//  336  * @param   events - events to process.  This is a bit map and can
//  337  *                   contain more than one event.
//  338  *
//  339  * @return  none
//  340  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  341 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  342 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleAPP_SendGasSensorMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  343   afIncomingMSGPacket_t *MSGpkt;
//  344   (void)task_id;  // Intentionally unreferenced parameter
//  345 
//  346   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  347   {
//  348     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  349     while ( MSGpkt )
//  350     {
//  351       switch ( MSGpkt->hdr.event )
//  352       {
//  353         // Received when a key is pressed
//  354         case KEY_CHANGE:
//  355           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  356           break;
//  357 
//  358         // Received when a messages is received (OTA) for this endpoint
//  359         case AF_INCOMING_MSG_CMD:
//  360           SampleApp_MessageMSGCB( MSGpkt );
//  361             //¹¤×÷Ö¸Ê¾µÆ
//  362            //HAL_TOGGLE_LED2();
//  363           break;
//  364 
//  365         // Received whenever the device changes state in the network
//  366         case ZDO_STATE_CHANGE:
//  367           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  368           if ( //(SampleApp_NwkState == DEV_ZB_COORD)||       //Ð­µ÷Æ÷²»ÔÊÐí¶Ô×Ô¼ºµã²¥£¬Ö»ÔÊÐíÂ·ÓÉÆ÷ºÍÖÕ¶Ë¶ÔÐ­µ÷Æ÷µã²¥
//  369               (SampleApp_NwkState == DEV_ROUTER)
//  370               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_4
//  371           {
//  372             // Start sending the periodic message in a regular interval.
//  373             osal_start_timerEx( SampleApp_TaskID,                    //¸Ãº¯Êý¶¨Ê±´¥·¢ÊÂ¼þ
//  374                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,        //²ÎÊýÒÀ´ÎÊÇ¡°ÈÎÎñID¡±
//  375                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );  //¡°×¢²áÊÂ¼þ¡±¡°Ñ­»·Ê±¼ä¡±
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  376           }
//  377           else
//  378           {
//  379             // Device is no longer in the network
//  380           }
//  381           break;
//  382 
//  383         default:
//  384           break;
//  385       }
//  386 
//  387       // Release the memory
//  388       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  389 
//  390       // Next - if one is available
//  391       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#0x5a
        JZ      ??SampleApp_ProcessEvent_7
        ADD     A,#-0x11
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_7:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SampleApp_HandleKeys?relay
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_4
//  392     }
//  393 
//  394     // return unprocessed events
//  395     return (events ^ SYS_EVENT_MSG);                        //·µ»ØÃ»ÓÐ´¦ÀíµÄÊÂ¼þ
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_8:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_9
//  396   }
//  397 
//  398   // Send a message out - This event is generated by a timer
//  399   //  (setup in SampleApp_Init()).
//  400   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_10
//  401   {
//  402     // Send the periodic message
//  403    // SampleApp_SendPeriodicMessage();
//  404      SampleAPP_SendGasSensorMessage();      //·¢ËÍ´«¸ÐÆ÷Êý¾ÝµÄº¯Êý
        ; Setup parameters for call to function SampleAPP_SendGasSensorMessage
        LCALL   ??SampleAPP_SendGasSensorMessage?relay
//  405 //     GetChannel1ADC();
//  406 //     GetChannel2ADC();
//  407     // Setup to send message again in normal period (+ a little jitter)
//  408     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  409         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x18
        MOV     R4,A
        CLR     A
        ADDC    A,#0x3
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  410 
//  411     // return unprocessed events
//  412     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_8
//  413   }
//  414 
//  415   // Discard unknown events
//  416   return 0;
??SampleApp_ProcessEvent_10:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_9:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  417 }
//  418 
//  419 
//  420 //@huang

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  421 void GetChannel1ADC(void)
GetChannel1ADC:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function GetChannel1ADC
        CODE
//  422 {
        FUNCALL GetChannel1ADC, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel1ADC, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel1ADC, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel1ADC, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel1ADC, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel1ADC, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel1ADC, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  423   uint16 ADC_RegData;
//  424   uint8 ADC_Result_RAW[15];
//  425   uint8 ADC_Result_ASCII[25];
//  426   float ADC_Vol=0;
//  427   uint8 i=0;
//  428 
//  429     //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
//  430   ADC_RegData = HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);   //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        LCALL   ?Subroutine10 & 0xFFFF
//  431   for(i=0;i<10;i++)
//  432   {
//  433     ADC_RegData += HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  434     ADC_RegData >>=1;                                                    //³ýÒÔ2
??CrossCallReturnLabel_42:
        ; Setup parameters for call to function HalAdcRead
        LCALL   ?Subroutine9 & 0xFFFF
//  435   }
??CrossCallReturnLabel_45:
        JNZ     ??CrossCallReturnLabel_42
//  436  //ADC_Vol =  (float)ADC_RegData*3.3/8192 + GasSen_Wire_Compensation;     //»ñÈ¡µçÑ¹Öµ²¢²¹³¥  ²¹³¥µ¼ÏßÑ¹½µ
//  437   ADC_Vol = (float)ADC_RegData*3.4/8192;
//  438   sprintf(ADC_Result_ASCII,"P0.4:%.4fV",ADC_Vol);                         //½«µçÑ¹Öµ×ª»»ÎªASCII
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4059999a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     R4,#`?<Constant "P0.4:%.4fV">` & 0xff
        MOV     R5,#(`?<Constant "P0.4:%.4fV">` >> 8) & 0xff
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  439   HalUARTWrite(0,ADC_Result_ASCII,strlen(ADC_Result_ASCII));             //½«µçÑ¹Öµ´òÓ¡³öÀ´
//  440   HalUARTWrite(0,"\r\n\r\n",4);
//  441   MicroWait(50);
//  442 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     A,#0x19
        CFI EndBlock cfiBlock3
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     R2,#0x4
        MOV     R1,#0x4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        MOV     ?V0 + 0,#0xa
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     R2,#0x4
        MOV     R1,#0x4
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 3
        CLR     C
        RRC     A
        MOV     R7,A
        MOV     A,R6
        RRC     A
        MOV     R6,A
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  443 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  444 void GetChannel2ADC(void)
GetChannel2ADC:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function GetChannel2ADC
        CODE
//  445 {
        FUNCALL GetChannel2ADC, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel2ADC, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel2ADC, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel2ADC, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel2ADC, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel2ADC, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetChannel2ADC, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  446   uint16 ADC_RegData;
//  447   uint8 ADC_Result_RAW[15];
//  448   uint8 ADC_Result_ASCII[25];
//  449   float ADC_Vol=0;
//  450     uint8 i=0;
//  451     //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
//  452     ADC_RegData = HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);     //Ñ¡ÔñP0_0,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??Subroutine25_0 & 0xFFFF
//  453     //»ñµÃÆ½¾ùÖµ
//  454     for(i=0;i<10;i++)
//  455     {
//  456       ADC_RegData += HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);   //Ñ¡ÔñP0_0,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  457       ADC_RegData >>=1;                                                    //³ýÒÔ2
??CrossCallReturnLabel_44:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   ??Subroutine26_0 & 0xFFFF
//  458     }
??CrossCallReturnLabel_47:
        JNZ     ??CrossCallReturnLabel_44
//  459     ADC_Vol = (float)ADC_RegData*3.4/8192;
//  460     sprintf(ADC_Result_ASCII,"P0.0:%.4fV",ADC_Vol);    //½«µçÑ¹Öµ×ª»»ÎªASCII
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4059999a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     R4,#`?<Constant "P0.0:%.4fV">` & 0xff
        MOV     R5,#(`?<Constant "P0.0:%.4fV">` >> 8) & 0xff
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock19
//  461     HalUARTWrite(0,ADC_Result_ASCII,strlen(ADC_Result_ASCII));             //½«µçÑ¹Öµ´òÓ¡³öÀ´
//  462     HalUARTWrite(0,"\r\n\r\n",4);
//  463     MicroWait(50);
//  464 }
//  465 
//  466 
//  467 /*********************************************************************
//  468  * Event Generation Functions
//  469  */
//  470 /*********************************************************************
//  471  * @fn      SampleApp_HandleKeys
//  472  *
//  473  * @brief   Handles all key events for this device.
//  474  *
//  475  * @param   shift - true if in shift/alt.
//  476  * @param   keys - bit field for key events. Valid entries:
//  477  *                 HAL_KEY_SW_2
//  478  *                 HAL_KEY_SW_1
//  479  *
//  480  * @return  none
//  481  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  482 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  483 {
        FUNCALL SampleApp_HandleKeys, dht11_value
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 52
        MOV     A,#-0x34
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 72)
//  484   (void)shift;  // Intentionally unreferenced parameter
//  485   static uint8 LedStatus=0;
//  486   char temp;
//  487   unsigned char humi;
//  488   uint8 GasSenDisplayArr[50];
//  489   uint8 PublicFlag=0;              //¸Ã±äÁ¿¼ÇÂ¼ÁËDHT11µÄ×´Ì¬£¨ÊÇ·ñ¶ÁÈ¡³É¹¦)£¬»¹¿ÉÒÔ¼ÇÂ¼ÆäËû×´Ì¬
//  490 
//  491   uint16 ADC_RegData;
//  492   uint8 ADC_Result_RAW[15];
//  493   uint8 ADC_Result_ASCII[25];
//  494   float ADC_Vol=0;
//  495 
//  496   uint8 i=0;
//  497   uint8 TEMP_ARR[20];
//  498 
//  499   uint8 Transmit_data[5];      //ÐèÒª·¢ËÍµÄÊý¾Ý
//  500   uint16 TGS813GasSenDataSave=0;     //±£´æÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
//  501 
//  502   PublicFlag =0;             //Çå¿Õ±êÖ¾Î»
        MOV     ?V0 + 1,#0x0
//  503 
//  504 
//  505   //ADC²âÊÔ½á¹û£¬Ê¹ÓÃÄÚ²¿²Î¿¼µçÑ¹ÊÇ×î×¼È·µÄ2017 2 19
//  506   //×¢Òâ¶Å°îÏßµÄÑ¹½µÐèÒª²¹³¥£¬Êµ¼ÊµçÂ·ÖÐ£¬Îñ±Ø²âÊÔ´«¸ÐÆ÷Òý½Åµ½ADCÒý½ÅµÄÑ¹½µ£¬È»ºóÈí¼þ¼ÓÒÔ²¹³¥¡£2017 2 19
//  507   if ( keys & HAL_KEY_SW_6 )
        MOV     A,R2
        MOV     C,0xE0 /* A   */.5
        JC      $+5
        LJMP    ??SampleApp_HandleKeys_0 & 0xFFFF
//  508   {
//  509        //ÎÂ¶È´«¸ÐÆ÷  DHT11
//  510 //    HalUARTWrite(0,"DHT11\r\n",7);
//  511     //DHT11¶ÁÈ¡Ê§°Ü£¬¿ÉÄÜDHT11Ëð»µ£¬¿ÉÄÜDHT11±»°Î³ö»òÕßÁ¬ÏßËÉ¶¯
//  512     if(dht11_value(&temp , &humi , DHT11_UINT8) != 0)
        ; Setup parameters for call to function dht11_value
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??dht11_value?relay
        MOV     A,R1
        JZ      ??SampleApp_HandleKeys_1
//  513     {
//  514       temp = DHT11_TEMP_DEFAULT;  //ÉèÖÃÎÂÊª¶ÈÎªÄ¬ÈÏÖµ
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
//  515       humi = DHT11_HUMI_DEFAULT;
//  516       PublicFlag |= (1<<0);     //ÖÃÎ»±êÖ¾Î»
??CrossCallReturnLabel_6:
        MOV     ?V0 + 1,#0x1
//  517     }
//  518 
//  519 /* For Test
//  520    sprintf(TEMP_ARR,"Temp:%d Humi:%d",temp,humi);
//  521     HalUARTWrite(0,TEMP_ARR,strlen(TEMP_ARR));
//  522     HalUARTWrite(0,"\r\n",2);
//  523 */
//  524     //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
//  525     ADC_RegData = HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);   //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
??SampleApp_HandleKeys_1:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  526     for(i=0;i<10;i++)
        MOV     ?V0 + 2,#0xa
//  527     {
//  528       ADC_RegData += HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  529       ADC_RegData >>=1;                                                    //³ýÒÔ2
??SampleApp_HandleKeys_2:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,R6
        ADD     A,?V0 + 4
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 5
        CLR     C
        RRC     A
        MOV     R7,A
        MOV     A,R6
        RRC     A
        MOV     R6,A
//  530     }
        DEC     ?V0 + 2
        MOV     A,?V0 + 2
        JNZ     ??SampleApp_HandleKeys_2
//  531    //ADC_Vol =  (float)ADC_RegData*3.3/8192 + GasSen_Wire_Compensation;     //»ñÈ¡µçÑ¹Öµ²¢²¹³¥  ²¹³¥µ¼ÏßÑ¹½µ
//  532     ADC_Vol = (float)ADC_RegData*3.3/8192;
//  533     sprintf(ADC_Result_ASCII,"P0.4:%.4fV",ADC_Vol);    //½«µçÑ¹Öµ×ª»»ÎªASCII
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_40533333
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 76)
        MOV     R4,#`?<Constant "P0.4:%.4fV">` & 0xff
        MOV     R5,#(`?<Constant "P0.4:%.4fV">` >> 8) & 0xff
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 72)
//  534     HalUARTWrite(0,ADC_Result_ASCII,strlen(ADC_Result_ASCII));             //½«µçÑ¹Öµ´òÓ¡³öÀ´
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  535     HalUARTWrite(0,"\r\n\r\n",4);
//  536     MicroWait(50);
//  537     //Gas sensor»ñÈ¡Êý¾Ý£¬È»ºó´òÓ¡
//  538  //   TGS813GasSenDataSave = (uint16)TGS813GetConcentration(ADC_Vol,temp,humi);
//  539     /*
//  540     sprintf(GasSenDisplayArr,"Gas concertation:%dppm\r\n",TGS813GasSenDataSave);
//  541     HalUARTWrite(0,GasSenDisplayArr,strlen(GasSenDisplayArr));
//  542     */
//  543 /*
//  544     if((TGS813GasSen_Flag & (1<<2)) || (TGS813GasSen_Flag & (1<<3)))     //ÎÂÊª¶È´«¸ÐÆ÷²âµÃµÄÎÂ¶È²»ÔÚ·¶Î§
//  545     {
//  546       PublicFlag |= (1<<1);      //ÖÃÎ»±êÖ¾Î»
//  547     }
//  548     if((TGS813GasSen_Flag & (1<<4)) || (TGS813GasSen_Flag & (1<<5)))    //ÎÂÊª¶È´«¸ÐÆ÷²âµÃµÄÊª¶È²»ÔÚ·¶Î§
//  549     {
//  550       PublicFlag |= (1<<2);      //ÖÃÎ»±êÖ¾Î»
//  551     }
//  552     if((TGS813GasSen_Flag & (1<<0)))                              //Å¨¶ÈÖµµÍÓÚ¼à²âÏÂÏÞ
//  553     {
//  554       PublicFlag |= (1<<3);      //ÖÃÎ»±êÖ¾Î»
//  555     }
//  556     if((TGS813GasSen_Flag & (1<<1)))                             //Å¨¶ÈÖµ¸ßÓÚ¼à²âÉÏÏÞ
//  557     {
//  558       PublicFlag |= (1<<4);      //ÖÃÎ»±êÖ¾Î»
//  559     }
//  560     */
//  561 /*For test    */
//  562     sprintf(TEMP_ARR,"GeneralFlag1:%d\r\n",PublicFlag);
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 2,?V0 + 1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 74)
        MOV     R4,#`?<Constant "GeneralFlag1:%d\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "GeneralFlag1:%d\\r\\n">` >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 72)
//  563     HalUARTWrite(0,TEMP_ARR,strlen(TEMP_ARR));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  564 
//  565     Transmit_data[0] = (uint8)temp;                           //×°ÈëÎÂ¶È
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine7 & 0xFFFF
//  566     Transmit_data[1] = (uint8)humi;                           //×°ÈëÊª¶È
??CrossCallReturnLabel_8:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  567     Transmit_data[2] = HI_UINT16(TGS813GasSenDataSave);       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶È¸ß°ËÎ»
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  568     Transmit_data[3] = LO_UINT16(TGS813GasSenDataSave);       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶ÈµÍ°ËÎ»
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  569     Transmit_data[4] =  PublicFlag;                           //½«×Ü±êÖ¾Î»Ð´Èë·¢ËÍ°üÖÐ
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  570 
//  571     if ( AF_DataRequest( &SampleApp_Point_To_Point_DstAddr, &SampleApp_epDesc,
//  572                      SAMPLEAPP_GAS_SENSOR_CLUSTERID,        //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
//  573                      5,                                     //Êý¾ÝÁ¿£¨³¤¶È£©
//  574                      Transmit_data,                         //Êý¾ÝÊ×µØÖ·
//  575                      &SampleApp_TransID,
//  576                      AF_DISCV_ROUTE,
//  577                      AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 73)
        MOV     ?V0 + 2,#SampleApp_TransID & 0xff
        MOV     ?V0 + 3,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 75)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 77)
        MOV     ?V0 + 2,#0x5
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 79)
        MOV     ?V0 + 2,#0x6
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 81)
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 72)
//  578     {
//  579     }
//  580 
//  581     for(i=0;i<5;i++)
        MOV     R6,#0x0
//  582     {
//  583       sprintf(TEMP_ARR,"Transmit_data[%d]:%d\r\n",i,Transmit_data[i]);
??SampleApp_HandleKeys_3:
        MOV     DPL,R6
        MOV     ?V0 + 2,DPL
        ; Setup parameters for call to function sprintf
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,DPH
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 74)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 76)
        MOV     R4,#`?<Constant "Transmit_data[%d]:%d\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "Transmit_data[%d]:%d\\r\\n">` >> 8) & 0xff
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 72)
//  584       MicroWait(5000);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??Onboard_wait?relay
//  585       HalUARTWrite(0,TEMP_ARR,strlen(TEMP_ARR));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  586       MicroWait(5000);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??Onboard_wait?relay
//  587     }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x5
        JC      ??SampleApp_HandleKeys_3
//  588 
//  589     //ÅÐ¶Ï±êÖ¾Î»£¬²¢¸ø³öÌáÊ¾ÐÅÏ¢
//  590     //DHT³ö´í
//  591     if(PublicFlag & (1<<0))
        MOV     A,?V0 + 1
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_HandleKeys_0
//  592     {
//  593       HalUARTWrite(0,"DHT11 Error!\r\n",strlen("DHT11 Error!\r\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "DHT11 Error!\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "DHT11 Error!\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  594     }
//  595     //ÎÂ¶È³¬³ö·¶Î§
//  596     if(PublicFlag & (1<<1))
//  597     {
//  598       HalUARTWrite(0,"Temperature out of rang!\r\n",strlen("Temperature out of rang!\r\n"));
//  599       //HalUARTWrite(0,"Temp",strlen("Temp"));
//  600     }
//  601     //Êª¶È³¬³ö·¶Î§
//  602     if(PublicFlag & (1<<2))
//  603     {
//  604       //HalUARTWrite(0,"Humi",strlen("Humi"));
//  605       HalUARTWrite(0,"Humility out of range!\r\n",strlen("Humility out of range!\r\n"));
//  606     }
//  607     //Å¨¶ÈÖµµÍÓÚ¼à²âÏÂÏÞ
//  608     if(PublicFlag & (1<<3))
//  609     {
//  610       HalUARTWrite(0,"Concentration out of rang!\r\n",strlen("Concentration out of rang!\r\n"));
//  611     }
//  612     //Å¨¶ÈÖµ¸ßÓÚ¼à²âÉÏÏÞ
//  613     if(PublicFlag & (1<<4))
//  614     {
//  615       HalUARTWrite(0,"Concentration out of rang!\r\n",strlen("Concentration out of rang!\r\n"));
//  616     }
//  617 
//  618 
//  619 
//  620  /*    ADC_RegData = HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);     //Ñ¡ÔñP0_0,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  621     //»ñµÃÆ½¾ùÖµ
//  622     for(i=0;i<10;i++)
//  623     {
//  624       ADC_RegData += HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);   //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  625       ADC_RegData >>=1;                                                    //³ýÒÔ2
//  626     }
//  627     ADC_Vol = (float)ADC_RegData*3.3/8192;
//  628     sprintf(ADC_Result_ASCII,"P0.0:%.4fV",ADC_Vol);    //½«µçÑ¹Öµ×ª»»ÎªASCII
//  629     HalUARTWrite(0,ADC_Result_ASCII,strlen(ADC_Result_ASCII));             //½«µçÑ¹Öµ´òÓ¡³öÀ´
//  630     HalUARTWrite(0,"\r\n\r\n",4);
//  631     MicroWait(50);
//  632 
//  633     //Gas sensor»ñÈ¡Êý¾Ý£¬²¢´²ºó´òÓ¡
//  634     sprintf(GasSenDisplayArr,"Gas concertation:%.0fppm\r\n",TGS813GetConcentration(0.16129f,20,50));
//  635     HalUARTWrite(0,GasSenDisplayArr,strlen(GasSenDisplayArr));
//  636     */
//  637 
//  638     /*
//  639     //ÎÂ¶È´«¸ÐÆ÷
//  640     HalUARTWrite(0,"DHT11\r\n",7);
//  641     if(dht11_value(temp , humi , DHT11_STRING) == 0)
//  642     {
//  643       HalUARTWrite(0,"Temp:",5);
//  644       HalUARTWrite(0,temp,2);
//  645       HalUARTWrite(0,"C\r\n",3);
//  646 
//  647       HalUARTWrite(0,"Humi:",5);
//  648       HalUARTWrite(0,humi,2);
//  649       HalUARTWrite(0,"%\r\n",3);
//  650     }
//  651     else
//  652     {
//  653        HalUARTWrite(0,"Fail\r\n",6);
//  654     }
//  655     */
//  656 /*    HAL_TOGGLE_LED1();
//  657     HAL_TOGGLE_LED2();
//  658     HAL_TOGGLE_LED3();
//  659     LedStatus = (LedStatus==0)? 1:0;
//  660     if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  661                      SAMPLEAPP_LEDSTATUS_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
//  662                      1,                            //Êý¾ÝÁ¿£¨³¤¶È£©
//  663                      &LedStatus,//Êý¾ÝÊ×µØÖ·
//  664                      &SampleApp_TransID,
//  665                      AF_DISCV_ROUTE,
//  666                      AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  667     {
//  668     }
//  669     */
//  670   }
//  671 }
??SampleApp_HandleKeys_0:
        MOV     A,#0x34
        CFI EndBlock cfiBlock20
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 72)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Valid
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 72)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 72)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     A,#0x7
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 72)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_34
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 72)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_35
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 72)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_27
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_28
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_29
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_30
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_31
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_32
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_33
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 76)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 76)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 115)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 72)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function Onboard_wait
        ; Setup parameters for call to function Onboard_wait
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x32
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47
//  672 
//  673 /*********************************************************************
//  674  * LOCAL FUNCTIONS
//  675  */
//  676 
//  677 /*********************************************************************
//  678  * @fn      SampleApp_MessageMSGCB
//  679  *
//  680  * @brief   Data message processor callback.  This function processes
//  681  *          any incoming data - probably from other devices.  So, based
//  682  *          on cluster ID, perform the intended action.
//  683  *
//  684  * @param   none
//  685  *
//  686  * @return  none
//  687  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  688 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  689 {
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 115, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 115, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 95
        MOV     A,#-0x5f
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 111)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  690   uint16 flashTime;
//  691   float Channel0_VolSave = 0.0f;
//  692   uint8 LedStatus;
//  693   uint8 GeneralFlagSave=0;                //±£´æ·¢ËÍ¹ýÀ´µÄ×Ü½ÓÊÕ±êÖ¾Î»
//  694   uint8 Dis_arr3[]="ShortAddr: ";
        MOV     DPTR,#`?<Constant "ShortAddr: ">`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "ShortAddr: ">` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  695   uint8 Dis_arr6[]="PanID: ";
        MOV     DPTR,#`?<Constant "PanID: ">`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "PanID: ">` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x8
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  696   uint8 Dis_arr12[]="Rssi: ";
        MOV     DPTR,#`?<Constant "Rssi: ">`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "Rssi: ">` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x7
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  697   uint8 Dis_arr17[]="Cmd.DataLength: ";
        MOV     DPTR,#`?<Constant "Cmd.DataLength: ">`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x4e
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "Cmd.DataLength: ">` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x11
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  698   uint8 Dis_arr18[]="Cmd.Data: ";
        MOV     DPTR,#`?<Constant "Cmd.Data: ">`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "Cmd.Data: ">` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  699   uint8 respone_arr[]="The Node Message\r\n";
        MOV     DPTR,#`?<Constant "The Node Message\\r\\n">`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x3b
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "The Node Message\\r\\n">` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x13
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  700   char convert_arr[20];
//  701   uint8 i=0;
//  702 
//  703 
//  704   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_5
        CODE
//  705   {
//  706     case SAMPLEAPP_POINT_CLUSTERID:
//  707         HalUARTWrite(0,respone_arr,sizeof(respone_arr)-1);                    //ÏÔÊ¾ÐÅÏ¢
??SampleApp_MessageMSGCB_4:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x12
        MOV     R5,#0x0
        MOV     A,#0x3b
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  708         //pkt->srcAddr.addr.shortAddr   ¶ÌµØÖ·
//  709         HalUARTWrite(0,Dis_arr3,sizeof(Dis_arr3)-1);                            //ÌáÊ¾ÒÑ¾­ÊÕµ½µã²¥ÐÅÏ¢£¬
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xb
        MOV     R5,#0x0
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  710         sprintf(convert_arr,"0x%x\r\n",pkt->srcAddr.addr.shortAddr) ;           //×ª»»Îª×Ö·û´®
        ; Setup parameters for call to function sprintf
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 113)
        MOV     R4,#`?<Constant "0x%x\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "0x%x\\r\\n">` >> 8) & 0xff
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 111)
//  711         HalUARTWrite(0,(unsigned char*)convert_arr,strlen(convert_arr));        //Êä³ö
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  712         //pkt->srcAddr.panId        PANID
//  713         HalUARTWrite(0,Dis_arr6,sizeof(Dis_arr6)-1);                            //ÌáÊ¾ÒÑ¾­ÊÕµ½µã²¥ÐÅÏ¢£¬
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  714         sprintf(convert_arr,"0x%x\r\n",pkt->srcAddr.panId) ;                      //×ª»»Îª×Ö·û´®
        ; Setup parameters for call to function sprintf
        MOV     A,?V0 + 0
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 113)
        MOV     R4,#`?<Constant "0x%x\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "0x%x\\r\\n">` >> 8) & 0xff
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 111)
//  715         HalUARTWrite(0,(unsigned char*)convert_arr,strlen(convert_arr));        //Êä³ö
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  716         //pkt->->rssi  ÐÅºÅÇ¿¶È
//  717         HalUARTWrite(0,Dis_arr12,sizeof(Dis_arr12)-1);                            //ÌáÊ¾ÒÑ¾­ÊÕµ½µã²¥ÐÅÏ¢£¬
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  718         sprintf(convert_arr,"%ddBm\r\n",pkt->rssi) ;                              //×ª»»Îª×Ö·û´®
        ; Setup parameters for call to function sprintf
        MOV     A,?V0 + 0
        ADD     A,#0x18
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV     ?V0 + 2,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 113)
        MOV     R4,#`?<Constant "%ddBm\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "%ddBm\\r\\n">` >> 8) & 0xff
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 111)
//  719         HalUARTWrite(0,(unsigned char*)convert_arr,strlen(convert_arr));          //Êä³ö
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  720         //pkt->    Êý¾Ý³¤¶È
//  721         HalUARTWrite(0,Dis_arr17,sizeof(Dis_arr17)-1);                            //ÌáÊ¾ÒÑ¾­ÊÕµ½µã²¥ÐÅÏ¢£¬
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x4e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  722         sprintf(convert_arr,"%d\r\n",pkt->cmd.DataLength) ;                       //×ª»»Îª×Ö·û´®
        MOV     A,?V0 + 0
        ADD     A,#0x20
        MOV     R6,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function sprintf
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 113)
        MOV     R4,#`?<Constant "%d\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "%d\\r\\n">` >> 8) & 0xff
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 111)
//  723         HalUARTWrite(0,(unsigned char*)convert_arr,strlen(convert_arr));          //Êä³ö
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  724         //pkt->    Êý¾Ý
//  725         HalUARTWrite(0,Dis_arr18,sizeof(Dis_arr18)-1);                            //ÌáÊ¾ÒÑ¾­ÊÕµ½µã²¥ÐÅÏ¢£¬
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
//  726         HalUARTWrite(0,pkt->cmd.Data,pkt->cmd.DataLength);                        //Êä³ö
??CrossCallReturnLabel_10:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        LCALL   ??Subroutine30_0 & 0xFFFF
//  727         HalUARTWrite(0,"\r\n\r\n",4);                                                 //»»ÐÐ£¬±ãÓÚ¹Û²ì
??CrossCallReturnLabel_57:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n\\r\\n">` >> 8) & 0xff
??SampleApp_MessageMSGCB_6:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  728         break;
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  729     case SAMPLEAPP_PERIODIC_CLUSTERID:
//  730       //ÔÚÕâÀï¼ÓÈëÄãÏëÔõÑù´¦ÀíÖÜÆÚ¹ã²¥·¢ËÍ¹ýÀ´µÄÊý¾ÝµÄ³ÌÐò
//  731       HalUARTWrite(0,"I get data\n",1);//ÌáÊ¾ÒÑ¾­½øÈëÁËÕâ¸öº¯Êý
??SampleApp_MessageMSGCB_1:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "I get data\\n">` & 0xff
        MOV     R3,#(`?<Constant "I get data\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  732       HalUARTWrite(0,(pkt->cmd.Data),12); //½«½ÓÊÕµ½µÄÊý¾Ý´òÓ¡³öÀ´
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        LCALL   ?Subroutine11 & 0xFFFF
//  733       HalUARTWrite(0,"\n",1);//»»ÐÐ£¬±ãÓÚ¹Û²ì
??CrossCallReturnLabel_55:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
        SJMP    ??SampleApp_MessageMSGCB_6
//  734       break;
//  735 
//  736     case SAMPLEAPP_FLASH_CLUSTERID:
//  737       flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
//  738       HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
??SampleApp_MessageMSGCB_2:
        MOV     A,R2
        ADD     A,#0x22
        MOV     R6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R7,A
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_21:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R3,#0x32
        MOV     R2,#0x4
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
//  739       break;
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  740     //ÎÞÏßµãµÆ
//  741     case SAMPLEAPP_LEDSTATUS_CLUSTERID:
//  742       LedStatus =  *(pkt->cmd.Data) +'0';
??SampleApp_MessageMSGCB_3:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_49:
        ADD     A,#0x30
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  743       HalUARTWrite(0,&LedStatus,1);       //½«½ÓÊÕµ½µÄÊý¾Ý´òÓ¡³öÀ´
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        LCALL   ?Subroutine8 & 0xFFFF
//  744       if(*(pkt->cmd.Data))
??CrossCallReturnLabel_11:
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_51:
        MOVX    A,@DPTR
        JZ      ??SampleApp_MessageMSGCB_7
//  745        HAL_TURN_ON_LED1();
        CLR     0x90.0
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  746       else
//  747        HAL_TURN_OFF_LED1();
??SampleApp_MessageMSGCB_7:
        SETB    0x90.0
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  748       break;
//  749 
//  750   case SAMPLEAPP_GAS_SENSOR_CLUSTERID:
//  751       i=0;                                                           //ÓÃÓÚ¼ÇÂ¼Êý¾Ý°üµÄ¼ÆÊý×Ó
//  752       char EDid=0;
//  753       EDid=(pkt->cmd.Data)[13];
??SampleApp_MessageMSGCB_5:
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_59:
        ADD     A,#0xd
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
//  754       if(EDid==1&&contin==0)
        MOV     A,#0x1
        XRL     A,R0
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_8 & 0xFFFF
        MOV     DPTR,#contin
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  755       {
//  756           //ÏÔÊ¾ÊÕµ½µÄÊý¾ÝÁ¿
//  757       //   sprintf(convert_arr,"DataLength:%d\r\n",pkt->cmd.DataLength);
//  758       //   HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  759       
//  760           //¹«¹²Êý¾Ý°ü£¬ÎÂÊª¶ÈÊý¾Ý+×´Ì¬Î»
//  761           sprintf(convert_arr,"TEMP£º%d C\r\n",(pkt->cmd.Data)[i]),i++;
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 113)
        MOV     R4,#`?<Constant "TEMP\\243\\272%d C\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "TEMP\\243\\272%d C\\r\\n">` >> 8) & 0xff
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 111)
//  762           HalUARTWrite(0,convert_arr,strlen(convert_arr));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
//  763           sprintf(convert_arr,"HUMI£º%dRH\r\n",(pkt->cmd.Data)[i]),i++;
??CrossCallReturnLabel_4:
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 113)
        MOV     R4,#`?<Constant "HUMI\\243\\272%dRH\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "HUMI\\243\\272%dRH\\r\\n">` >> 8) & 0xff
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 111)
//  764           HalUARTWrite(0,convert_arr,strlen(convert_arr));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
//  765       
//  766           //ÅÐ¶Ï±êÖ¾Î»£¬²¢¸ø³öÌáÊ¾ÐÅÏ¢
//  767           //DHT³ö´í
//  768           if((pkt->cmd.Data)[i++] & (1<<0))
??CrossCallReturnLabel_5:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_MessageMSGCB_9
//  769           {
//  770             HalUARTWrite(0,"DHT11 Error!\r\n",strlen("DHT11 Error!\r\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "DHT11 Error!\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "DHT11 Error!\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  771           }
//  772       
//  773       #if (defined Channel_0_GasSensor_Busy)
//  774           //Í¨µÀ0£¨P0.0£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
//  775           Channel0_VolSave =  (float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])/1000;
//  776           sprintf(convert_arr,"vol0£º%.3fV\r\n",Channel0_VolSave),i+=2;
//  777           HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  778           if(Channel0_VolSave < TGS822_Safe)
//  779             sprintf(convert_arr,"Level: Ã»ÓÐÎÛÈ¾\r\n");
//  780           else if(Channel0_VolSave < TGS822_Mildly)
//  781             sprintf(convert_arr,"Level: Çá¶ÈÎÛÈ¾\r\n");
//  782           else if(Channel0_VolSave < TGS822_Moderate)
//  783             sprintf(convert_arr,"Level: ÖÐ¶ÈÎÛÈ¾\r\n");
//  784           else if(Channel0_VolSave < TGS822_Severe)
//  785             sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
//  786           else
//  787             sprintf(convert_arr,"Level: ÖØ¶ÈÎÛÈ¾\r\n");
//  788           HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  789           //    sprintf(convert_arr,"concen0£º%dppm\r\n",BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])),i+=2;
//  790       //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  791       //    sprintf(convert_arr,"Flag0:0x%x\r\n",(pkt->cmd.Data)[i]),i++;
//  792       //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  793       #endif
//  794       
//  795       #if (defined Channel_1_GasSensor_Busy)
//  796           //Í¨µÀ1£¨P0.4£©Êý¾Ý°ü(µçÑ¹Öµ¼ÓÅ¨¶ÈÖµ)+±êÖ¾Î»
//  797           sprintf(convert_arr,"vol1£º%.3fV\r\n",(float)BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])/1000),i+=2;
??SampleApp_MessageMSGCB_9:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_22:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        CLR     A
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 115)
        MOV     R4,#`?<Constant "vol1\\243\\272%.3fV\\r\\n">` & 0xff
        MOV     R5,#(`?<Constant "vol1\\243\\272%.3fV\\r\\n">` >> 8) & 0xff
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 111)
//  798           HalUARTWrite(0,convert_arr,strlen(convert_arr));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
//  799       //    sprintf(convert_arr,"concen1£º%dppm\r\n",BUILD_UINT16((pkt->cmd.Data)[i+1],(pkt->cmd.Data)[i])),i+=2;
//  800       //    HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  801       //    sprintf(convert_arr,"Flag1:0x%x\r\n",(pkt->cmd.Data)[i]),i++;
//  802       //   HalUARTWrite(0,convert_arr,strlen(convert_arr));
//  803       #endif
//  804           
//  805           HalUARTWrite(0,"\r\n",2);
//  806           EDid=0;
//  807           contin=1;
//  808       }
??CrossCallReturnLabel_33:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,#0x1
        SJMP    ??SampleApp_MessageMSGCB_10
//  809       if(EDid==2&&contin==1)
??SampleApp_MessageMSGCB_8:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??SampleApp_MessageMSGCB_0
        MOV     DPTR,#contin
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_MessageMSGCB_0
//  810       {
//  811         HalUARTWrite(0, "PM2.5:", 6);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "PM2.5:">` & 0xff
        MOV     R3,#(`?<Constant "PM2.5:">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  812       //  HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  813         HalUARTWrite(0, pkt->cmd.Data, 6); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x6
        LCALL   ?Subroutine11 & 0xFFFF
//  814         HalUARTWrite(0, "ug/m3", 5);
??CrossCallReturnLabel_56:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "ug/m3">` & 0xff
        MOV     R3,#(`?<Constant "ug/m3">` >> 8) & 0xff
        LCALL   ?Subroutine4 & 0xFFFF
//  815         HalUARTWrite(0, "\r\n", 2);         //»Ø³µ»»ÐÐ
//  816         EDid=0;
//  817         contin=0;
//  818       }
//  819     break;
//  820   }
??CrossCallReturnLabel_3:
        CLR     A
??SampleApp_MessageMSGCB_10:
        MOVX    @DPTR,A
//  821 }
??SampleApp_MessageMSGCB_0:
        MOV     A,#0x5f
        LJMP    ??Subroutine24_0 & 0xFFFF
        CFI EndBlock cfiBlock48
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_55
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_56
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_57
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond54 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 72)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_55
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_56
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_57
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker71 Using cfiCommon1
        CFI (cfiPicker71) NoFunction
        CFI (cfiPicker71) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        ; Setup parameters for call to function HalLedBlink
        ; Setup parameters for call to function sprintf
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 74)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 113)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 113)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 113)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 113)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 113)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 113)
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        MOV     A,R2
        ADD     A,#0x22
        MOV     R6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function sprintf
        MOV     DPL,R6
        MOV     DPH,R7
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker89 Using cfiCommon1
        CFI (cfiPicker89) NoFunction
        CFI (cfiPicker89) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_54:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiPicker89

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond90 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_50
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_48
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOVX    A,@DPTR
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_4
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_5
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_49
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_50
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_48
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker102 Using cfiCommon1
        CFI (cfiPicker102) NoFunction
        CFI (cfiPicker102) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond103 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        MOV     R5,#0x0
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x22
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond110 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker112 Using cfiCommon1
        CFI (cfiPicker112) NoFunction
        CFI (cfiPicker112) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_36:
        RET
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiPicker112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_11
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_4
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_5
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function sprintf
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_52:
        INC     DPTR
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 111)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 111)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        MOV     DPTR,#contin
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123
//  822 
//  823 /*********************************************************************
//  824  * @fn      SampleApp_SendPointMessage
//  825  *
//  826  * @brief   Send the point to point message.
//  827  *
//  828  * @param   none
//  829  *
//  830  * @return  none
//  831  *
//  832  * @time&author huang 2016 8 2
//  833  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  834 void SampleApp_SendPointMessage( void )
SampleApp_SendPointMessage:
        CFI Block cfiBlock124 Using cfiCommon0
        CFI Function SampleApp_SendPointMessage
        CODE
//  835 {
        FUNCALL SampleApp_SendPointMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  836   uint8 test_arr[]="RSSI Testing.";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "RSSI Testing.">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "RSSI Testing.">` & 0xff
        MOV     A,#0xe
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  837   if ( AF_DataRequest( &SampleApp_Point_To_Point_DstAddr, &SampleApp_epDesc,//µØÖ·¸Ä±ä
//  838                        SAMPLEAPP_POINT_CLUSTERID,                           //´ØID¸Ä±ä
//  839                        sizeof(test_arr)-1,                                 //Êý×é³¤¶È
//  840                        test_arr,                                           //ÐèÒª·¢ËÍµÄÊý×é
//  841                        &SampleApp_TransID,                                 //ÐòÁÐºÅ£¬»á×Ô¶¯Ôö¼Ó
//  842                        AF_DISCV_ROUTE,                                     //·¢ËÍÑ¡Ïî
//  843                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )           //·¢ËÍµÄÂ·ÓÉ°ë¾¶
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0xd
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 0,#0x5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  844   {
//  845   }
//  846   else
//  847   {
//  848     // Error occurred in request to send.
//  849   }
//  850 }
        MOV     A,#0xe
        CFI EndBlock cfiBlock124
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock125 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock125
//  851 /*********************************************************************
//  852  * @fn      SampleApp_SendPeriodicMessage
//  853  *
//  854  * @brief   Send the periodic message.
//  855  *
//  856  * @param   none
//  857  *
//  858  * @return  none
//  859  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  860 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock126 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  861 {
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  862   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  863                        SAMPLEAPP_PERIODIC_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
//  864                        1,                            //Êý¾ÝÁ¿£¨³¤¶È£©
//  865                        (uint8*)&SampleAppPeriodicCounter,//Êý¾ÝÊ×µØÖ·
//  866                        &SampleApp_TransID,
//  867                        AF_DISCV_ROUTE,
//  868                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
        MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_64:
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock126
//  869   {
//  870   }
//  871   else
//  872   {
//  873     // Error occurred in request to send.
//  874   }
//  875 }
//  876 
//  877 /*********************************************************************
//  878  * @fn      SampleApp_SendFlashMessage
//  879  *
//  880  * @brief   Send the flash message to group 1.
//  881  *
//  882  * @param   flashTime - in milliseconds
//  883  *
//  884  * @return  none
//  885  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  886 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock127 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
        CODE
//  887 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  888   uint8 buffer[3];
//  889   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  890   buffer[1] = LO_UINT16( flashTime );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  891   buffer[2] = HI_UINT16( flashTime );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  892 
//  893   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  894                        SAMPLEAPP_FLASH_CLUSTERID,
//  895                        3,
//  896                        buffer,
//  897                        &SampleApp_TransID,
//  898                        AF_DISCV_ROUTE,
//  899                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  900   {
//  901   }
//  902   else
//  903   {
//  904     // Error occurred in request to send.
//  905   }
//  906 }
        MOV     A,#0x3
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock127
//  907 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  908 void SampleAPP_SendGasSensorMessage(void)
SampleAPP_SendGasSensorMessage:
        CFI Block cfiBlock128 Using cfiCommon0
        CFI Function SampleAPP_SendGasSensorMessage
        CODE
//  909 {
        FUNCALL SampleAPP_SendGasSensorMessage, dht11_value
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleAPP_SendGasSensorMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
//  910   
//  911   uint8 Transmit_data[14];              //ÐèÒª·¢ËÍµÄÊý¾Ý    °ü=¹«¹²Êý¾Ý(ÎÂÊª¶ÈÊý¾ÝºÍ±êÖ¾Î»)+Í¨µÀ0Êý¾ÝºÍ±êÖ¾+Í¨µÀ1Êý¾ÝºÍ±êÖ¾£¬ºóÃæÁ½¸öÊý¾Ý¿ÉÑ¡
//  912   //Ò»¸ö½Úµã ÎÂÊª¶ÈºÍ¾Æ¾«
//  913   //¹«¹²°ü
//  914   
//  915   char temp;                   //ÎÂ¶È
//  916   unsigned char humi;          //Êª¶È
//  917   uint8 PublicFlag=0;         //¸Ã±äÁ¿¼ÇÂ¼ÁËDHT11µÄ×´Ì¬£¨ÊÇ·ñ¶ÁÈ¡³É¹¦)£¬»¹¿ÉÒÔ¼ÇÂ¼ÆäËû×´Ì¬
//  918   Transmit_data[13]=1;//½Úµã1±ê¼Ç
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  919 #if (defined Channel_0_GasSensor_Busy)
//  920   float ADC_Channel_0_Vol=0;             //ADCµçÑ¹
//  921   uint16 ADC_Channel_0_Vol_ForTx = 0;    //½«µçÑ¹Öµ³ËÉÏ1000£¬ÓÃÓÚ·¢ËÍ³öÈ¥
//  922   uint16 ADC_Channel_0_RegData;          //ADC¼Ä´æÆ÷Êý¾Ý
//  923   uint16 Channel_0_GasSenDataSave=0;     //±£´æÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
//  924 #endif
//  925 #if (defined Channel_1_GasSensor_Busy)
//  926   float ADC_Channel_1_Vol=0;             //ADCµçÑ¹
//  927   uint16 ADC_Channel_1_Vol_ForTx = 0;    //½«µçÑ¹Öµ³ËÉÏ1000£¬ÓÃÓÚ·¢ËÍ³öÈ¥
//  928   uint16 ADC_Channel_1_RegData;          //ADC¼Ä´æÆ÷Êý¾Ý
//  929   uint16 Channel_1_GasSenDataSave=0;     //±£´æÆøÌå´«¸ÐÆ÷µÄÊý¾Ý
//  930 #endif
//  931 
//  932   uint8 i=0;                            //Ñ­»·ÒªÓÃµ½
//  933   uint8 TxPackLength=0;                 //¼ÇÂ¼°ü³¤¶È
//  934 
//  935   PublicFlag =0;                        //Çå¿Õ±êÖ¾Î»
        MOV     R6,#0x0
//  936 
//  937   uint8 ADC_Result_ASCII[20];
//  938   //ADC²âÊÔ½á¹û£¬Ê¹ÓÃÄÚ²¿²Î¿¼µçÑ¹ÊÇ×î×¼È·µÄ2017 2 19
//  939   //×¢Òâ¶Å°îÏßµÄÑ¹½µÐèÒª²¹³¥£¬Êµ¼ÊµçÂ·ÖÐ£¬Îñ±Ø²âÊÔ´«¸ÐÆ÷Òý½Åµ½ADCÒý½ÅµÄÑ¹½µ£¬È»ºóÈí¼þ¼ÓÒÔ²¹³¥¡£2017 2 19
//  940   //ÎÂ¶È´«¸ÐÆ÷  DHT11
//  941   //DHT11¶ÁÈ¡Ê§°Ü£¬¿ÉÄÜDHT11Ëð»µ£¬¿ÉÄÜDHT11±»°Î³ö»òÕßÁ¬ÏßËÉ¶¯
//  942     if(dht11_value(&temp , &humi , DHT11_UINT8) != 0)
        ; Setup parameters for call to function dht11_value
        MOV     R1,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??dht11_value?relay
        MOV     A,R1
        JZ      ??SampleAPP_SendGasSensorMessage_0
//  943     {
//  944       temp = DHT11_TEMP_DEFAULT;  //ÉèÖÃÎÂÊª¶ÈÎªÄ¬ÈÏÖµ
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
//  945       humi = DHT11_HUMI_DEFAULT;
//  946       PublicFlag |= (1<<0);     //ÖÃÎ»±êÖ¾Î»
??CrossCallReturnLabel_7:
        INC     R6
//  947     }
//  948     Transmit_data[TxPackLength] = (uint8)temp , TxPackLength++;                     //×°ÈëÎÂ¶È,TxPackLength=0
??SampleAPP_SendGasSensorMessage_0:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine7 & 0xFFFF
//  949     Transmit_data[TxPackLength] = (uint8)humi , TxPackLength++;                     //×°ÈëÊª¶È
??CrossCallReturnLabel_9:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  950     Transmit_data[TxPackLength] =  PublicFlag , TxPackLength++;                    //×°Èë¹«¹²±êÖ¾Î»
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  951 
//  952 //Èç¹ûÓÃµ½ÁËchanne0Ôò±àÒë£¬Ê¹ÓÃP0.0£¬½«Í¨µÀ0Êý¾ÝºÍ±êÖ¾Î»×°Èë·¢ËÍ°üÖÐ
//  953 #if (defined Channel_0_GasSensor_Busy)
//  954     //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
//  955     ADC_Channel_0_RegData = HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);    //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
//  956     for(i=0;i<10;i++)
//  957     {
//  958       ADC_Channel_0_RegData += HalAdcRead(HAL_ADC_CHANNEL_0,HAL_ADC_RESOLUTION_14);  //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  959       ADC_Channel_0_RegData >>=1;                                                    //³ýÒÔ2
//  960     }
//  961     ADC_Channel_0_Vol =  (float)ADC_Channel_0_RegData*AMS1117_3_ADC_VOL/8192;         //¼ÆËãµÃµçÑ¹Öµ
//  962     ADC_Channel_0_Vol_ForTx = (uint16)(ADC_Channel_0_Vol * 1000);
//  963 
//  964     //Gas sensor»ñÈ¡Êý¾Ý,±£´æÆðÀ´
//  965     Channel_0_GasSenDataSave = (uint16)PointGetConcentrationForChannel_0(ADC_Channel_0_Vol,temp,humi);
//  966 
//  967     Transmit_data[TxPackLength] = HI_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
//  968     Transmit_data[TxPackLength] = LO_UINT16(ADC_Channel_0_Vol_ForTx) , TxPackLength++;       //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
//  969     Transmit_data[TxPackLength] = HI_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶È¸ß°ËÎ»
//  970     Transmit_data[TxPackLength] = LO_UINT16(Channel_0_GasSenDataSave) , TxPackLength++;       //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶ÈµÍ°ËÎ»
//  971     Transmit_data[TxPackLength] = *GasSensorFlagForChannel_0, TxPackLength++;                  //×°Èë±êÖ¾Î»
//  972 #endif
//  973 
//  974 //Èç¹ûÓÃµ½ÁËchanne1Ôò±àÒë£¬Ê¹ÓÃP0.4£¬½«Í¨µÀ1Êý¾ÝºÍ±êÖ¾Î»×°Èë·¢ËÍ°üÖÐ
//  975 #if (defined Channel_1_GasSensor_Busy)
//  976     //¶à´Î¶Á³öADCµÄÖµ£¬È»ºóÈ¡Æ½¾ùÖµ
//  977     ADC_Channel_1_RegData = HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);                    //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ£¬13Î»ÓÐÐ§Êý¾Ý
        ; Setup parameters for call to function HalAdcRead
        LCALL   ?Subroutine10 & 0xFFFF
//  978     for(i=0;i<10;i++)
//  979     {
//  980       ADC_Channel_1_RegData += HalAdcRead(HAL_ADC_CHANNEL_4,HAL_ADC_RESOLUTION_14);                //Ñ¡ÔñP0_4,14Î»·Ö±æÂÊ,13Î»ÓÐÐ§Êý¾Ý
//  981       ADC_Channel_1_RegData >>=1;                                                                  //³ýÒÔ2
??CrossCallReturnLabel_43:
        ; Setup parameters for call to function HalAdcRead
        LCALL   ?Subroutine9 & 0xFFFF
//  982     }
??CrossCallReturnLabel_46:
        JNZ     ??CrossCallReturnLabel_43
//  983     ADC_Channel_1_Vol =  (float)ADC_Channel_1_RegData*AMS1117_3_ADC_VOL/8192;                       //¼ÆËãµÃµçÑ¹Öµ
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_4051eb85
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_39000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
//  984     ADC_Channel_1_Vol_ForTx = (uint16)(ADC_Channel_1_Vol * 1000);                                  //½«µçÑ¹Öµ³ËÒÔ1000
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     R6,?V0 + 4
//  985     //Gas sensor»ñÈ¡Êý¾Ý,±£´æÆðÀ´
//  986     Channel_1_GasSenDataSave = (uint16)PointGetConcentrationForChannel_1(ADC_Channel_1_Vol,temp,humi);
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     DPTR,#PointGetConcentrationForChannel_1
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ?CALL_IND
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
//  987 
//  988     Transmit_data[TxPackLength] = HI_UINT16(ADC_Channel_1_Vol_ForTx) , TxPackLength++;             //È¡´¦ÀíºóµÄµçÑ¹µÄÖµ¸ß°ËÎ»
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  989     Transmit_data[TxPackLength] = LO_UINT16(ADC_Channel_1_Vol_ForTx) , TxPackLength++;             //È¡´¦ÀíºóµÄµçÑ¹ÖµµÄµÍ°ËÎ»
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  990     Transmit_data[TxPackLength] = HI_UINT16(Channel_1_GasSenDataSave) , TxPackLength++;             //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶È¸ß°ËÎ»
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  991     Transmit_data[TxPackLength] = LO_UINT16(Channel_1_GasSenDataSave) , TxPackLength++;             //×°Èë¼ÆËãºóµÄÆøÌåÅ¨¶ÈµÍ°ËÎ»
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  992     Transmit_data[TxPackLength] = *GasSensorFlagForChannel_1, TxPackLength++;                       //×°Èë±êÖ¾Î»
        MOV     DPTR,#GasSensorFlagForChannel_1
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_48:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  993 #endif
//  994 
//  995     //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
//  996     if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
//  997                      SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
//  998                      14,                   //Êý¾ÝÁ¿£¨³¤¶È£©
//  999                      Transmit_data,                  //Êý¾ÝÊ×µØÖ·
// 1000                      &SampleApp_TransID,
// 1001                      AF_DISCV_ROUTE,
// 1002                      AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     ?V0 + 0,#0xe
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     ?V0 + 0,#0x6
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
// 1003     {
// 1004     }
// 1005   /*
// 1006   //½Úµã2
// 1007   Transmit_data[13]=2;//½Úµã2±ê¼Ç
// 1008   Transmit_data[0] = PM_data[0];
// 1009   Transmit_data[1] = PM_data[1];
// 1010   Transmit_data[2] = PM_data[2];
// 1011   Transmit_data[3] = PM_data[3];
// 1012   Transmit_data[4] = PM_data[4];
// 1013   Transmit_data[5] = PM_data[5];
// 1014   //½«´ò°üºÃµÄÊý¾Ý°ü·¢Éä³öÈ¥
// 1015     if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,//µã²¥ÉèÖÃµÄID
// 1016                      SAMPLEAPP_GAS_SENSOR_CLUSTERID, //Óë½ÓÊÕ·½½¨Á¢ÁªÏµµÄ²ÎÊý£¬Èç1£¬±íÊ¾ÓÉÖÜÆÚÐÔ¹ã²¥·½Ê½·¢ËÍ¹ýÀ´µÄÊý¾Ý
// 1017                      14,                   //Êý¾ÝÁ¿£¨³¤¶È£©
// 1018                      Transmit_data,                  //Êý¾ÝÊ×µØÖ·
// 1019                      &SampleApp_TransID,
// 1020                      AF_DISCV_ROUTE,
// 1021                      AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
// 1022     {
// 1023     }*/
// 1024 }
        MOV     A,#0x10
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock128

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond129 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker131 Using cfiCommon1
        CFI (cfiPicker131) NoFunction
        CFI (cfiPicker131) Picker
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Point_To_Point_DstAddr & 0xff
        MOV     R3,#(SampleApp_Point_To_Point_DstAddr >> 8) & 0xff
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiPicker131
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
        CFI Block cfiCond132 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 81)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker137 Using cfiCommon1
        CFI (cfiPicker137) NoFunction
        CFI (cfiPicker137) Picker
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        RET
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiPicker137

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond138 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 72)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker140 Using cfiCommon1
        CFI (cfiPicker140) NoFunction
        CFI (cfiPicker140) Picker
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 72)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker143 Using cfiCommon1
        CFI (cfiPicker143) NoFunction
        CFI (cfiPicker143) Picker
        MOV     A,#0x19
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x41
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiPicker143

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for PointGetConcentrationForChan`:
        DATA16
        DW ??TGS813GetConcentration?relay

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for GasSensorFlagForChannel_1>`:
        DATA16
        DW TGS813GasSen_Flag

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetChannel1ADC?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetChannel1ADC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetChannel2ADC?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetChannel2ADC

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPointMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPointMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendFlashMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendFlashMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleAPP_SendGasSensorMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleAPP_SendGasSensorMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hello World\\n">`:
        DB "Hello World\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "P0.4:%.4fV">`:
        DB "P0.4:%.4fV"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n\\r\\n">`:
        DB "\015\012\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "P0.0:%.4fV">`:
        DB "P0.0:%.4fV"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GeneralFlag1:%d\\r\\n">`:
        DB "GeneralFlag1:%d\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Transmit_data[%d]:%d\\r\\n">`:
        DB "Transmit_data[%d]:%d\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "DHT11 Error!\\r\\n">`:
        DB "DHT11 Error!\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ShortAddr: ">`:
        DB "ShortAddr: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "PanID: ">`:
        DB "PanID: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Rssi: ">`:
        DB "Rssi: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Cmd.DataLength: ">`:
        DB "Cmd.DataLength: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Cmd.Data: ">`:
        DB "Cmd.Data: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "The Node Message\\r\\n">`:
        DB "The Node Message\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "0x%x\\r\\n">`:
        DB "0x%x\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%ddBm\\r\\n">`:
        DB "%ddBm\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%d\\r\\n">`:
        DB "%d\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "I get data\\n">`:
        DB "I get data\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "\\n">`:
        DB "\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TEMP\\243\\272%d C\\r\\n">`:
        DB "TEMP\243\272%d C\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "HUMI\\243\\272%dRH\\r\\n">`:
        DB "HUMI\243\272%dRH\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "vol1\\243\\272%.3fV\\r\\n">`:
        DB "vol1\243\272%.3fV\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "PM2.5:">`:
        DB "PM2.5:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ug/m3">`:
        DB "ug/m3"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "RSSI Testing.">`:
        DB "RSSI Testing."

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4059999a:
        DD 4059999AH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_39000000:
        DD 39000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_40533333:
        DD 40533333H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_447a0000:
        DD 447A0000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4051eb85:
        DD 4051EB85H

        END
// 1025 
// 1026 /*********************************************************************
// 1027 *********************************************************************/
// 
// 2 842 bytes in segment BANKED_CODE
//    60 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//     4 bytes in segment XDATA_I
//     4 bytes in segment XDATA_ID
//   320 bytes in segment XDATA_ROM_C
//    66 bytes in segment XDATA_Z
// 
// 2 906 bytes of CODE  memory
//   300 bytes of CONST memory (+ 20 bytes shared)
//     0 bytes of DATA  memory (+  1 byte  shared)
//    70 bytes of XDATA memory
//
//Errors: none
//Warnings: 23
